
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * This code implements the NuclideFs client.  It uses the request module to
 * make XHR requests to the NuclideFS service.  It is a Promise based API.
 */

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var NuclideClient = (function () {
  function NuclideClient(id, eventbus) {
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    _classCallCheck(this, NuclideClient);

    this._id = id;
    this.eventbus = eventbus;
    this._options = options;
    this._searchProviders = {};
  }

  _createClass(NuclideClient, [{
    key: 'getID',
    value: function getID() {
      return this._id;
    }

    // Resolves if the connection looks healthy.
    // Will reject quickly if the connection looks unhealthy.
  }, {
    key: 'testConnection',
    value: function testConnection() {
      return this.eventbus.testConnection();
    }

    // Delegate RPC functions to the NuclideRemoteEventbus class.
  }, {
    key: 'callRemoteFunction',
    value: function callRemoteFunction() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return this.eventbus.callRemoteFunction.apply(this.eventbus, args);
    }
  }, {
    key: 'createRemoteObject',
    value: function createRemoteObject() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return this.eventbus.createRemoteObject.apply(this.eventbus, args);
    }
  }, {
    key: 'callRemoteMethod',
    value: function callRemoteMethod() {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return this.eventbus.callRemoteMethod.apply(this.eventbus, args);
    }
  }, {
    key: 'disposeRemoteObject',
    value: function disposeRemoteObject() {
      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return this.eventbus.disposeRemoteObject.apply(this.eventbus, args);
    }

    // Delegate marshalling to the NuclideRemoteEventbus class.
  }, {
    key: 'marshal',
    value: function marshal() {
      var _eventbus;

      return (_eventbus = this.eventbus).marshal.apply(_eventbus, arguments);
    }
  }, {
    key: 'unmarshal',
    value: function unmarshal() {
      var _eventbus2;

      return (_eventbus2 = this.eventbus).unmarshal.apply(_eventbus2, arguments);
    }
  }, {
    key: 'registerType',
    value: function registerType() {
      var _eventbus3;

      return (_eventbus3 = this.eventbus).registerType.apply(_eventbus3, arguments);
    }

    /**
     * Make rpc call to service given serviceUri in form of `$serviceName/$methodName` and args as arguments list.
     */
  }, {
    key: 'makeRpc',
    value: function makeRpc(serviceUri, args, serviceOptions) {
      var _serviceUri$split = serviceUri.split('/');

      var _serviceUri$split2 = _slicedToArray(_serviceUri$split, 2);

      var serviceName = _serviceUri$split2[0];
      var methodName = _serviceUri$split2[1];

      return this.eventbus.callServiceFrameworkMethod(serviceName, methodName,
      /* methodArgs */args,
      /* serviceOptions */serviceOptions);
    }
  }, {
    key: 'registerEventListener',
    value: function registerEventListener(eventName, callback, serviceOptions) {
      return this.eventbus.registerEventListener(eventName, callback, serviceOptions);
    }

    /**
     * Searches the contents of `directory` for paths mathing `query`.
     */
  }, {
    key: 'searchDirectory',
    value: _asyncToGenerator(function* (directory, query) {
      return yield this.eventbus.callMethod(
      /*serviceName*/'search',
      /*methodName*/'directory',
      /*methodArgs*/[directory, query],
      /*extraOptions*/{ json: true });
    })
  }, {
    key: 'doSearchQuery',
    value: function doSearchQuery(rootDirectory, provider, query) {
      return this.eventbus.callMethod(
      /*serviceName*/'search',
      /*methodName*/'query',
      /*methodArgs*/[rootDirectory, provider, query],
      /*extraOptions*/{ method: 'POST', json: true });
    }
  }, {
    key: 'getSearchProviders',
    value: _asyncToGenerator(function* (rootDirectory) {
      var providers = this._searchProviders[rootDirectory];
      if (providers) {
        return providers;
      }
      providers = yield this.eventbus.callMethod(
      /*serviceName*/'search',
      /*methodName*/'listProviders',
      /*methodArgs*/[rootDirectory],
      /*extraOptions*/{ method: 'POST', json: true });

      this._searchProviders[rootDirectory] = providers;

      return providers;
    })
  }, {
    key: 'close',
    value: function close() {
      if (this.eventbus) {
        this.eventbus.close();
        this.eventbus = null;
      }
    }
  }]);

  return NuclideClient;
})();

module.exports = NuclideClient;
//# sourceMappingURL=data:application/json;base64,
