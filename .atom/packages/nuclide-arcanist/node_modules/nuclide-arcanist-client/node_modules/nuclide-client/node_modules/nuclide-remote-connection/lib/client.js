
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var localClients = {};
var RemoteConnection = require('./RemoteConnection');
var localEventBus = null;
var defaultLocalClient = null;

var _require = require('./utils');

var containsPathSync = _require.containsPathSync;

var _require2 = require('nuclide-remote-uri');

var isRemote = _require2.isRemote;

module.exports = {
  /**
   * @return null if the specified path is a remote NuclideUri and the corresponding
   *     RemoteConnection has not been created yet. This is likely to happen if getClient() is
   *     called early in the startup process and we are trying to restore a remote project root.
   */
  getClient: function getClient(path) {
    if (isRemote(path)) {
      var connection = RemoteConnection.getForUri(path);
      return connection ? connection.getClient() : null;
    } else {
      if (!localEventBus) {
        var _NuclideLocalEventbus = require('nuclide-server/lib/NuclideLocalEventbus');
        localEventBus = new _NuclideLocalEventbus();
      }
      if (!defaultLocalClient) {
        var _NuclideClient = require('nuclide-server/lib/NuclideClient');
        defaultLocalClient = new _NuclideClient('local', localEventBus);
      }
      // Return a default local client with no working directory if Atom was started to edit a single file
      // with a command like: $ atom file.php
      var localClient = defaultLocalClient;
      atom.project.getPaths().forEach(function (rootPath) {
        if (!containsPathSync(rootPath, path)) {
          return;
        }
        // Create a local client with its root as the working directory, if none already exists.
        if (!localClients[rootPath]) {
          var _NuclideClient2 = require('nuclide-server/lib/NuclideClient');
          localClients[rootPath] = new _NuclideClient2(
          /*id: string*/'local/' + rootPath,
          /*eventbus: NuclideLocalEventBus*/localEventBus,
          /*options: NuclideClientOptions*/{ cwd: rootPath });
        }
        localClient = localClients[rootPath];
      });
      return localClient;
    }
  },

  getFileForPath: function getFileForPath(filePath) {
    if (isRemote(filePath)) {
      var connection = RemoteConnection.getForUri(filePath);
      if (!connection) {
        return null;
      }
      return connection.createFile(filePath);
    } else {
      var _require3 = require('atom');

      var _File = _require3.File;

      return new _File(filePath);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXJlbW90ZS1jb25uZWN0aW9uL2xpYi9jbGllbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7O0FBYVosSUFBTSxZQUFpRCxHQUFHLEVBQUUsQ0FBQztBQUM3RCxJQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3ZELElBQUksYUFBb0MsR0FBRyxJQUFJLENBQUM7QUFDaEQsSUFBSSxrQkFBa0MsR0FBRyxJQUFJLENBQUM7O2VBQ25CLE9BQU8sQ0FBQyxTQUFTLENBQUM7O0lBQXRDLGdCQUFnQixZQUFoQixnQkFBZ0I7O2dCQUNKLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQzs7SUFBekMsUUFBUSxhQUFSLFFBQVE7O0FBRWYsTUFBTSxDQUFDLE9BQU8sR0FBRzs7Ozs7O0FBTWYsV0FBUyxFQUFBLG1CQUFDLElBQWdCLEVBQWtCO0FBQzFDLFFBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ2xCLFVBQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwRCxhQUFPLFVBQVUsR0FBRyxVQUFVLENBQUMsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDO0tBQ25ELE1BQU07QUFDTCxVQUFJLENBQUMsYUFBYSxFQUFFO0FBQ2xCLFlBQU0scUJBQW9CLEdBQUcsT0FBTyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7QUFDaEYscUJBQWEsR0FBRyxJQUFJLHFCQUFvQixFQUFFLENBQUM7T0FDNUM7QUFDRCxVQUFJLENBQUMsa0JBQWtCLEVBQUU7QUFDdkIsWUFBTSxjQUFhLEdBQUcsT0FBTyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFDbEUsMEJBQWtCLEdBQUcsSUFBSSxjQUFhLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO09BQ2hFOzs7QUFHRCxVQUFJLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQztBQUNyQyxVQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFBLFFBQVEsRUFBSTtBQUMxQyxZQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFO0FBQ3JDLGlCQUFPO1NBQ1I7O0FBRUQsWUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUMzQixjQUFNLGVBQWEsR0FBRyxPQUFPLENBQUMsa0NBQWtDLENBQUMsQ0FBQztBQUNsRSxzQkFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksZUFBYTt3QkFDekIsUUFBUSxHQUFHLFFBQVE7NENBQ0MsYUFBYTsyQ0FDZCxFQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUMsQ0FDbEQsQ0FBQztTQUNIO0FBQ0QsbUJBQVcsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7T0FDdEMsQ0FBQyxDQUFDO0FBQ0gsYUFBTyxXQUFXLENBQUM7S0FDcEI7R0FDRjs7QUFFRCxnQkFBYyxFQUFBLHdCQUFDLFFBQW9CLEVBQXdCO0FBQ3pELFFBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQ3RCLFVBQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4RCxVQUFJLENBQUMsVUFBVSxFQUFFO0FBQ2YsZUFBTyxJQUFJLENBQUM7T0FDYjtBQUNELGFBQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN4QyxNQUFNO3NCQUNVLE9BQU8sQ0FBQyxNQUFNLENBQUM7O1VBQXZCLEtBQUksYUFBSixJQUFJOztBQUNYLGFBQU8sSUFBSSxLQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDM0I7R0FDRjtDQUNGLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtcmVtb3RlLWNvbm5lY3Rpb24vbGliL2NsaWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB0eXBlIHtOdWNsaWRlVXJpfSBmcm9tICdudWNsaWRlLXJlbW90ZS11cmknO1xuXG5jb25zdCBsb2NhbENsaWVudHM6IHtbcm9vdFBhdGg6IHN0cmluZ106IE51Y2xpZGVDbGllbnR9ID0ge307XG5jb25zdCBSZW1vdGVDb25uZWN0aW9uID0gcmVxdWlyZSgnLi9SZW1vdGVDb25uZWN0aW9uJyk7XG5sZXQgbG9jYWxFdmVudEJ1czogP051Y2xpZGVMb2NhbEV2ZW50YnVzID0gbnVsbDtcbmxldCBkZWZhdWx0TG9jYWxDbGllbnQ6ID9OdWNsaWRlQ2xpZW50ID0gbnVsbDtcbmNvbnN0IHtjb250YWluc1BhdGhTeW5jfSA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbmNvbnN0IHtpc1JlbW90ZX0gPSByZXF1aXJlKCdudWNsaWRlLXJlbW90ZS11cmknKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBAcmV0dXJuIG51bGwgaWYgdGhlIHNwZWNpZmllZCBwYXRoIGlzIGEgcmVtb3RlIE51Y2xpZGVVcmkgYW5kIHRoZSBjb3JyZXNwb25kaW5nXG4gICAqICAgICBSZW1vdGVDb25uZWN0aW9uIGhhcyBub3QgYmVlbiBjcmVhdGVkIHlldC4gVGhpcyBpcyBsaWtlbHkgdG8gaGFwcGVuIGlmIGdldENsaWVudCgpIGlzXG4gICAqICAgICBjYWxsZWQgZWFybHkgaW4gdGhlIHN0YXJ0dXAgcHJvY2VzcyBhbmQgd2UgYXJlIHRyeWluZyB0byByZXN0b3JlIGEgcmVtb3RlIHByb2plY3Qgcm9vdC5cbiAgICovXG4gIGdldENsaWVudChwYXRoOiBOdWNsaWRlVXJpKTogP051Y2xpZGVDbGllbnQge1xuICAgIGlmIChpc1JlbW90ZShwYXRoKSkge1xuICAgICAgY29uc3QgY29ubmVjdGlvbiA9IFJlbW90ZUNvbm5lY3Rpb24uZ2V0Rm9yVXJpKHBhdGgpO1xuICAgICAgcmV0dXJuIGNvbm5lY3Rpb24gPyBjb25uZWN0aW9uLmdldENsaWVudCgpIDogbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFsb2NhbEV2ZW50QnVzKSB7XG4gICAgICAgIGNvbnN0IE51Y2xpZGVMb2NhbEV2ZW50YnVzID0gcmVxdWlyZSgnbnVjbGlkZS1zZXJ2ZXIvbGliL051Y2xpZGVMb2NhbEV2ZW50YnVzJyk7XG4gICAgICAgIGxvY2FsRXZlbnRCdXMgPSBuZXcgTnVjbGlkZUxvY2FsRXZlbnRidXMoKTtcbiAgICAgIH1cbiAgICAgIGlmICghZGVmYXVsdExvY2FsQ2xpZW50KSB7XG4gICAgICAgIGNvbnN0IE51Y2xpZGVDbGllbnQgPSByZXF1aXJlKCdudWNsaWRlLXNlcnZlci9saWIvTnVjbGlkZUNsaWVudCcpO1xuICAgICAgICBkZWZhdWx0TG9jYWxDbGllbnQgPSBuZXcgTnVjbGlkZUNsaWVudCgnbG9jYWwnLCBsb2NhbEV2ZW50QnVzKTtcbiAgICAgIH1cbiAgICAgIC8vIFJldHVybiBhIGRlZmF1bHQgbG9jYWwgY2xpZW50IHdpdGggbm8gd29ya2luZyBkaXJlY3RvcnkgaWYgQXRvbSB3YXMgc3RhcnRlZCB0byBlZGl0IGEgc2luZ2xlIGZpbGVcbiAgICAgIC8vIHdpdGggYSBjb21tYW5kIGxpa2U6ICQgYXRvbSBmaWxlLnBocFxuICAgICAgbGV0IGxvY2FsQ2xpZW50ID0gZGVmYXVsdExvY2FsQ2xpZW50O1xuICAgICAgYXRvbS5wcm9qZWN0LmdldFBhdGhzKCkuZm9yRWFjaChyb290UGF0aCA9PiB7XG4gICAgICAgIGlmICghY29udGFpbnNQYXRoU3luYyhyb290UGF0aCwgcGF0aCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ3JlYXRlIGEgbG9jYWwgY2xpZW50IHdpdGggaXRzIHJvb3QgYXMgdGhlIHdvcmtpbmcgZGlyZWN0b3J5LCBpZiBub25lIGFscmVhZHkgZXhpc3RzLlxuICAgICAgICBpZiAoIWxvY2FsQ2xpZW50c1tyb290UGF0aF0pIHtcbiAgICAgICAgICBjb25zdCBOdWNsaWRlQ2xpZW50ID0gcmVxdWlyZSgnbnVjbGlkZS1zZXJ2ZXIvbGliL051Y2xpZGVDbGllbnQnKTtcbiAgICAgICAgICBsb2NhbENsaWVudHNbcm9vdFBhdGhdID0gbmV3IE51Y2xpZGVDbGllbnQoXG4gICAgICAgICAgICAvKmlkOiBzdHJpbmcqLyAnbG9jYWwvJyArIHJvb3RQYXRoLFxuICAgICAgICAgICAgLypldmVudGJ1czogTnVjbGlkZUxvY2FsRXZlbnRCdXMqLyBsb2NhbEV2ZW50QnVzLFxuICAgICAgICAgICAgLypvcHRpb25zOiBOdWNsaWRlQ2xpZW50T3B0aW9ucyovIHtjd2Q6IHJvb3RQYXRofVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgbG9jYWxDbGllbnQgPSBsb2NhbENsaWVudHNbcm9vdFBhdGhdO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbG9jYWxDbGllbnQ7XG4gICAgfVxuICB9LFxuXG4gIGdldEZpbGVGb3JQYXRoKGZpbGVQYXRoOiBOdWNsaWRlVXJpKTogPyhGaWxlIHwgUmVtb3RlRmlsZSkge1xuICAgIGlmIChpc1JlbW90ZShmaWxlUGF0aCkpIHtcbiAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBSZW1vdGVDb25uZWN0aW9uLmdldEZvclVyaShmaWxlUGF0aCk7XG4gICAgICBpZiAoIWNvbm5lY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29ubmVjdGlvbi5jcmVhdGVGaWxlKGZpbGVQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qge0ZpbGV9ID0gcmVxdWlyZSgnYXRvbScpO1xuICAgICAgcmV0dXJuIG5ldyBGaWxlKGZpbGVQYXRoKTtcbiAgICB9XG4gIH0sXG59O1xuIl19
