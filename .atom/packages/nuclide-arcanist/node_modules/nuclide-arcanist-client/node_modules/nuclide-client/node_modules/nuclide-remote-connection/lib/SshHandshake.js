
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports.decorateSshConnectionDelegateWithTracking = decorateSshConnectionDelegateWithTracking;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var ConnectionTracker = require('./ConnectionTracker');
var SshConnection = require('ssh2').Client;
var fs = require('fs-plus');
var net = require('net');
var logger = require('nuclide-logging').getLogger();
var invariant = require('assert');

var RemoteConnection = require('./RemoteConnection');

var _require = require('nuclide-commons');

var fsPromise = _require.fsPromise;

// Sync word and regex pattern for parsing command stdout.
var SYNC_WORD = 'SYNSYN';
var STDOUT_REGEX = /SYNSYN[\s\S\n]*({.*})[\s\S\n]*SYNSYN/;
var READY_TIMEOUT = 60000;

// for simple password-based authentication

var SupportedMethods = {
  SSL_AGENT: 'SSL_AGENT',
  PASSWORD: 'PASSWORD',
  PRIVATE_KEY: 'PRIVATE_KEY'
};

/**
 * The server is asking for replies to the given prompts for
 * keyboard-interactive user authentication.
 *
 * @param name is generally what you'd use as
 *     a window title (for GUI apps).
 * @param prompts is an array of { prompt: 'Password: ',
 *     echo: false } style objects (here echo indicates whether user input
 *     should be displayed on the screen).
 * @param finish: The answers for all prompts must be provided as an
 *     array of strings and passed to finish when you are ready to continue. Note:
 *     It's possible for the server to come back and ask more questions.
 */

var SshHandshake = (function () {
  function SshHandshake(delegate, connection) {
    var _this = this;

    _classCallCheck(this, SshHandshake);

    this._delegate = delegate;
    this._connection = connection ? connection : new SshConnection();
    this._connection.on('ready', this._onConnect.bind(this));
    this._connection.on('error', function (e) {
      return _this._delegate.onError(e, _this._config);
    });
    this._connection.on('keyboard-interactive', this._onKeyboardInteractive.bind(this));
  }

  _createClass(SshHandshake, [{
    key: 'connect',
    value: _asyncToGenerator(function* (config) {
      var _this2 = this;

      this._config = config;

      this._delegate.onWillConnect(this._config);

      var existingConnection = RemoteConnection.getByHostnameAndPath(this._config.host, this._config.cwd);

      if (existingConnection) {
        this._delegate.onDidConnect(existingConnection, this._config);
        return;
      }

      var connection = yield RemoteConnection.createConnectionBySavedConfig(this._config.host, this._config.cwd);

      if (connection) {
        this._delegate.onDidConnect(connection, this._config);
        return;
      }

      var lookupPreferIpv6 = require('nuclide-commons').dnsUtils.lookupPreferIpv6;

      return lookupPreferIpv6(config.host).then(function (address) {
        if (config.authMethod === SupportedMethods.SSL_AGENT) {
          // Point to ssh-agent's socket for ssh-agent-based authentication.
          var agent = process.env['SSH_AUTH_SOCK'];
          if (!agent && /^win/.test(process.platform)) {
            // #100: On Windows, fall back to pageant.
            agent = 'pageant';
          }
          _this2._connection.connect({
            host: address,
            port: config.sshPort,
            username: config.username,
            agent: agent,
            tryKeyboard: true,
            readyTimeout: READY_TIMEOUT
          });
        } else if (config.authMethod === SupportedMethods.PASSWORD) {
          // When the user chooses password-based authentication, we specify
          // the config as follows so that it tries simple password auth and
          // failing that it falls through to the keyboard interactive path
          _this2._connection.connect({
            host: address,
            port: config.sshPort,
            username: config.username,
            password: config.password,
            tryKeyboard: true
          });
        } else if (config.authMethod === SupportedMethods.PRIVATE_KEY) {
          // We use fs-plus's normalize() function because it will expand the ~, if present.
          var expandedPath = fs.normalize(config.pathToPrivateKey);
          fsPromise.readFile(expandedPath).then(function (privateKey) {
            _this2._connection.connect({
              host: address,
              port: config.sshPort,
              username: config.username,
              privateKey: privateKey,
              tryKeyboard: true,
              readyTimeout: READY_TIMEOUT
            });
          })['catch'](function (e) {
            _this2._delegate.onError(e, _this2._config);
          });
        } else {
          throw new Error('Invalid authentication method');
        }
      })['catch'](function (e) {
        _this2._delegate.onError(e, _this2._config);
      });
    })
  }, {
    key: 'cancel',
    value: function cancel() {
      this._connection.end();
    }
  }, {
    key: '_onKeyboardInteractive',
    value: function _onKeyboardInteractive(name, instructions, instructionsLang, prompts, finish) {
      this._delegate.onKeyboardInteractive(name, instructions, instructionsLang, prompts, finish);
    }
  }, {
    key: '_forwardSocket',
    value: function _forwardSocket(socket) {
      this._connection.forwardOut(socket.remoteAddress, socket.remotePort, 'localhost', this._remotePort, function (err, stream) {
        if (err) {
          socket.end();
          logger.error(err);
          return;
        }

        socket.pipe(stream);
        stream.pipe(socket);
      });
    }
  }, {
    key: '_updateServerInfo',
    value: function _updateServerInfo(serverInfo) {
      invariant(serverInfo.port);
      this._remotePort = serverInfo.port;
      this._remoteHost = '' + (serverInfo.hostname || this._config.host);
      // Because the value for the Initial Directory that the user supplied may have
      // been a symlink that was resolved by the server, overwrite the original `cwd`
      // value with the resolved value.
      invariant(serverInfo.workspace);
      this._config.cwd = serverInfo.workspace;
      invariant(serverInfo.ca);
      this._certificateAuthorityCertificate = serverInfo.ca;
      invariant(serverInfo.cert);
      this._clientCertificate = serverInfo.cert;
      invariant(serverInfo.key);
      this._clientKey = serverInfo.key;
    }
  }, {
    key: '_isSecure',
    value: function _isSecure() {
      return !!(this._certificateAuthorityCertificate && this._clientCertificate && this._clientKey);
    }
  }, {
    key: '_startRemoteServer',
    value: function _startRemoteServer() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        var stdOut = '';

        //TODO: escape any single quotes
        //TODO: the timeout value shall be configurable using .json file too (t6904691).
        var cmd = _this3._config.remoteServerCommand + ' --workspace=' + _this3._config.cwd + ' --common_name=' + _this3._config.host + ' -t 60';

        // This imitates a user typing:
        //   $ TERM=nuclide ssh server
        // then on the interactive prompt executing the remote server command.  If
        // that works, then nuclide should also work.
        //
        // The reason we don'y use exec here is because people like to put as the
        // last statement in their .bashrc zsh or fish.  This starts an
        // and interactive child shell that never exits if you exec.
        //
        // This is a bad idea because besides breaking us, it also breaks this:
        // $ ssh server any_cmd
        //
        // As a last resort we also set term to 'nuclide' so that if anything we
        // haven't thought of happens, the user can always add the following to
        // the top of their favorite shell startup file:
        //
        //   [ "$TERM" = "nuclide"] && return;
        _this3._connection.shell({ term: 'nuclide' }, function (err, stream) {
          if (err) {
            reject(err);
            return;
          }
          stream.on('close', function (code, signal) {
            var rejectWithError = function rejectWithError(error) {
              logger.error(error);
              var errorText = error + '\n\nstdout:' + stdOut;
              reject(new Error(errorText));
            };

            // Note: this code is probably the code from the child shell if one
            // is in use.
            if (code === 0) {
              var serverInfo = undefined;
              var match = STDOUT_REGEX.exec(stdOut);
              if (!match) {
                rejectWithError('Bad stdout from remote server: ' + stdOut);
                return;
              }
              try {
                serverInfo = JSON.parse(match[1]);
              } catch (e) {
                rejectWithError('Bad JSON reply from Nuclide server: ' + match[1]);
                return;
              }
              if (!serverInfo.workspace) {
                rejectWithError('Could not find directory: ' + _this3._config.cwd);
                return;
              }

              // Update server info that is needed for setting up client.
              _this3._updateServerInfo(serverInfo);
              resolve(undefined);
            } else {
              reject(new Error(stdOut));
            }
          }).on('data', function (data) {
            stdOut += data;
          });
          // Yes we exit twice.  This is because people who use shells like zsh
          // or fish, etc like to put zsh/fish as the last statement of their
          // .bashrc.  This means that when we exit zsh/fish, we then have to exit
          // the parent bash shell.
          //
          // The second exit is ignored when there is only one shell.
          //
          // We will still hang forever if they have a shell within a shell within
          // a shell.  But I can't bring myself to exit 3 times.
          //
          // TODO: (mikeo) There is a SHLVL environment variable set that can be
          // used to decide how many times to exit
          stream.end('echo ' + SYNC_WORD + ';' + cmd + ';echo ' + SYNC_WORD + '\nexit\nexit\n');
        });
      });
    }
  }, {
    key: '_onConnect',
    value: _asyncToGenerator(function* () {
      var _this4 = this;

      try {
        yield this._startRemoteServer();
      } catch (e) {
        this._delegate.onError(e, this._config);
        return;
      }

      var finishHandshake = _asyncToGenerator(function* (connection) {
        try {
          yield connection.initialize();
        } catch (e) {
          var _error = new Error('Failed to connect to Nuclide server on ' + _this4._config.host + ': ' + e.message);
          _this4._delegate.onError(_error, _this4._config);
        }
        _this4._delegate.onDidConnect(connection, _this4._config);
        // If we are secure then we don't need the ssh tunnel.
        if (_this4._isSecure()) {
          _this4._connection.end();
        }
      });

      // Use an ssh tunnel if server is not secure
      if (this._isSecure()) {
        invariant(this._remoteHost);
        invariant(this._remotePort);
        var _connection = new RemoteConnection({
          host: this._remoteHost,
          port: this._remotePort,
          cwd: this._config.cwd,
          certificateAuthorityCertificate: this._certificateAuthorityCertificate,
          clientCertificate: this._clientCertificate,
          clientKey: this._clientKey
        });
        finishHandshake(_connection);
      } else {
        this._forwardingServer = net.createServer(function (sock) {
          _this4._forwardSocket(sock);
        }).listen(0, 'localhost', function () {
          var localPort = _this4._getLocalPort();
          invariant(localPort);
          var connection = new RemoteConnection({
            host: 'localhost',
            port: localPort,
            cwd: _this4._config.cwd
          });
          finishHandshake(connection);
        });
      }
    })
  }, {
    key: '_getLocalPort',
    value: function _getLocalPort() {
      return this._forwardingServer ? this._forwardingServer.address().port : null;
    }
  }, {
    key: 'getConfig',
    value: function getConfig() {
      return this._config;
    }
  }]);

  return SshHandshake;
})();

exports.SshHandshake = SshHandshake;

SshHandshake.SupportedMethods = SupportedMethods;

function decorateSshConnectionDelegateWithTracking(delegate) {
  var connectionTracker = undefined;

  return {
    onKeyboardInteractive: function onKeyboardInteractive(name, instructions, instructionsLang, prompts, finish) {
      invariant(connectionTracker);
      connectionTracker.trackPromptYubikeyInput();
      delegate.onKeyboardInteractive(name, instructions, instructionsLang, prompts, function (answers) {
        invariant(connectionTracker);
        connectionTracker.trackFinishYubikeyInput();
        finish(answers);
      });
    },
    onWillConnect: function onWillConnect(config) {
      connectionTracker = new ConnectionTracker(config);
      delegate.onWillConnect(config);
    },
    onDidConnect: function onDidConnect(connection, config) {
      invariant(connectionTracker);
      connectionTracker.trackSuccess();
      delegate.onDidConnect(connection, config);
    },
    onError: function onError(error, config) {
      invariant(connectionTracker);
      connectionTracker.trackFailure(error);
      delegate.onError(error, config);
    }
  };
}

// host nuclide server is running on
// ssh port of host nuclide server is running on
// username to authenticate as
// The path to private key
// Command to use to start server
// Path to remote directory user should start in upon connection.
// Which of the authentication methods in `SupportedMethods` to use.

/** Invoked when server requests keyboard interaction */

/** Invoked when trying to connect */

/** Invoked when connection is sucessful */

/** Invoked when connection is fails */
//# sourceMappingURL=data:application/json;base64,
