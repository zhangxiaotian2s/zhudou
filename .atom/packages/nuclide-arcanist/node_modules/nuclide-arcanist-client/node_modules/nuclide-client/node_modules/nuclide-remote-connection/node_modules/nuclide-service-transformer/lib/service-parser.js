
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var babel = require('babel-core');
var fs = require('fs');

var _require = require('./method-name-parser');

var isEventMethodName = _require.isEventMethodName;

var cache = new Map();

function parseAst(sourceFilePath) {
  var sourceCode = fs.readFileSync(sourceFilePath, 'utf8');

  return babel.transform(sourceCode, {
    blacklist: ['es6.classes', 'flow', 'strict'],
    optional: ['es7.classProperties']
  }).ast;
}

/**
 * Parse service definition file and return an object like:
 * {className: $className, rpcMethodNames: [$methodName, ...], eventMethodNames: [$methodName, ..]}.
 * Keep it sync as it will be called from NuclideServer's constructor.
 */
function parseServiceApiSync(absoluteServiceDefinitionClassFilePath, serviceName) {
  if (cache.has(absoluteServiceDefinitionClassFilePath)) {
    return cache.get(absoluteServiceDefinitionClassFilePath);
  }

  var ast = parseAst(absoluteServiceDefinitionClassFilePath);

  var _ast$program$body$filter = ast.program.body.filter(function (astNode) {
    return astNode.type === 'ClassDeclaration' && astNode.id.name === serviceName;
  });

  var _ast$program$body$filter2 = _slicedToArray(_ast$program$body$filter, 1);

  var classDeclaration = _ast$program$body$filter2[0];

  var methodNames = classDeclaration.body.body
  // Because class bodies in ES7 can contain static property intializers, ensure a part is a
  // "MethodDefinition" before using it. Static properties have type "ClassProperty".
  .filter(function (bodyPart) {
    return bodyPart.type === 'MethodDefinition';
  }).map(function (methodDefinition) {
    return methodDefinition.key.name;
  });
  var rpcMethodNames = methodNames.filter(function (methodName) {
    return !isEventMethodName(methodName);
  });
  var eventMethodNames = methodNames.filter(function (methodName) {
    return isEventMethodName(methodName);
  });

  var serviceStructure = {
    className: classDeclaration.id.name,
    eventMethodNames: eventMethodNames,
    rpcMethodNames: rpcMethodNames
  };

  cache.set(absoluteServiceDefinitionClassFilePath + '$' + serviceName, serviceStructure);

  return serviceStructure;
}

module.exports = parseServiceApiSync;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZpY2UtdHJhbnNmb3JtZXIvbGliL3NlcnZpY2UtcGFyc2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7Ozs7O0FBV1osSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3BDLElBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzs7ZUFDRyxPQUFPLENBQUMsc0JBQXNCLENBQUM7O0lBQXBELGlCQUFpQixZQUFqQixpQkFBaUI7O0FBRXhCLElBQU0sS0FBdUIsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDOztBQUUxQyxTQUFTLFFBQVEsQ0FBQyxjQUFzQixFQUFPO0FBQzdDLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDOztBQUUzRCxTQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFO0FBQ2pDLGFBQVMsRUFBRSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDO0FBQzVDLFlBQVEsRUFBRSxDQUFDLHFCQUFxQixDQUFDO0dBQ2xDLENBQUMsQ0FBQyxHQUFHLENBQUM7Q0FDUjs7Ozs7OztBQU9ELFNBQVMsbUJBQW1CLENBQzFCLHNDQUE4QyxFQUM5QyxXQUFtQixFQUNkO0FBQ0wsTUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLEVBQUU7QUFDckQsV0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7R0FDMUQ7O0FBRUQsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLHNDQUFzQyxDQUFDLENBQUM7O2lDQUVsQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDdEMsTUFBTSxDQUFDLFVBQUEsT0FBTztXQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssa0JBQWtCLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssV0FBVztHQUFBLENBQUM7Ozs7TUFEdkYsZ0JBQWdCOztBQUd2QixNQUFNLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSTs7O0dBRzNDLE1BQU0sQ0FBQyxVQUFBLFFBQVE7V0FBSSxRQUFRLENBQUMsSUFBSSxLQUFLLGtCQUFrQjtHQUFBLENBQUMsQ0FDeEQsR0FBRyxDQUFDLFVBQUEsZ0JBQWdCO1dBQUksZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUk7R0FBQSxDQUFDLENBQUM7QUFDdEQsTUFBTSxjQUFjLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFBLFVBQVU7V0FBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQztHQUFBLENBQUMsQ0FBQztBQUN4RixNQUFNLGdCQUFnQixHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBQSxVQUFVO1dBQUksaUJBQWlCLENBQUMsVUFBVSxDQUFDO0dBQUEsQ0FBQyxDQUFDOztBQUV6RixNQUFNLGdCQUFnQixHQUFHO0FBQ3ZCLGFBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsSUFBSTtBQUNuQyxvQkFBZ0IsRUFBaEIsZ0JBQWdCO0FBQ2hCLGtCQUFjLEVBQWQsY0FBYztHQUNmLENBQUM7O0FBRUYsT0FBSyxDQUFDLEdBQUcsQ0FBQyxzQ0FBc0MsR0FBRyxHQUFHLEdBQUcsV0FBVyxFQUFFLGdCQUFnQixDQUFDLENBQUM7O0FBRXhGLFNBQU8sZ0JBQWdCLENBQUM7Q0FDekI7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1zZXJ2aWNlLXRyYW5zZm9ybWVyL2xpYi9zZXJ2aWNlLXBhcnNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNvbnN0IGJhYmVsID0gcmVxdWlyZSgnYmFiZWwtY29yZScpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3Qge2lzRXZlbnRNZXRob2ROYW1lfSA9IHJlcXVpcmUoJy4vbWV0aG9kLW5hbWUtcGFyc2VyJyk7XG5cbmNvbnN0IGNhY2hlOiBNYXA8c3RyaW5nLCBhbnk+ID0gbmV3IE1hcCgpO1xuXG5mdW5jdGlvbiBwYXJzZUFzdChzb3VyY2VGaWxlUGF0aDogc3RyaW5nKTogYW55IHtcbiAgY29uc3Qgc291cmNlQ29kZSA9IGZzLnJlYWRGaWxlU3luYyhzb3VyY2VGaWxlUGF0aCwgJ3V0ZjgnKTtcblxuICByZXR1cm4gYmFiZWwudHJhbnNmb3JtKHNvdXJjZUNvZGUsIHtcbiAgICBibGFja2xpc3Q6IFsnZXM2LmNsYXNzZXMnLCAnZmxvdycsICdzdHJpY3QnXSxcbiAgICBvcHRpb25hbDogWydlczcuY2xhc3NQcm9wZXJ0aWVzJ10sXG4gIH0pLmFzdDtcbn1cblxuLyoqXG4gKiBQYXJzZSBzZXJ2aWNlIGRlZmluaXRpb24gZmlsZSBhbmQgcmV0dXJuIGFuIG9iamVjdCBsaWtlOlxuICoge2NsYXNzTmFtZTogJGNsYXNzTmFtZSwgcnBjTWV0aG9kTmFtZXM6IFskbWV0aG9kTmFtZSwgLi4uXSwgZXZlbnRNZXRob2ROYW1lczogWyRtZXRob2ROYW1lLCAuLl19LlxuICogS2VlcCBpdCBzeW5jIGFzIGl0IHdpbGwgYmUgY2FsbGVkIGZyb20gTnVjbGlkZVNlcnZlcidzIGNvbnN0cnVjdG9yLlxuICovXG5mdW5jdGlvbiBwYXJzZVNlcnZpY2VBcGlTeW5jKFxuICBhYnNvbHV0ZVNlcnZpY2VEZWZpbml0aW9uQ2xhc3NGaWxlUGF0aDogc3RyaW5nLFxuICBzZXJ2aWNlTmFtZTogc3RyaW5nLFxuKTogYW55IHtcbiAgaWYgKGNhY2hlLmhhcyhhYnNvbHV0ZVNlcnZpY2VEZWZpbml0aW9uQ2xhc3NGaWxlUGF0aCkpIHtcbiAgICByZXR1cm4gY2FjaGUuZ2V0KGFic29sdXRlU2VydmljZURlZmluaXRpb25DbGFzc0ZpbGVQYXRoKTtcbiAgfVxuXG4gIGNvbnN0IGFzdCA9IHBhcnNlQXN0KGFic29sdXRlU2VydmljZURlZmluaXRpb25DbGFzc0ZpbGVQYXRoKTtcblxuICBjb25zdCBbY2xhc3NEZWNsYXJhdGlvbl0gPSBhc3QucHJvZ3JhbS5ib2R5XG4gICAgICAuZmlsdGVyKGFzdE5vZGUgPT4gYXN0Tm9kZS50eXBlID09PSAnQ2xhc3NEZWNsYXJhdGlvbicgJiYgYXN0Tm9kZS5pZC5uYW1lID09PSBzZXJ2aWNlTmFtZSk7XG5cbiAgY29uc3QgbWV0aG9kTmFtZXMgPSBjbGFzc0RlY2xhcmF0aW9uLmJvZHkuYm9keVxuICAgIC8vIEJlY2F1c2UgY2xhc3MgYm9kaWVzIGluIEVTNyBjYW4gY29udGFpbiBzdGF0aWMgcHJvcGVydHkgaW50aWFsaXplcnMsIGVuc3VyZSBhIHBhcnQgaXMgYVxuICAgIC8vIFwiTWV0aG9kRGVmaW5pdGlvblwiIGJlZm9yZSB1c2luZyBpdC4gU3RhdGljIHByb3BlcnRpZXMgaGF2ZSB0eXBlIFwiQ2xhc3NQcm9wZXJ0eVwiLlxuICAgIC5maWx0ZXIoYm9keVBhcnQgPT4gYm9keVBhcnQudHlwZSA9PT0gJ01ldGhvZERlZmluaXRpb24nKVxuICAgIC5tYXAobWV0aG9kRGVmaW5pdGlvbiA9PiBtZXRob2REZWZpbml0aW9uLmtleS5uYW1lKTtcbiAgY29uc3QgcnBjTWV0aG9kTmFtZXMgPSBtZXRob2ROYW1lcy5maWx0ZXIobWV0aG9kTmFtZSA9PiAhaXNFdmVudE1ldGhvZE5hbWUobWV0aG9kTmFtZSkpO1xuICBjb25zdCBldmVudE1ldGhvZE5hbWVzID0gbWV0aG9kTmFtZXMuZmlsdGVyKG1ldGhvZE5hbWUgPT4gaXNFdmVudE1ldGhvZE5hbWUobWV0aG9kTmFtZSkpO1xuXG4gIGNvbnN0IHNlcnZpY2VTdHJ1Y3R1cmUgPSB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc0RlY2xhcmF0aW9uLmlkLm5hbWUsXG4gICAgZXZlbnRNZXRob2ROYW1lcyxcbiAgICBycGNNZXRob2ROYW1lcyxcbiAgfTtcblxuICBjYWNoZS5zZXQoYWJzb2x1dGVTZXJ2aWNlRGVmaW5pdGlvbkNsYXNzRmlsZVBhdGggKyAnJCcgKyBzZXJ2aWNlTmFtZSwgc2VydmljZVN0cnVjdHVyZSk7XG5cbiAgcmV0dXJuIHNlcnZpY2VTdHJ1Y3R1cmU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2VTZXJ2aWNlQXBpU3luYztcbiJdfQ==
