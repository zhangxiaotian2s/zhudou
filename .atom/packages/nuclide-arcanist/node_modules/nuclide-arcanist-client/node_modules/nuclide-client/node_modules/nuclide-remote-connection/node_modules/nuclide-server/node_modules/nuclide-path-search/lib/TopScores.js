Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _heap = require('heap');

var _heap2 = _interopRequireDefault(_heap);

var _utils = require('./utils');

/**
 * This data structure is designed to hold the top K scores from a collection of
 * N scores where scores become available one at a time. The expectation is that
 * N will be much, much greater than K.
 *
 * insert() is O(lg K)
 * getTopScores() is O(K lg K)
 *
 * Therefore, finding the top K scores from a collection of N elements should be
 * O(N lg K).
 */
'use babel';

var TopScores = (function () {
  function TopScores(capacity) {
    _classCallCheck(this, TopScores);

    this._capacity = capacity;
    this._full = false;
    this._heap = new _heap2['default'](_utils.inverseScoreComparator);
    this._min = null;
  }

  _createClass(TopScores, [{
    key: 'insert',
    value: function insert(score) {
      if (this._full && this._min) {
        var cmp = (0, _utils.scoreComparator)(score, this._min);
        if (cmp < 0) {
          this._doInsert(score);
        }
      } else {
        this._doInsert(score);
      }
    }
  }, {
    key: '_doInsert',
    value: function _doInsert(score) {
      if (this._full) {
        this._heap.replace(score);
      } else {
        this._heap.insert(score);
        this._full = this._heap.size() === this._capacity;
      }
      this._min = this._heap.peek();
    }
  }, {
    key: 'getSize',
    value: function getSize() {
      return this._heap.size();
    }

    /**
     * @return an Array where Scores will be sorted in ascending order.
     */
  }, {
    key: 'getTopScores',
    value: function getTopScores() {
      var array = this._heap.toArray();
      array.sort(_utils.scoreComparator);
      return array;
    }
  }]);

  return TopScores;
})();

exports['default'] = TopScores;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXBhdGgtc2VhcmNoL2xpYi9Ub3BTY29yZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQVdpQixNQUFNOzs7O3FCQU1oQixTQUFTOzs7Ozs7Ozs7Ozs7O0FBakJoQixXQUFXLENBQUM7O0lBOEJTLFNBQVM7QUFNakIsV0FOUSxTQUFTLENBTWhCLFFBQWdCLEVBQUU7MEJBTlgsU0FBUzs7QUFPMUIsUUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7QUFDMUIsUUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDbkIsUUFBSSxDQUFDLEtBQUssR0FBRyw2QkF2QmYsc0JBQXNCLENBdUJ5QixDQUFDO0FBQzlDLFFBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0dBQ2xCOztlQVhrQixTQUFTOztXQWF0QixnQkFBQyxLQUFpQixFQUFFO0FBQ3hCLFVBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQzNCLFlBQU0sR0FBRyxHQUFHLFdBOUJoQixlQUFlLEVBOEJpQixLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlDLFlBQUksR0FBRyxHQUFHLENBQUMsRUFBRTtBQUNYLGNBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkI7T0FDRixNQUFNO0FBQ0wsWUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztPQUN2QjtLQUNGOzs7V0FFUSxtQkFBQyxLQUFpQixFQUFFO0FBQzNCLFVBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtBQUNkLFlBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO09BQzNCLE1BQU07QUFDTCxZQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6QixZQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQztPQUNuRDtBQUNELFVBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUMvQjs7O1dBRU0sbUJBQVc7QUFDaEIsYUFBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0tBQzFCOzs7Ozs7O1dBS1csd0JBQXNCO0FBQ2hDLFVBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDbkMsV0FBSyxDQUFDLElBQUksUUExRFosZUFBZSxDQTBEYyxDQUFDO0FBQzVCLGFBQU8sS0FBSyxDQUFDO0tBQ2Q7OztTQTdDa0IsU0FBUzs7O3FCQUFULFNBQVMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtcGF0aC1zZWFyY2gvbGliL1RvcFNjb3Jlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBIZWFwIGZyb20gJ2hlYXAnO1xuXG5pbXBvcnQgdHlwZSB7UXVlcnlTY29yZX0gZnJvbSAnLi9RdWVyeVNjb3JlJztcbmltcG9ydCB7XG4gIHNjb3JlQ29tcGFyYXRvcixcbiAgaW52ZXJzZVNjb3JlQ29tcGFyYXRvcixcbn0gZnJvbSAnLi91dGlscyc7XG5cbi8qKlxuICogVGhpcyBkYXRhIHN0cnVjdHVyZSBpcyBkZXNpZ25lZCB0byBob2xkIHRoZSB0b3AgSyBzY29yZXMgZnJvbSBhIGNvbGxlY3Rpb24gb2ZcbiAqIE4gc2NvcmVzIHdoZXJlIHNjb3JlcyBiZWNvbWUgYXZhaWxhYmxlIG9uZSBhdCBhIHRpbWUuIFRoZSBleHBlY3RhdGlvbiBpcyB0aGF0XG4gKiBOIHdpbGwgYmUgbXVjaCwgbXVjaCBncmVhdGVyIHRoYW4gSy5cbiAqXG4gKiBpbnNlcnQoKSBpcyBPKGxnIEspXG4gKiBnZXRUb3BTY29yZXMoKSBpcyBPKEsgbGcgSylcbiAqXG4gKiBUaGVyZWZvcmUsIGZpbmRpbmcgdGhlIHRvcCBLIHNjb3JlcyBmcm9tIGEgY29sbGVjdGlvbiBvZiBOIGVsZW1lbnRzIHNob3VsZCBiZVxuICogTyhOIGxnIEspLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb3BTY29yZXMge1xuICBfY2FwYWNpdHk6IG51bWJlcjtcbiAgX2Z1bGw6IGJvb2xlYW47XG4gIF9oZWFwOiBIZWFwO1xuICBfbWluOiA/UXVlcnlTY29yZTtcblxuICBjb25zdHJ1Y3RvcihjYXBhY2l0eTogbnVtYmVyKSB7XG4gICAgdGhpcy5fY2FwYWNpdHkgPSBjYXBhY2l0eTtcbiAgICB0aGlzLl9mdWxsID0gZmFsc2U7XG4gICAgdGhpcy5faGVhcCA9IG5ldyBIZWFwKGludmVyc2VTY29yZUNvbXBhcmF0b3IpO1xuICAgIHRoaXMuX21pbiA9IG51bGw7XG4gIH1cblxuICBpbnNlcnQoc2NvcmU6IFF1ZXJ5U2NvcmUpIHtcbiAgICBpZiAodGhpcy5fZnVsbCAmJiB0aGlzLl9taW4pIHtcbiAgICAgIGNvbnN0IGNtcCA9IHNjb3JlQ29tcGFyYXRvcihzY29yZSwgdGhpcy5fbWluKTtcbiAgICAgIGlmIChjbXAgPCAwKSB7XG4gICAgICAgIHRoaXMuX2RvSW5zZXJ0KHNjb3JlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZG9JbnNlcnQoc2NvcmUpO1xuICAgIH1cbiAgfVxuXG4gIF9kb0luc2VydChzY29yZTogUXVlcnlTY29yZSkge1xuICAgIGlmICh0aGlzLl9mdWxsKSB7XG4gICAgICB0aGlzLl9oZWFwLnJlcGxhY2Uoc2NvcmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oZWFwLmluc2VydChzY29yZSk7XG4gICAgICB0aGlzLl9mdWxsID0gdGhpcy5faGVhcC5zaXplKCkgPT09IHRoaXMuX2NhcGFjaXR5O1xuICAgIH1cbiAgICB0aGlzLl9taW4gPSB0aGlzLl9oZWFwLnBlZWsoKTtcbiAgfVxuXG4gIGdldFNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5faGVhcC5zaXplKCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiBhbiBBcnJheSB3aGVyZSBTY29yZXMgd2lsbCBiZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgKi9cbiAgZ2V0VG9wU2NvcmVzKCk6IEFycmF5PFF1ZXJ5U2NvcmU+IHtcbiAgICBjb25zdCBhcnJheSA9IHRoaXMuX2hlYXAudG9BcnJheSgpO1xuICAgIGFycmF5LnNvcnQoc2NvcmVDb21wYXJhdG9yKTtcbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cbn1cbiJdfQ==
