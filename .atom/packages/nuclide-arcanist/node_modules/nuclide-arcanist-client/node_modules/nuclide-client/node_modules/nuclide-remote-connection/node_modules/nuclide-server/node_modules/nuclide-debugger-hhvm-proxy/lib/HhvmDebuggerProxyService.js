Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _utils = require('./utils');

var _helpers = require('./helpers');

var _ConnectionUtils = require('./ConnectionUtils');

// Connection states

var _MessageTranslator = require('./MessageTranslator');

/**
 * Proxy for converting between Chrome dev tools debugger
 * and HHVM Dbgp debuggee.
 *
 * Chrome Debugging protocol spec is here:
 * https://developer.chrome.com/devtools/docs/protocol/1.1/index
 *
 * Dbgp spec is here:
 * http://xdebug.org/docs-dbgp.php
 *
 * Usage:
 *    After construction, call onNotify() with a callback to receive Chrome
 *    Notifications.
 *    Call attach() to attach to the dbgp debuggee.
 *    After the promise returned by attach() is resolved, call sendCommand()
 *    to send Chrome Commands, and be prepared to receive notifications on the
 *    callback registered with onNotify().
 */

var _ClientCallback = require('./ClientCallback');

'use babel';
var INITIAL = 'initial';
var CONNECTING = 'connecting';
var CONNECTED = 'connected';
var CLOSED = 'closed';

var HhvmDebuggerProxyService = (function () {
  function HhvmDebuggerProxyService() {
    _classCallCheck(this, HhvmDebuggerProxyService);

    this._state = INITIAL;
    this._translator = null;
    this._clientCallback = new _ClientCallback.ClientCallback();
  }

  _createClass(HhvmDebuggerProxyService, [{
    key: 'getNotificationObservable',
    value: function getNotificationObservable() {
      return this._clientCallback.getNotificationObservable();
    }
  }, {
    key: 'getServerMessageObservable',
    value: function getServerMessageObservable() {
      return this._clientCallback.getServerMessageObservable();
    }
  }, {
    key: 'attach',
    value: _asyncToGenerator(function* (config) {
      var _this = this;

      (0, _utils.logInfo)('Connecting config: ' + JSON.stringify(config));

      yield (0, _ConnectionUtils.setRootDirectoryUri)(config.targetUri);
      (0, _utils.setLogLevel)(config.logLevel);
      this._setState(CONNECTING);

      this._translator = new _MessageTranslator.MessageTranslator(config, this._clientCallback);
      this._translator.onSessionEnd(function () {
        _this._onEnd();
      });

      this._setState(CONNECTED);

      return 'HHVM connected';
    })
  }, {
    key: 'launchScript',
    value: _asyncToGenerator(function* (scriptPath) {
      (0, _utils.log)('launchScript: ' + scriptPath);
      (0, _helpers.launchPhpScriptWithXDebugEnabled)(scriptPath);
      return 'Script launched';
    })
  }, {
    key: 'sendCommand',
    value: _asyncToGenerator(function* (message) {
      (0, _utils.logInfo)('Recieved command: ' + message);
      if (this._translator) {
        this._translator.handleCommand(message);
      }
    })
  }, {
    key: '_onEnd',
    value: function _onEnd() {
      this._setState(CLOSED);
    }
  }, {
    key: '_setState',
    value: function _setState(newState) {
      (0, _utils.log)('state change from ' + this._state + ' to ' + newState);
      // TODO: Consider logging socket info: remote ip, etc.
      this._state = newState;

      if (this._state === CLOSED) {
        this.dispose();
      }
    }
  }, {
    key: 'dispose',
    value: _asyncToGenerator(function* () {
      (0, _utils.logInfo)('Proxy: Ending session');
      this._clientCallback.dispose();
      if (this._translator) {
        this._translator.dispose();
        this._translator = null;
      }
    })
  }]);

  return HhvmDebuggerProxyService;
})();

exports.HhvmDebuggerProxyService = HhvmDebuggerProxyService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWRlYnVnZ2VyLWhodm0tcHJveHkvbGliL0hodm1EZWJ1Z2dlclByb3h5U2VydmljZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBV3dDLFNBQVM7O3VCQUNGLFdBQVc7OytCQUN4QixtQkFBbUI7Ozs7aUNBUXJCLHFCQUFxQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQXFCeEIsa0JBQWtCOztBQTFDL0MsV0FBVyxDQUFDO0FBZ0JaLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUMxQixJQUFNLFVBQVUsR0FBRyxZQUFZLENBQUM7QUFDaEMsSUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDO0FBQzlCLElBQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQzs7SUF5Qlgsd0JBQXdCO0FBS3hCLFdBTEEsd0JBQXdCLEdBS3JCOzBCQUxILHdCQUF3Qjs7QUFNakMsUUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUM7QUFDdEIsUUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7QUFDeEIsUUFBSSxDQUFDLGVBQWUsR0FBRyxvQkFWbkIsY0FBYyxFQVV5QixDQUFDO0dBQzdDOztlQVRVLHdCQUF3Qjs7V0FXVixxQ0FBb0M7QUFDM0QsYUFBTyxJQUFJLENBQUMsZUFBZSxDQUFDLHlCQUF5QixFQUFFLENBQUM7S0FDekQ7OztXQUV5QixzQ0FBdUI7QUFDL0MsYUFBTyxJQUFJLENBQUMsZUFBZSxDQUFDLDBCQUEwQixFQUFFLENBQUM7S0FDMUQ7Ozs2QkFFVyxXQUFDLE1BQXdCLEVBQW1COzs7QUFDdEQsaUJBckRTLE9BQU8sRUFxRFIscUJBQXFCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOztBQUV4RCxZQUFNLHFCQXJERixtQkFBbUIsRUFxREcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzVDLGlCQXhEa0IsV0FBVyxFQXdEakIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdCLFVBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7O0FBRTNCLFVBQUksQ0FBQyxXQUFXLEdBQUcsdUJBakRmLGlCQUFpQixDQWlEb0IsTUFBTSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN2RSxVQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxZQUFNO0FBQUUsY0FBSyxNQUFNLEVBQUUsQ0FBQztPQUFFLENBQUMsQ0FBQzs7QUFFeEQsVUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFMUIsYUFBTyxnQkFBZ0IsQ0FBQztLQUN6Qjs7OzZCQUVpQixXQUFDLFVBQWtCLEVBQW1CO0FBQ3RELGlCQXBFSSxHQUFHLEVBb0VILGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxDQUFDO0FBQ25DLG1CQXBFSSxnQ0FBZ0MsRUFvRUgsVUFBVSxDQUFDLENBQUM7QUFDN0MsYUFBTyxpQkFBaUIsQ0FBQztLQUMxQjs7OzZCQUVnQixXQUFDLE9BQWUsRUFBaUI7QUFDaEQsaUJBMUVTLE9BQU8sRUEwRVIsb0JBQW9CLEdBQUcsT0FBTyxDQUFDLENBQUM7QUFDeEMsVUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQ3BCLFlBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO09BQ3pDO0tBQ0Y7OztXQUVLLGtCQUFTO0FBQ2IsVUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUN4Qjs7O1dBRVEsbUJBQUMsUUFBZ0IsRUFBUTtBQUNoQyxpQkFyRkksR0FBRyxFQXFGSCxvQkFBb0IsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQzs7QUFFNUQsVUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7O0FBRXZCLFVBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxNQUFNLEVBQUU7QUFDMUIsWUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO09BQ2hCO0tBQ0Y7Ozs2QkFFWSxhQUFrQjtBQUM3QixpQkEvRlMsT0FBTyxFQStGUix1QkFBdUIsQ0FBQyxDQUFDO0FBQ2pDLFVBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDL0IsVUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQ3BCLFlBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDM0IsWUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7T0FDekI7S0FDRjs7O1NBcEVVLHdCQUF3QiIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1kZWJ1Z2dlci1oaHZtLXByb3h5L2xpYi9IaHZtRGVidWdnZXJQcm94eVNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQge2xvZywgbG9nSW5mbywgc2V0TG9nTGV2ZWx9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHtsYXVuY2hQaHBTY3JpcHRXaXRoWERlYnVnRW5hYmxlZH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7c2V0Um9vdERpcmVjdG9yeVVyaX0gZnJvbSAnLi9Db25uZWN0aW9uVXRpbHMnO1xuXG4vLyBDb25uZWN0aW9uIHN0YXRlc1xuY29uc3QgSU5JVElBTCA9ICdpbml0aWFsJztcbmNvbnN0IENPTk5FQ1RJTkcgPSAnY29ubmVjdGluZyc7XG5jb25zdCBDT05ORUNURUQgPSAnY29ubmVjdGVkJztcbmNvbnN0IENMT1NFRCA9ICdjbG9zZWQnO1xuXG5pbXBvcnQge01lc3NhZ2VUcmFuc2xhdG9yfSBmcm9tICcuL01lc3NhZ2VUcmFuc2xhdG9yJztcbmltcG9ydCB0eXBlIHtDb25uZWN0aW9uQ29uZmlnfSBmcm9tICcuL0RiZ3BDb25uZWN0b3InO1xuXG4vKipcbiAqIFByb3h5IGZvciBjb252ZXJ0aW5nIGJldHdlZW4gQ2hyb21lIGRldiB0b29scyBkZWJ1Z2dlclxuICogYW5kIEhIVk0gRGJncCBkZWJ1Z2dlZS5cbiAqXG4gKiBDaHJvbWUgRGVidWdnaW5nIHByb3RvY29sIHNwZWMgaXMgaGVyZTpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZGV2dG9vbHMvZG9jcy9wcm90b2NvbC8xLjEvaW5kZXhcbiAqXG4gKiBEYmdwIHNwZWMgaXMgaGVyZTpcbiAqIGh0dHA6Ly94ZGVidWcub3JnL2RvY3MtZGJncC5waHBcbiAqXG4gKiBVc2FnZTpcbiAqICAgIEFmdGVyIGNvbnN0cnVjdGlvbiwgY2FsbCBvbk5vdGlmeSgpIHdpdGggYSBjYWxsYmFjayB0byByZWNlaXZlIENocm9tZVxuICogICAgTm90aWZpY2F0aW9ucy5cbiAqICAgIENhbGwgYXR0YWNoKCkgdG8gYXR0YWNoIHRvIHRoZSBkYmdwIGRlYnVnZ2VlLlxuICogICAgQWZ0ZXIgdGhlIHByb21pc2UgcmV0dXJuZWQgYnkgYXR0YWNoKCkgaXMgcmVzb2x2ZWQsIGNhbGwgc2VuZENvbW1hbmQoKVxuICogICAgdG8gc2VuZCBDaHJvbWUgQ29tbWFuZHMsIGFuZCBiZSBwcmVwYXJlZCB0byByZWNlaXZlIG5vdGlmaWNhdGlvbnMgb24gdGhlXG4gKiAgICBjYWxsYmFjayByZWdpc3RlcmVkIHdpdGggb25Ob3RpZnkoKS5cbiAqL1xuaW1wb3J0IHtDbGllbnRDYWxsYmFja30gZnJvbSAnLi9DbGllbnRDYWxsYmFjayc7XG5cbmV4cG9ydCBjbGFzcyBIaHZtRGVidWdnZXJQcm94eVNlcnZpY2Uge1xuICBfc3RhdGU6IHN0cmluZztcbiAgX3RyYW5zbGF0b3I6ID9NZXNzYWdlVHJhbnNsYXRvcjtcbiAgX2NsaWVudENhbGxiYWNrOiBDbGllbnRDYWxsYmFjaztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9zdGF0ZSA9IElOSVRJQUw7XG4gICAgdGhpcy5fdHJhbnNsYXRvciA9IG51bGw7XG4gICAgdGhpcy5fY2xpZW50Q2FsbGJhY2sgPSBuZXcgQ2xpZW50Q2FsbGJhY2soKTtcbiAgfVxuXG4gIGdldE5vdGlmaWNhdGlvbk9ic2VydmFibGUoKTogT2JzZXJ2YWJsZTxOb3RpZmljYXRpb25NZXNzYWdlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudENhbGxiYWNrLmdldE5vdGlmaWNhdGlvbk9ic2VydmFibGUoKTtcbiAgfVxuXG4gIGdldFNlcnZlck1lc3NhZ2VPYnNlcnZhYmxlKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudENhbGxiYWNrLmdldFNlcnZlck1lc3NhZ2VPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBhc3luYyBhdHRhY2goY29uZmlnOiBDb25uZWN0aW9uQ29uZmlnKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBsb2dJbmZvKCdDb25uZWN0aW5nIGNvbmZpZzogJyArIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpO1xuXG4gICAgYXdhaXQgc2V0Um9vdERpcmVjdG9yeVVyaShjb25maWcudGFyZ2V0VXJpKTtcbiAgICBzZXRMb2dMZXZlbChjb25maWcubG9nTGV2ZWwpO1xuICAgIHRoaXMuX3NldFN0YXRlKENPTk5FQ1RJTkcpO1xuXG4gICAgdGhpcy5fdHJhbnNsYXRvciA9IG5ldyBNZXNzYWdlVHJhbnNsYXRvcihjb25maWcsIHRoaXMuX2NsaWVudENhbGxiYWNrKTtcbiAgICB0aGlzLl90cmFuc2xhdG9yLm9uU2Vzc2lvbkVuZCgoKSA9PiB7IHRoaXMuX29uRW5kKCk7IH0pO1xuXG4gICAgdGhpcy5fc2V0U3RhdGUoQ09OTkVDVEVEKTtcblxuICAgIHJldHVybiAnSEhWTSBjb25uZWN0ZWQnO1xuICB9XG5cbiAgYXN5bmMgbGF1bmNoU2NyaXB0KHNjcmlwdFBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgbG9nKCdsYXVuY2hTY3JpcHQ6ICcgKyBzY3JpcHRQYXRoKTtcbiAgICBsYXVuY2hQaHBTY3JpcHRXaXRoWERlYnVnRW5hYmxlZChzY3JpcHRQYXRoKTtcbiAgICByZXR1cm4gJ1NjcmlwdCBsYXVuY2hlZCc7XG4gIH1cblxuICBhc3luYyBzZW5kQ29tbWFuZChtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBsb2dJbmZvKCdSZWNpZXZlZCBjb21tYW5kOiAnICsgbWVzc2FnZSk7XG4gICAgaWYgKHRoaXMuX3RyYW5zbGF0b3IpIHtcbiAgICAgIHRoaXMuX3RyYW5zbGF0b3IuaGFuZGxlQ29tbWFuZChtZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICBfb25FbmQoKTogdm9pZCB7XG4gICAgdGhpcy5fc2V0U3RhdGUoQ0xPU0VEKTtcbiAgfVxuXG4gIF9zZXRTdGF0ZShuZXdTdGF0ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgbG9nKCdzdGF0ZSBjaGFuZ2UgZnJvbSAnICsgdGhpcy5fc3RhdGUgKyAnIHRvICcgKyBuZXdTdGF0ZSk7XG4gICAgLy8gVE9ETzogQ29uc2lkZXIgbG9nZ2luZyBzb2NrZXQgaW5mbzogcmVtb3RlIGlwLCBldGMuXG4gICAgdGhpcy5fc3RhdGUgPSBuZXdTdGF0ZTtcblxuICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gQ0xPU0VEKSB7XG4gICAgICB0aGlzLmRpc3Bvc2UoKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBkaXNwb3NlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGxvZ0luZm8oJ1Byb3h5OiBFbmRpbmcgc2Vzc2lvbicpO1xuICAgIHRoaXMuX2NsaWVudENhbGxiYWNrLmRpc3Bvc2UoKTtcbiAgICBpZiAodGhpcy5fdHJhbnNsYXRvcikge1xuICAgICAgdGhpcy5fdHJhbnNsYXRvci5kaXNwb3NlKCk7XG4gICAgICB0aGlzLl90cmFuc2xhdG9yID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
