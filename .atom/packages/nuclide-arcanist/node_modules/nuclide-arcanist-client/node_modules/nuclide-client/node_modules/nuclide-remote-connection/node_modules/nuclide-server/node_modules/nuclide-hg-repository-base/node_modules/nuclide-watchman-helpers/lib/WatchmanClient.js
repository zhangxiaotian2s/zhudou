Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _WatchmanSubscription = require('./WatchmanSubscription');

var _WatchmanSubscription2 = _interopRequireDefault(_WatchmanSubscription);

'use babel';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var watchman = require('fb-watchman');

var isEmpty = require('nuclide-commons').object.isEmpty;

var logger = require('nuclide-logging').getLogger();

var _require = require('./main');

var getWatchmanBinaryPath = _require.getWatchmanBinaryPath;

var path = require('path');

var WatchmanClient = (function () {
  function WatchmanClient() {
    _classCallCheck(this, WatchmanClient);

    this._initWatchmanClient();
    this._subscriptions = Object.create(null);
    this._watchmanVersionPromise = this.version();
  }

  _createClass(WatchmanClient, [{
    key: 'dispose',
    value: function dispose() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        if (_this._clientPromise) {
          _this._clientPromise.then(function (client) {
            client.once('end', function () {
              resolve();
            });
            client.end();
          });
        } else {
          reject();
        }
      });
    }
  }, {
    key: '_initWatchmanClient',
    value: function _initWatchmanClient() {
      var _this2 = this;

      this._clientPromise = this._createClientPromise();
      this._clientPromise.then(function (client) {
        client.on('end', function () {
          return _this2._onClientEnd();
        });
        client.on('error', function (error) {
          return logger.error('Error while talking to watchman: ', error);
        });
        client.on('subscription', function (response) {
          return _this2._onSubscriptionResult(response);
        });
      });
    }
  }, {
    key: '_createClientPromise',
    value: _asyncToGenerator(function* () {
      return new watchman.Client({
        watchmanBinaryPath: yield getWatchmanBinaryPath()
      });
    })
  }, {
    key: '_onClientEnd',
    value: function _onClientEnd() {
      logger.warn('Watchman client ended, creating a new client!');
      this._clientPromise.then(function (client) {
        client.removeAllListeners('end');
        client.removeAllListeners('error');
        client.removeAllListeners('subscription');
      });
      this._initWatchmanClient();
      this._restoreSubscriptions();
    }
  }, {
    key: '_restoreSubscriptions',
    value: _asyncToGenerator(function* () {
      var _this3 = this;

      var watchSubscriptions = [];
      for (var _key in this._subscriptions) {
        watchSubscriptions.push(this._subscriptions[_key]);
      }
      yield Promise.all(watchSubscriptions.map(_asyncToGenerator(function* (subscription) {
        subscription.options.since = yield _this3._clock(subscription.root);
        yield _this3._watchProject(subscription.path);
        yield _this3._subscribe(subscription.root, subscription.name, subscription.options);
      })));
    })
  }, {
    key: '_getSubscription',
    value: function _getSubscription(entryPath) {
      return this._subscriptions[path.normalize(entryPath)];
    }
  }, {
    key: '_setSubscription',
    value: function _setSubscription(entryPath, subscription) {
      this._subscriptions[path.normalize(entryPath)] = subscription;
      return subscription;
    }
  }, {
    key: '_deleteSubscription',
    value: function _deleteSubscription(entryPath) {
      delete this._subscriptions[path.normalize(entryPath)];
    }
  }, {
    key: '_onSubscriptionResult',
    value: function _onSubscriptionResult(response) {
      var subscription = this._getSubscription(response.subscription);
      if (!subscription) {
        return logger.error('Subscription not found for response:!', response);
      }
      subscription.emit('change', response.files);
    }
  }, {
    key: 'watchDirectoryRecursive',
    value: _asyncToGenerator(function* (localDirectoryPath) {
      var existingSubscription = this._getSubscription(localDirectoryPath);
      if (existingSubscription) {
        existingSubscription.subscriptionCount++;
        return existingSubscription;
      } else {
        var _ref = yield this._watchProject(localDirectoryPath);

        var watchRoot = _ref.watch;
        var relativePath = _ref.relative_path;

        var clock = yield this._clock(watchRoot);
        var options = {
          fields: ['name', 'new', 'exists', 'mode'],
          since: clock
        };
        if (relativePath) {
          // Passing an 'undefined' expression causes an exception in fb-watchman.
          options.expression = ['dirname', relativePath];
        }
        // relativePath is undefined if watchRoot is the same as directoryPath.
        var _subscription = this._setSubscription(localDirectoryPath, new _WatchmanSubscription2['default'](
        /*subscriptionRoot*/watchRoot,
        /*pathFromSubscriptionRootToSubscriptionPath*/relativePath,
        /*subscriptionPath*/localDirectoryPath,
        /*subscriptionCount*/1,
        /*subscriptionOptions*/options));
        yield this._subscribe(watchRoot, localDirectoryPath, options);
        return _subscription;
      }
    })
  }, {
    key: 'hasSubscription',
    value: function hasSubscription(entryPath) {
      return !!this._getSubscription(entryPath);
    }
  }, {
    key: 'unwatch',
    value: _asyncToGenerator(function* (entryPath) {
      var subscription = this._getSubscription(entryPath);

      if (!subscription) {
        return logger.error('No watcher entity found with path:', entryPath);
      }

      if (--subscription.subscriptionCount === 0) {

        yield this._unsubscribe(subscription.path, subscription.name);
        // Don't delete the watcher if there are other users for it.
        if (!subscription.pathFromSubscriptionRootToSubscriptionPath) {
          yield this._deleteWatcher(entryPath);
        }
        this._deleteSubscription(entryPath);

        if (isEmpty(this._subscriptions)) {
          yield this.dispose();
        }
      }
    })
  }, {
    key: '_watchList',
    value: _asyncToGenerator(function* () {
      var _ref2 = yield this._command('watch-list');

      var roots = _ref2.roots;

      return roots;
    })
  }, {
    key: '_deleteWatcher',
    value: function _deleteWatcher(entryPath) {
      return this._command('watch-del', entryPath);
    }
  }, {
    key: '_unsubscribe',
    value: function _unsubscribe(subscriptionPath, subscriptionName) {
      return this._command('unsubscribe', subscriptionPath, subscriptionName);
    }
  }, {
    key: '_watch',
    value: _asyncToGenerator(function* (directoryPath) {
      var response = yield this._command('watch', directoryPath);
      if (response.warning) {
        logger.warn('watchman warning: ', response.warning);
      }
    })
  }, {
    key: '_watchProject',
    value: _asyncToGenerator(function* (directoryPath) {
      var watchmanVersion = yield this._watchmanVersionPromise;
      if (!watchmanVersion || watchmanVersion < '3.1.0') {
        throw new Error('Watchman version: ' + watchmanVersion + ' does not support watch-project');
      }
      var response = yield this._command('watch-project', directoryPath);
      if (response.warning) {
        logger.warn('watchman warning: ', response.warning);
      }
      return response;
    })
  }, {
    key: '_clock',
    value: _asyncToGenerator(function* (directoryPath) {
      var _ref3 = yield this._command('clock', directoryPath);

      var clock = _ref3.clock;

      return clock;
    })
  }, {
    key: 'version',
    value: _asyncToGenerator(function* () {
      var _ref4 = yield this._command('version');

      var version = _ref4.version;

      return version;
    })
  }, {
    key: '_subscribe',
    value: function _subscribe(watchRoot, subscriptionName, options) {
      return this._command('subscribe', watchRoot, subscriptionName, options);
    }

    /*
     * Promisify calls to watchman client.
     */
  }, {
    key: '_command',
    value: function _command() {
      var _this4 = this;

      for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return new Promise(function (resolve, reject) {
        _this4._clientPromise.then(function (client) {
          client.command(args, function (error, response) {
            return error ? reject(error) : resolve(response);
          });
        })['catch'](reject);
      });
    }
  }]);

  return WatchmanClient;
})();

module.exports = WatchmanClient;
//# sourceMappingURL=data:application/json;base64,
