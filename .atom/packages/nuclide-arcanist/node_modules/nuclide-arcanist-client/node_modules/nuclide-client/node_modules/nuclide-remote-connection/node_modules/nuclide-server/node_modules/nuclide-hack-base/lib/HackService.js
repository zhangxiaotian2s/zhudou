Object.defineProperty(exports, '__esModule', {
  value: true
});

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var getDiagnostics = _asyncToGenerator(function* (file, currentContents) {
  var hhResult = yield _nuclideCommons.promises.retryLimit(function () {
    return (0, _HackHelpers.callHHClient)(
    /*args*/[],
    /*errorStream*/true,
    /*outputJson*/true,
    /*processInput*/null,
    /*file*/file);
  }, function (result) {
    return result != null;
  }, HH_CLIENT_MAX_TRIES, HH_DIAGNOSTICS_DELAY_MS);
  if (!hhResult) {
    return null;
  }
  var hackRoot = hhResult.hackRoot;
  var result = hhResult.result;

  var messages = result.errors;

  // Use a consistent null 'falsy' value for the empty string, undefined, etc.
  messages.forEach(function (error) {
    error.message.forEach(function (component) {
      component.path = component.path || null;
    });
  });

  return {
    hackRoot: hackRoot,
    messages: messages
  };
});

exports.getDiagnostics = getDiagnostics;

var getCompletions = _asyncToGenerator(function* (file, markedContents) {
  var hhResult = yield (0, _HackHelpers.callHHClient)(
  /*args*/['--auto-complete'],
  /*errorStream*/false,
  /*outputJson*/true,
  /*processInput*/markedContents,
  /*file*/file);
  if (!hhResult) {
    return null;
  }
  var hackRoot = hhResult.hackRoot;
  var result = hhResult.result;

  var completions = result;
  return {
    hackRoot: hackRoot,
    completions: completions
  };
}

/**
 * Gets the hh_client definition of the query with a given symbol type.
 */
);

exports.getCompletions = getCompletions;

var getDefinition = _asyncToGenerator(function* (file, query, symbolType) {
  var searchTypes = (0, _HackHelpers.symbolTypeToSearchTypes)(symbolType);
  var searchResponse = yield (0, _HackHelpers.getSearchResults)(file, query, searchTypes);
  return selectDefinitionSearchResults(searchResponse, query);
});

exports.getDefinition = getDefinition;

var getIdentifierDefinition = _asyncToGenerator(function* (file, contents, line, column) {
  var hhResult = yield (0, _HackHelpers.callHHClient)(
  // The `indetify-function` result is text, but passing --json option
  // will eliminate any hh status messages that's irrelevant.
  /*args*/['--json', '--identify-function', line + ':' + column],
  /*errorStream*/false,
  /*outputJson*/false,
  /*processInput*/contents,
  /*cwd*/file);
  if (!hhResult) {
    return null;
  }
  var identifier = (hhResult.result || '').trim();
  if (!identifier) {
    return null;
  }
  var searchResponse = yield (0, _HackHelpers.getSearchResults)(file, identifier);
  return selectDefinitionSearchResults(searchResponse, identifier);
}

/**
 * Fetches the dependencies needed by the hack worker to cache
 * for faster hack features response times.
 * Returns a map of file paths to file contents.
 */
);

exports.getIdentifierDefinition = getIdentifierDefinition;

var getDependencies = _asyncToGenerator(function* (filePath, dependenciesInfo) {
  var dependencies = new Map();
  var dependencyPaths = new Set();
  var hackRoot = '';
  // hh_server currently is single threaded and processes one request at a time.
  // Hence, we fetch the dependencies one-by-one, without Promise.all for the hack search
  // to unblock user-requested hack language features and failry treat other usages of hh_client.
  /* eslint-disable babel/no-await-in-loop */

  var _loop = function* (dependency) {
    var dependencyName = dependency.name;
    var dependencyType = dependency.type;

    if (dependencyName.startsWith('\\')) {
      dependencyName = dependencyName.substring(1);
    }
    var filter = undefined;
    if (dependencyType === 'class') {
      filter = [_nuclideHackCommonLibConstants.SearchResultType.CLASS, _nuclideHackCommonLibConstants.SearchResultType.ABSTRACT_CLASS, _nuclideHackCommonLibConstants.SearchResultType.TRAIT, _nuclideHackCommonLibConstants.SearchResultType.TYPEDEF, _nuclideHackCommonLibConstants.SearchResultType.INTERFACE];
    } else {
      filter = [_nuclideHackCommonLibConstants.SearchResultType.FUNCTION];
    }

    var searchResponse = yield (0, _HackHelpers.getSearchResults)(filePath, dependencyName, filter);
    if (searchResponse == null) {
      return 'continue';
    }
    (0, _assert2['default'])(searchResponse);
    var searchResults = searchResponse.result;

    hackRoot = searchResponse.hackRoot;
    yield Promise.all(searchResults.map(_asyncToGenerator(function* (location) {
      var name = location.name;
      var path = location.path;

      if (name !== dependencyName || dependencyPaths.has(path)) {
        return;
      }
      dependencyPaths.add(path);
      var contents = yield _nuclideCommons.fsPromise.readFile(path, 'utf8');
      if (!contents.startsWith('<?hh')) {
        return;
      }
      // This turns anything we're adding into decl mode, so that it uses less memory.
      // Ideally, hh_server should do this, and strip the method/function bodies.
      if (contents.startsWith(HH_NEWLINE)) {
        contents = '<?hh // decl\n' + contents.substring(HH_NEWLINE.length);
      } else if (contents.startsWith(HH_STRICT_NEWLINE)) {
        contents = '<?hh // decl\n' + contents.substring(HH_STRICT_NEWLINE.length);
      }
      dependencies.set(path, contents);
    })));
  };

  for (var dependency of dependenciesInfo) {
    var _ret = yield* _loop(dependency);

    if (_ret === 'continue') continue;
  }
  /* eslint-enable babel/no-await-in-loop */
  return {
    hackRoot: hackRoot,
    dependencies: dependencies
  };
});

exports.getDependencies = getDependencies;

var getReferences = _asyncToGenerator(function* (filePath, symbolName, symbolType) {
  var cmd = '--find-refs';
  if (symbolType === _nuclideHackCommonLibConstants.SymbolType.CLASS) {
    cmd = '--find-class-refs';
  }
  var hhResult = yield (0, _HackHelpers.callHHClient)(
  /*args*/[cmd, symbolName],
  /*errorStream*/false,
  /*outputJson*/true,
  /*processInput*/null,
  /*file*/filePath);
  if (!hhResult) {
    return null;
  }
  var hackRoot = hhResult.hackRoot;
  var result = hhResult.result;

  var references = result;
  return {
    hackRoot: hackRoot,
    references: references
  };
});

exports.getReferences = getReferences;
exports.getHackEnvironmentDetails = getHackEnvironmentDetails;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _nuclideCommons = require('nuclide-commons');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _nuclideHackCommonLibConstants = require('nuclide-hack-common/lib/constants');

var _HackHelpers = require('./HackHelpers');

'use babel';

var HH_NEWLINE = '<?hh\n';
var HH_STRICT_NEWLINE = '<?hh // strict\n';
var HH_DIAGNOSTICS_DELAY_MS = 600;
var HH_CLIENT_MAX_TRIES = 10;

function getHackEnvironmentDetails(localFile) {
  return (0, _HackHelpers.getHackExecOptions)(localFile);
}

function selectDefinitionSearchResults(searchReposnse, query) {
  if (!searchReposnse) {
    return null;
  }
  var searchResults = searchReposnse.result;
  var hackRoot = searchReposnse.hackRoot;

  var matchingResults = searchResults.filter(function (result) {
    // If the request had a :: in it, it's a full name, so we should compare to
    // the name of the result in that format.
    var fullName = result.name;
    if (query.indexOf('::') !== -1 && result.scope) {
      fullName = result.scope + '::' + fullName;
    }
    return fullName === query;
  });
  return {
    hackRoot: hackRoot,
    definitions: matchingResults
  };
}
//# sourceMappingURL=data:application/json;base64,
