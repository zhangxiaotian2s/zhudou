Object.defineProperty(exports, '__esModule', {
  value: true
});

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

exports.watchFile = watchFile;
exports.watchDirectory = watchDirectory;

var getRealPath = _asyncToGenerator(function* (entityPath) {
  var exists = yield _nuclideCommons.fsPromise.exists(entityPath);
  if (!exists) {
    // Atom watcher behavior compatability.
    throw new Error('Can\'t watch a non-existing entity: ' + entityPath);
  }
  return yield _nuclideCommons.fsPromise.realpath(entityPath);
});

var unwatchEntity = _asyncToGenerator(function* (watchedEntities, realPath) {
  var watchEntry = watchedEntities.get(realPath);
  if (watchEntry && --watchEntry.subscriptionCount === 0) {
    watchedEntities['delete'](realPath);
  }
});

exports.watchDirectoryRecursive = watchDirectoryRecursive;

var unwatchDirectoryRecursive = _asyncToGenerator(function* (directoryPath) {
  yield getWatchmanClient().unwatch(directoryPath);
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _rx = require('rx');

var _events = require('events');

var _nuclideCommons = require('nuclide-commons');

var _nuclideWatchmanHelpers = require('nuclide-watchman-helpers');

'use babel';

var watchedFiles = new Map();
var watchedDirectories = new Map();

var CHANGE_EVENT_NAME = 'change';
var DELETE_EVENT_NAME = 'delete';

var watchmanClient = null;
function getWatchmanClient() {
  if (watchmanClient == null) {
    watchmanClient = new _nuclideWatchmanHelpers.WatchmanClient();
  }
  return watchmanClient;
}

function watchFile(filePath) {
  return watchEntity(watchedFiles, filePath, [CHANGE_EVENT_NAME, DELETE_EVENT_NAME]);
}

function watchDirectory(directoryPath) {
  return watchEntity(watchedDirectories, directoryPath, [CHANGE_EVENT_NAME]);
}

function watchEntity(watchedEntities, entityPath, watchEvents) {
  return _rx.Observable.fromPromise(getRealPath(entityPath)).flatMap(function (realPath) {
    if (!watchedEntities.has(realPath)) {
      watchedEntities.set(realPath, {
        eventEmitter: new _events.EventEmitter(),
        subscriptionCount: 0
      });
    }
    var watchEntry = watchedEntities.get(realPath);
    watchEntry.subscriptionCount++;

    var eventEmitter = watchEntry.eventEmitter;

    var watcherObservable = _rx.Observable.merge(watchEvents.map(function (watchEvent) {
      return _rx.Observable.fromEvent(eventEmitter, watchEvent, function () {
        return { path: entityPath, type: watchEvent };
      });
    }));

    watcherObservable.subscribeOnCompleted(function () {
      unwatchEntity(watchedEntities, realPath);
    });

    return watcherObservable;
  });
}

function watchDirectoryRecursive(directoryPath) {
  var client = getWatchmanClient();
  if (client.hasSubscription(directoryPath)) {
    return _rx.Observable.of('EXISTING');
  }
  return _rx.Observable.fromPromise(client.watchDirectoryRecursive(directoryPath)).flatMap(function (watcher) {

    // Listen for watcher changes to route them to watched files and directories.
    watcher.on('change', function (entries) {
      onWatcherChange(watcher, entries);
    });

    return _rx.Observable.create(function (observer) {
      // Notify success watcher setup.
      observer.onNext('SUCCESS');

      return function () {
        return unwatchDirectoryRecursive(directoryPath);
      };
    });
  });
}

function onWatcherChange(subscription, entries) {
  var directoryChanges = new Map();
  for (var entry of entries) {
    var entryPath = _path2['default'].join(subscription.root, entry.name);
    if (watchedFiles.has(entryPath)) {
      var _watchedFiles$get = watchedFiles.get(entryPath);

      var _eventEmitter = _watchedFiles$get.eventEmitter;

      // TODO(most): handle `rename`, if needed.
      if (!entry.exists) {
        _eventEmitter.emit(DELETE_EVENT_NAME);
      } else {
        _eventEmitter.emit(CHANGE_EVENT_NAME);
      }
    }
    // A file watch event can also be considered a directry change
    // for the parent directory if a file was created or deleted.
    if (entry['new'] || !entry.exists) {
      var entryDirectoryPath = _path2['default'].dirname(entryPath);
      if (watchedDirectories.has(entryDirectoryPath)) {
        if (!directoryChanges.has(entryDirectoryPath)) {
          directoryChanges.set(entryDirectoryPath, []);
        }
        directoryChanges.get(entryDirectoryPath).push(entry);
      }
    }
  }

  for (var _ref3 of directoryChanges) {
    var _ref2 = _slicedToArray(_ref3, 2);

    var watchedDirectoryPath = _ref2[0];
    var changes = _ref2[1];

    var _watchedDirectories$get = watchedDirectories.get(watchedDirectoryPath);

    var _eventEmitter2 = _watchedDirectories$get.eventEmitter;

    _eventEmitter2.emit(CHANGE_EVENT_NAME, changes);
  }
}
//# sourceMappingURL=data:application/json;base64,
