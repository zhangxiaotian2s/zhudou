/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

export type SingleHackMessage = {
  path: ?NuclideUri;
  descr: string;
  code: number;
  line: number;
  start: number;
  end: number;
};

export type HackDiagnostic = Array<SingleHackMessage>;

export type HackDiagnosticsResult = {
  hackRoot: NuclideUri;
  messages: Array<{
    message: HackDiagnostic;
  }>;
};

export type HackFunctionDetails = {
  params: Array<{name: string}>;
};

export type HackCompletion = {
  name: string;
  type: string;
  pos: {
    filename: NuclideUri,
    line: number;
    char_start: number;
    char_end: number;
  };
  func_details: ?HackFunctionDetails;
};

export type HackCompletionsResult = {
  hackRoot: NuclideUri;
  completions: Array<HackCompletion>;
};

export type HackSearchPosition = {
  path: NuclideUri;
  line: number;
  column: number;
  name: string;
  length: number;
  scope: string;
  additionalInfo: string;
};

export type HackDefinitionResult = {
  hackRoot: NuclideUri;
  definitions: Array<HackSearchPosition>;
};

export type HackReference = {
  name: string;
  filename: NuclideUri;
  line: number;
  char_start: number;
  char_end: number;
};

export type HackReferencesResult = {
  hackRoot: NuclideUri;
  references: Array<HackReference>;
};

export async function getDiagnostics(
  file: NuclideUri,
  currentContents?: string,
): Promise<?HackDiagnosticsResult> {}

export async function getCompletions(
  file: NuclideUri,
  markedContents: string
): Promise<?HackCompletionsResult> {}

/**
 * Fetches the dependencies needed by the hack worker to cache for faster hack features response times.
 * Returns a map of file paths to file contents.
 */
export async function getDependencies(
  filePath: NuclideUri,
  dependenciesInfo: Array<{name: string; type: string}>,
): Promise<?{
  hackRoot: NuclideUri;
  dependencies: Map<string, string>;
}> {}

/**
 * Gets the hh_client definition of the query with a given symbol type.
 */
export async function getDefinition(
  file: NuclideUri,
  query: string,
  symbolType: number,
): Promise<?HackDefinitionResult> {}

export async function getIdentifierDefinition(
  file: NuclideUri,
  contents: string,
  line: number,
  column: number,
): Promise<?HackDefinitionResult> {}

export async function getReferences(
  filePath: NuclideUri,
  symbolName: string,
  symbolType?: number,
): Promise<?HackReferencesResult> {}

export function getHackEnvironmentDetails(
  filePath: NuclideUri,
): Promise<?{hackRoot: NuclideUri, hackCommand: string}> {}
