Object.defineProperty(exports, '__esModule', {
  value: true
});

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _QueryItem = require('./QueryItem');

var _QueryItem2 = _interopRequireDefault(_QueryItem);

var _PathSet = require('./PathSet');

var _PathSet2 = _interopRequireDefault(_PathSet);

var _TopScores = require('./TopScores');

var _TopScores2 = _interopRequireDefault(_TopScores);

'use babel';

var PATH_SEARCH_TIMEOUT_MS = 60 * 1000;
var MAX_RESULTS_COUNT = 50;

/**
 * Manages multiple simultaneous queries against a PathSet. The PathSearch is
 * responsible for deciding which queries to cancel based on newer queries.
 */

var PathSearch = (function () {

  /**
   * @param pathSet that keeps itself in sync with whatever directory it
   *     represents.
   */

  function PathSearch(pathSet) {
    _classCallCheck(this, PathSearch);

    this._pathSet = pathSet;
    this._activeQueries = {};
    this._queryItemForPath = {}; // It might be more efficient to store this in PathSet.
  }

  _createClass(PathSearch, [{
    key: '_doFuzzyFilenameSearch',
    value: function _doFuzzyFilenameSearch(query, topScores) {
      var _this = this;

      var processor = function processor(path) {
        var queryItem = _this._queryItemForPath[path];
        if (!queryItem) {
          queryItem = new _QueryItem2['default'](path);
          // Currently, nothing is ever removed from _queryItemForPath. It's
          // unclear if the additional complexity in bookkeeping effort would
          // merit the memory savings.
          _this._queryItemForPath[path] = queryItem;
        }
        var alphanumericQuery = query.replace(/[^a-z0-9/]/g, '');
        var scoredItem = queryItem.score(alphanumericQuery);
        if (scoredItem != null) {
          topScores.insert(scoredItem);
        }
      };
      return this._pathSet.submit(processor);
    }

    // `query` is assumed to be a lower-case string.
  }, {
    key: '_doPathSearch',
    value: function _doPathSearch(query, topScores) {
      var _this2 = this;

      var processor = function processor(path) {
        if (topScores.getSize() < MAX_RESULTS_COUNT && path.toLowerCase().indexOf(query) !== -1) {
          topScores.insert({
            matchIndexes: [],
            score: 0,
            value: path
          });
        }
      };
      var pathSetJob = this._pathSet.submit(processor);
      var nextJob = pathSetJob.then(function () {
        if (topScores.getSize() === 0 && query.indexOf('/') !== -1) {
          return _this2._doPathSearch(query.substring(query.indexOf('/') + 1), topScores);
        }
        return pathSetJob;
      });
      // The cancelJob expando property needs to be forwarded manually.
      // This is also the reason we cannot use `await` in this logic, since it's not possible to pass
      // cancelJob to the resulting auto-boxed Promise.
      // $FlowFixMe: Remove the cancelJob expando off the promise.
      nextJob.cancelJob = pathSetJob.cancelJob;
      return nextJob;
    }

    /**
     * @param query Is expected to be what the user has typed in a path-matching
     *     typeahead UI.
     * @return Promise that resolves to an empty ResultSet if it is canceled.
     */
  }, {
    key: 'doQuery',
    value: function doQuery(query) {
      var _this3 = this;

      query = query.toLowerCase();
      if (query.length === 0) {
        return Promise.resolve({ query: '', results: [] });
      }

      // See if a request for this query is already in flight.
      var activeQuery = this._activeQueries[query];
      if (activeQuery) {
        return activeQuery;
      }

      // If any of the existing queries are a prefix of this new query, cancel
      // them. Here, we are assuming this is used to power a typeahead, so the
      // results of the old queries will no longer be of interest.
      var keysToRemove = [];
      for (var _key in this._activeQueries) {
        if (query.startsWith(_key)) {
          keysToRemove.push(_key);
        }
      }

      // Because cancelJob() will call removePromise(), which will modify
      // this._activeQueries, we cannot call cancelJob() while iterating
      // this._activeQueries in the for/in loop above because that could interfere
      // with the iteration.
      if (keysToRemove.length) {
        // $FlowFixMe: Remove the cancelJob expando off the promise.
        keysToRemove.forEach(function (key) {
          return _this3._activeQueries[key].cancelJob();
        });
      }

      var topScores = new _TopScores2['default']( /* capacity */MAX_RESULTS_COUNT);

      // If there is a slash in the query, we assume we're searching paths instead of filenames
      // and therefore we won't remove special characters, and won't use the fuzzy search logic
      var shouldSearchPaths = query.indexOf('/') !== -1;
      var promise = shouldSearchPaths ? this._doPathSearch(query, topScores) : this._doFuzzyFilenameSearch(query, topScores);

      var promiseForQuery = undefined;
      var removePromise = function removePromise() {
        var entry = _this3._activeQueries[query];
        // Remove the entry only if it has not been replaced by a more recent one.
        if (entry === promiseForQuery) {
          delete _this3._activeQueries[query];
        }
      };

      promiseForQuery = promise.then(function () {
        var results = topScores.getTopScores();
        // Do the deletion in a timeout in case the user types backspace,
        // effectively asking for the previous results again.
        setTimeout(removePromise, PATH_SEARCH_TIMEOUT_MS);
        var result = { query: query, results: results };
        return result;
      }, function (error) {
        removePromise();
        if (error.errorCode === _PathSet2['default'].ERROR_CODE_CANCELED) {
          // This request was canceled: resolve to an empty ResultSet.
          return {
            query: query,
            results: []
          };
        } else {
          throw error;
        }
      });
      // $FlowFixMe: Remove the cancelJob expando off the promise.
      promiseForQuery.cancelJob = promise.cancelJob;
      this._activeQueries[query] = promiseForQuery;
      return promiseForQuery;
    }
  }]);

  return PathSearch;
})();

exports['default'] = PathSearch;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,
