Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _nuclideCommons = require('nuclide-commons');

var _atom = require('atom');

'use babel';

var NEW_ITEM_EVENT = 'NEW_ITEM_EVENT';

var ServiceLogger = (function () {
  function ServiceLogger() {
    _classCallCheck(this, ServiceLogger);

    // $FlowIssue Flow does not understand a getter that returns a constructor function.
    this._buffer = new _nuclideCommons.CircularBuffer(10000);
    this._emitter = new _atom.Emitter();
  }

  /**
   * THIS IS A HACK.
   *
   * Takes the info for a service call and returns a string description of the relevant arguments.
   *
   * For now, we centralize some logic about how particular service calls should be formatted for
   * display in log messages and the Nuclide Service Monitor. Rather than annotate which arguments
   * in a service call should be included in the serialized version of the args (that are used for
   * debugging), we take a shortcut and just hardcode the logic for each service call of interest,
   * for now. It's not smart to choose a naive heuristic like "log all string arguments" because
   * services such as Flow take the unsaved file contents as an argument, which would clutter our
   * logs.
   */

  _createClass(ServiceLogger, [{
    key: 'logServiceCall',
    value: function logServiceCall(service, method, isLocal) {
      for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        args[_key - 3] = arguments[_key];
      }

      var item = {
        date: new Date(),
        service: service,
        method: method,
        isLocal: isLocal,
        args: args,
        argInfo: createArgInfo(service, method, args)
      };
      // $FlowIssue
      this._buffer.push(item);
      this._emitter.emit(NEW_ITEM_EVENT, item);
    }

    // $FlowIssue: t6187050
  }, {
    key: Symbol.iterator,
    value: function value() {
      return this._buffer[Symbol.iterator]();
    }
  }, {
    key: 'onNewItem',
    value: function onNewItem(callback) {
      return this._emitter.on(NEW_ITEM_EVENT, callback);
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this._emitter.dispose();
    }
  }]);

  return ServiceLogger;
})();

exports['default'] = ServiceLogger;
function createArgInfo(service, method, args) {
  if (service === 'ArcanistBaseService') {
    // All Arcanist services take a file.
    return (/* fileName */args[0]
    );
  } else if (service === 'BuckUtils') {
    if (method === 'getBuckProjectRoot') {
      return (/* fileName */args[0]
      );
    }
  } else if (service === 'FlowService') {
    if (method === 'findDefinition') {
      return (/* fileName */args[0]
      );
    } else if (method === 'findDiagnostics') {
      return (/* fileName */args[0]
      );
    } else if (method === 'getType') {
      return (/* fileName */args[0]
      );
    } else if (method === 'getAutocompleteSuggestions') {
      return (/* fileName */args[0]
      );
    }
  } else if (service === 'HgService') {
    if (method === 'fetchDiffInfo') {
      return (/* fileName */args[0]
      );
    } else if (method === 'fetchStatuses') {
      var filePaths = args[0];
      return filePaths.join(';');
    }
  }
  return null;
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXJlbW90ZS1jb25uZWN0aW9uL2xpYi9TZXJ2aWNlTG9nZ2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OEJBVTZCLGlCQUFpQjs7b0JBQ3hCLE1BQU07O0FBWDVCLFdBQVcsQ0FBQzs7QUFzQlosSUFBTSxjQUFjLEdBQUcsZ0JBQWdCLENBQUM7O0lBRW5CLGFBQWE7QUFJckIsV0FKUSxhQUFhLEdBSWxCOzBCQUpLLGFBQWE7OztBQU05QixRQUFJLENBQUMsT0FBTyxHQUFHLG9CQXBCWCxjQUFjLENBb0JnQixLQUFLLENBQUMsQ0FBQztBQUN6QyxRQUFJLENBQUMsUUFBUSxHQUFHLFVBcEJaLE9BQU8sRUFvQmtCLENBQUM7R0FDL0I7Ozs7Ozs7Ozs7Ozs7Ozs7ZUFSa0IsYUFBYTs7V0FVbEIsd0JBQ1osT0FBZSxFQUNmLE1BQWMsRUFDZCxPQUFnQixFQUVWO3dDQURILElBQUk7QUFBSixZQUFJOzs7QUFFUCxVQUFNLElBQVUsR0FBRztBQUNqQixZQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUU7QUFDaEIsZUFBTyxFQUFQLE9BQU87QUFDUCxjQUFNLEVBQU4sTUFBTTtBQUNOLGVBQU8sRUFBUCxPQUFPO0FBQ1AsWUFBSSxFQUFKLElBQUk7QUFDSixlQUFPLEVBQUUsYUFBYSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDO09BQzlDLENBQUM7O0FBRUYsVUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEIsVUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzFDOzs7O1NBR0EsTUFBTSxDQUFDLFFBQVE7V0FBQyxpQkFBbUI7QUFDbEMsYUFBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0tBQ3hDOzs7V0FFUSxtQkFBQyxRQUErQixFQUFtQjtBQUMxRCxhQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUNuRDs7O1dBRU0sbUJBQUc7QUFDUixVQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ3pCOzs7U0F4Q2tCLGFBQWE7OztxQkFBYixhQUFhO0FBd0RsQyxTQUFTLGFBQWEsQ0FBQyxPQUFlLEVBQUUsTUFBYyxFQUFFLElBQWtCLEVBQVc7QUFDbkYsTUFBSSxPQUFPLEtBQUsscUJBQXFCLEVBQUU7O0FBRXJDLDBCQUFzQixJQUFJLENBQUMsQ0FBQyxDQUFDO01BQUM7R0FDL0IsTUFBTSxJQUFJLE9BQU8sS0FBSyxXQUFXLEVBQUU7QUFDbEMsUUFBSSxNQUFNLEtBQUssb0JBQW9CLEVBQUU7QUFDbkMsNEJBQXNCLElBQUksQ0FBQyxDQUFDLENBQUM7UUFBQztLQUMvQjtHQUNGLE1BQU0sSUFBSSxPQUFPLEtBQUssYUFBYSxFQUFFO0FBQ3BDLFFBQUksTUFBTSxLQUFLLGdCQUFnQixFQUFFO0FBQy9CLDRCQUFzQixJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQUM7S0FDL0IsTUFBTSxJQUFJLE1BQU0sS0FBSyxpQkFBaUIsRUFBRTtBQUN2Qyw0QkFBc0IsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUFDO0tBQy9CLE1BQU0sSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO0FBQy9CLDRCQUFzQixJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQUM7S0FDL0IsTUFBTSxJQUFJLE1BQU0sS0FBSyw0QkFBNEIsRUFBRTtBQUNsRCw0QkFBc0IsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUFDO0tBQy9CO0dBQ0YsTUFBTSxJQUFJLE9BQU8sS0FBSyxXQUFXLEVBQUU7QUFDbEMsUUFBSSxNQUFNLEtBQUssZUFBZSxFQUFFO0FBQzlCLDRCQUFzQixJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQUM7S0FDL0IsTUFBTSxJQUFJLE1BQU0sS0FBSyxlQUFlLEVBQUU7QUFDckMsVUFBTSxTQUF3QixHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6QyxhQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDNUI7R0FDRjtBQUNELFNBQU8sSUFBSSxDQUFDO0NBQ2IiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtcmVtb3RlLWNvbm5lY3Rpb24vbGliL1NlcnZpY2VMb2dnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHtDaXJjdWxhckJ1ZmZlcn0gZnJvbSAnbnVjbGlkZS1jb21tb25zJztcbmltcG9ydCB7RW1pdHRlcn0gZnJvbSAnYXRvbSc7XG5cbmV4cG9ydCB0eXBlIEl0ZW0gPSB7XG4gIGRhdGU6IERhdGUsXG4gIHNlcnZpY2U6IHN0cmluZyxcbiAgbWV0aG9kOiBzdHJpbmcsXG4gIGlzTG9jYWw6IGJvb2xlYW4sXG4gIGFyZ3M6IEFycmF5PG1peGVkPixcbiAgYXJnSW5mbzogP3N0cmluZyxcbn1cblxuY29uc3QgTkVXX0lURU1fRVZFTlQgPSAnTkVXX0lURU1fRVZFTlQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXJ2aWNlTG9nZ2VyIHtcbiAgX2J1ZmZlcjogQ2lyY3VsYXJCdWZmZXI8SXRlbT47XG4gIF9lbWl0dGVyOiBFbWl0dGVyO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vICRGbG93SXNzdWUgRmxvdyBkb2VzIG5vdCB1bmRlcnN0YW5kIGEgZ2V0dGVyIHRoYXQgcmV0dXJucyBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBDaXJjdWxhckJ1ZmZlcigxMDAwMCk7XG4gICAgdGhpcy5fZW1pdHRlciA9IG5ldyBFbWl0dGVyKCk7XG4gIH1cblxuICBsb2dTZXJ2aWNlQ2FsbChcbiAgICBzZXJ2aWNlOiBzdHJpbmcsXG4gICAgbWV0aG9kOiBzdHJpbmcsXG4gICAgaXNMb2NhbDogYm9vbGVhbixcbiAgICAuLi5hcmdzOiBBcnJheTxtaXhlZD5cbiAgKTogdm9pZCB7XG4gICAgY29uc3QgaXRlbTogSXRlbSA9IHtcbiAgICAgIGRhdGU6IG5ldyBEYXRlKCksXG4gICAgICBzZXJ2aWNlLFxuICAgICAgbWV0aG9kLFxuICAgICAgaXNMb2NhbCxcbiAgICAgIGFyZ3MsXG4gICAgICBhcmdJbmZvOiBjcmVhdGVBcmdJbmZvKHNlcnZpY2UsIG1ldGhvZCwgYXJncyksXG4gICAgfTtcbiAgICAvLyAkRmxvd0lzc3VlXG4gICAgdGhpcy5fYnVmZmVyLnB1c2goaXRlbSk7XG4gICAgdGhpcy5fZW1pdHRlci5lbWl0KE5FV19JVEVNX0VWRU5ULCBpdGVtKTtcbiAgfVxuXG4gIC8vICRGbG93SXNzdWU6IHQ2MTg3MDUwXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhdG9yPEl0ZW0+IHtcbiAgICByZXR1cm4gdGhpcy5fYnVmZmVyW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxuXG4gIG9uTmV3SXRlbShjYWxsYmFjazogKGl0ZW06IEl0ZW0pID0+IG1peGVkKTogYXRvbSREaXNwb3NhYmxlIHtcbiAgICByZXR1cm4gdGhpcy5fZW1pdHRlci5vbihORVdfSVRFTV9FVkVOVCwgY2FsbGJhY2spO1xuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLl9lbWl0dGVyLmRpc3Bvc2UoKTtcbiAgfVxufVxuXG4vKipcbiAqIFRISVMgSVMgQSBIQUNLLlxuICpcbiAqIFRha2VzIHRoZSBpbmZvIGZvciBhIHNlcnZpY2UgY2FsbCBhbmQgcmV0dXJucyBhIHN0cmluZyBkZXNjcmlwdGlvbiBvZiB0aGUgcmVsZXZhbnQgYXJndW1lbnRzLlxuICpcbiAqIEZvciBub3csIHdlIGNlbnRyYWxpemUgc29tZSBsb2dpYyBhYm91dCBob3cgcGFydGljdWxhciBzZXJ2aWNlIGNhbGxzIHNob3VsZCBiZSBmb3JtYXR0ZWQgZm9yXG4gKiBkaXNwbGF5IGluIGxvZyBtZXNzYWdlcyBhbmQgdGhlIE51Y2xpZGUgU2VydmljZSBNb25pdG9yLiBSYXRoZXIgdGhhbiBhbm5vdGF0ZSB3aGljaCBhcmd1bWVudHNcbiAqIGluIGEgc2VydmljZSBjYWxsIHNob3VsZCBiZSBpbmNsdWRlZCBpbiB0aGUgc2VyaWFsaXplZCB2ZXJzaW9uIG9mIHRoZSBhcmdzICh0aGF0IGFyZSB1c2VkIGZvclxuICogZGVidWdnaW5nKSwgd2UgdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IGhhcmRjb2RlIHRoZSBsb2dpYyBmb3IgZWFjaCBzZXJ2aWNlIGNhbGwgb2YgaW50ZXJlc3QsXG4gKiBmb3Igbm93LiBJdCdzIG5vdCBzbWFydCB0byBjaG9vc2UgYSBuYWl2ZSBoZXVyaXN0aWMgbGlrZSBcImxvZyBhbGwgc3RyaW5nIGFyZ3VtZW50c1wiIGJlY2F1c2VcbiAqIHNlcnZpY2VzIHN1Y2ggYXMgRmxvdyB0YWtlIHRoZSB1bnNhdmVkIGZpbGUgY29udGVudHMgYXMgYW4gYXJndW1lbnQsIHdoaWNoIHdvdWxkIGNsdXR0ZXIgb3VyXG4gKiBsb2dzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVBcmdJbmZvKHNlcnZpY2U6IHN0cmluZywgbWV0aG9kOiBzdHJpbmcsIGFyZ3M6IEFycmF5PG1peGVkPik6ID9zdHJpbmcge1xuICBpZiAoc2VydmljZSA9PT0gJ0FyY2FuaXN0QmFzZVNlcnZpY2UnKSB7XG4gICAgLy8gQWxsIEFyY2FuaXN0IHNlcnZpY2VzIHRha2UgYSBmaWxlLlxuICAgIHJldHVybiAvKiBmaWxlTmFtZSAqLyBhcmdzWzBdO1xuICB9IGVsc2UgaWYgKHNlcnZpY2UgPT09ICdCdWNrVXRpbHMnKSB7XG4gICAgaWYgKG1ldGhvZCA9PT0gJ2dldEJ1Y2tQcm9qZWN0Um9vdCcpIHtcbiAgICAgIHJldHVybiAvKiBmaWxlTmFtZSAqLyBhcmdzWzBdO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzZXJ2aWNlID09PSAnRmxvd1NlcnZpY2UnKSB7XG4gICAgaWYgKG1ldGhvZCA9PT0gJ2ZpbmREZWZpbml0aW9uJykge1xuICAgICAgcmV0dXJuIC8qIGZpbGVOYW1lICovIGFyZ3NbMF07XG4gICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdmaW5kRGlhZ25vc3RpY3MnKSB7XG4gICAgICByZXR1cm4gLyogZmlsZU5hbWUgKi8gYXJnc1swXTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ2dldFR5cGUnKSB7XG4gICAgICByZXR1cm4gLyogZmlsZU5hbWUgKi8gYXJnc1swXTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ2dldEF1dG9jb21wbGV0ZVN1Z2dlc3Rpb25zJykge1xuICAgICAgcmV0dXJuIC8qIGZpbGVOYW1lICovIGFyZ3NbMF07XG4gICAgfVxuICB9IGVsc2UgaWYgKHNlcnZpY2UgPT09ICdIZ1NlcnZpY2UnKSB7XG4gICAgaWYgKG1ldGhvZCA9PT0gJ2ZldGNoRGlmZkluZm8nKSB7XG4gICAgICByZXR1cm4gLyogZmlsZU5hbWUgKi8gYXJnc1swXTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ2ZldGNoU3RhdHVzZXMnKSB7XG4gICAgICBjb25zdCBmaWxlUGF0aHM6IEFycmF5PHN0cmluZz4gPSBhcmdzWzBdO1xuICAgICAgcmV0dXJuIGZpbGVQYXRocy5qb2luKCc7Jyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuIl19
