Object.defineProperty(exports, '__esModule', {
  value: true
});

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

exports.valueComparator = valueComparator;
exports.scoreComparator = scoreComparator;
exports.inverseScoreComparator = inverseScoreComparator;

/**
 * String comparator that lists the capitalized verson of a string before the lowercase version.
 *
 * Apparently String.prototype.localeCompare() is not i18n-aware in Node 0.10.x. There's a ton of
 * debate on this:
 *
 *   https://github.com/joyent/node/issues/6371
 *   https://github.com/joyent/node/issues/7676
 *
 * It appears the version of io.js bundled with Atom has proper i18n support, but it lists
 * lowercase strings before uppercase strings, so we also need this custom function in Atom.
 *
 * @return <0 if a should appear before b in a list; >0 if b should appear before a in a list
 */
'use babel';

function valueComparator(a, b) {
  var len = Math.min(a.length, b.length);
  for (var i = 0; i < len; i++) {
    var charA = a.charAt(i);
    var charB = b.charAt(i);
    if (charA === charB) {
      continue;
    }

    var aUpper = charA.toUpperCase();
    var bUpper = charB.toUpperCase();

    var caseInsensitiveCompare = aUpper.localeCompare(bUpper);
    if (caseInsensitiveCompare !== 0) {
      return caseInsensitiveCompare;
    }

    // If we have reached this point, charA and charB are different, but only one of them is
    // uppercase. The uppercase one should be returned first.
    return charA === aUpper ? -1 : 1;
  }

  return a.length - b.length;
}

/**
 * @return >0 if a is the greater QueryScore; <0 if b is the greater QueryScore.
 */

function scoreComparator(a, b) {
  var cmp = a.score - b.score;
  if (cmp !== 0) {
    return cmp;
  } else {
    return valueComparator(b.value, a.value);
  }
}

function inverseScoreComparator(a, b) {
  return scoreComparator(b, a);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXBhdGgtc2VhcmNoL2xpYi91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxXQUFXLENBQUM7O0FBMkJMLFNBQVMsZUFBZSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQVU7QUFDNUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN6QyxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzVCLFFBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsUUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixRQUFJLEtBQUssS0FBSyxLQUFLLEVBQUU7QUFDbkIsZUFBUztLQUNWOztBQUVELFFBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNuQyxRQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7O0FBRW5DLFFBQU0sc0JBQXNCLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1RCxRQUFJLHNCQUFzQixLQUFLLENBQUMsRUFBRTtBQUNoQyxhQUFPLHNCQUFzQixDQUFDO0tBQy9COzs7O0FBSUQsV0FBTyxLQUFLLEtBQUssTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUNsQzs7QUFFRCxTQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztDQUM1Qjs7Ozs7O0FBS00sU0FBUyxlQUFlLENBQUMsQ0FBYSxFQUFFLENBQWEsRUFBVTtBQUNwRSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDOUIsTUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFO0FBQ2IsV0FBTyxHQUFHLENBQUM7R0FDWixNQUFNO0FBQ0wsV0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDMUM7Q0FDRjs7QUFFTSxTQUFTLHNCQUFzQixDQUFDLENBQWEsRUFBRSxDQUFhLEVBQVU7QUFDM0UsU0FBTyxlQUFlLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQzlCIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXBhdGgtc2VhcmNoL2xpYi91dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB0eXBlIHtRdWVyeVNjb3JlfSBmcm9tICcuL1F1ZXJ5U2NvcmUnO1xuXG4vKipcbiAqIFN0cmluZyBjb21wYXJhdG9yIHRoYXQgbGlzdHMgdGhlIGNhcGl0YWxpemVkIHZlcnNvbiBvZiBhIHN0cmluZyBiZWZvcmUgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uLlxuICpcbiAqIEFwcGFyZW50bHkgU3RyaW5nLnByb3RvdHlwZS5sb2NhbGVDb21wYXJlKCkgaXMgbm90IGkxOG4tYXdhcmUgaW4gTm9kZSAwLjEwLnguIFRoZXJlJ3MgYSB0b24gb2ZcbiAqIGRlYmF0ZSBvbiB0aGlzOlxuICpcbiAqICAgaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy82MzcxXG4gKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvNzY3NlxuICpcbiAqIEl0IGFwcGVhcnMgdGhlIHZlcnNpb24gb2YgaW8uanMgYnVuZGxlZCB3aXRoIEF0b20gaGFzIHByb3BlciBpMThuIHN1cHBvcnQsIGJ1dCBpdCBsaXN0c1xuICogbG93ZXJjYXNlIHN0cmluZ3MgYmVmb3JlIHVwcGVyY2FzZSBzdHJpbmdzLCBzbyB3ZSBhbHNvIG5lZWQgdGhpcyBjdXN0b20gZnVuY3Rpb24gaW4gQXRvbS5cbiAqXG4gKiBAcmV0dXJuIDwwIGlmIGEgc2hvdWxkIGFwcGVhciBiZWZvcmUgYiBpbiBhIGxpc3Q7ID4wIGlmIGIgc2hvdWxkIGFwcGVhciBiZWZvcmUgYSBpbiBhIGxpc3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlQ29tcGFyYXRvcihhOiBzdHJpbmcsIGI6IHN0cmluZyk6IG51bWJlciB7XG4gIGNvbnN0IGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBjaGFyQSA9IGEuY2hhckF0KGkpO1xuICAgIGNvbnN0IGNoYXJCID0gYi5jaGFyQXQoaSk7XG4gICAgaWYgKGNoYXJBID09PSBjaGFyQikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgYVVwcGVyID0gY2hhckEudG9VcHBlckNhc2UoKTtcbiAgICBjb25zdCBiVXBwZXIgPSBjaGFyQi50b1VwcGVyQ2FzZSgpO1xuXG4gICAgY29uc3QgY2FzZUluc2Vuc2l0aXZlQ29tcGFyZSA9IGFVcHBlci5sb2NhbGVDb21wYXJlKGJVcHBlcik7XG4gICAgaWYgKGNhc2VJbnNlbnNpdGl2ZUNvbXBhcmUgIT09IDApIHtcbiAgICAgIHJldHVybiBjYXNlSW5zZW5zaXRpdmVDb21wYXJlO1xuICAgIH1cblxuICAgIC8vIElmIHdlIGhhdmUgcmVhY2hlZCB0aGlzIHBvaW50LCBjaGFyQSBhbmQgY2hhckIgYXJlIGRpZmZlcmVudCwgYnV0IG9ubHkgb25lIG9mIHRoZW0gaXNcbiAgICAvLyB1cHBlcmNhc2UuIFRoZSB1cHBlcmNhc2Ugb25lIHNob3VsZCBiZSByZXR1cm5lZCBmaXJzdC5cbiAgICByZXR1cm4gY2hhckEgPT09IGFVcHBlciA/IC0xIDogMTtcbiAgfVxuXG4gIHJldHVybiBhLmxlbmd0aCAtIGIubGVuZ3RoO1xufVxuXG4vKipcbiAqIEByZXR1cm4gPjAgaWYgYSBpcyB0aGUgZ3JlYXRlciBRdWVyeVNjb3JlOyA8MCBpZiBiIGlzIHRoZSBncmVhdGVyIFF1ZXJ5U2NvcmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY29yZUNvbXBhcmF0b3IoYTogUXVlcnlTY29yZSwgYjogUXVlcnlTY29yZSk6IG51bWJlciB7XG4gIGNvbnN0IGNtcCA9IGEuc2NvcmUgLSBiLnNjb3JlO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWVDb21wYXJhdG9yKGIudmFsdWUsIGEudmFsdWUpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlU2NvcmVDb21wYXJhdG9yKGE6IFF1ZXJ5U2NvcmUsIGI6IFF1ZXJ5U2NvcmUpOiBudW1iZXIge1xuICByZXR1cm4gc2NvcmVDb21wYXJhdG9yKGIsIGEpO1xufVxuIl19
