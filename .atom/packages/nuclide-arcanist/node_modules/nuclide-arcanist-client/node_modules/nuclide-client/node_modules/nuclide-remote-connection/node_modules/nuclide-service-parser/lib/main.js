Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getDefinitions = getDefinitions;
exports.getProxy = getProxy;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _nuclideNodeTranspilerLibBabelCache = require('nuclide-node-transpiler/lib/babel-cache');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _proxyGenerator = require('./proxy-generator');

var _proxyGenerator2 = _interopRequireDefault(_proxyGenerator);

var _serviceParser = require('./service-parser');

var _serviceParser2 = _interopRequireDefault(_serviceParser);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

/** Cache for definitions. */
'use babel';
var definitionsCache = new Map();
/** Cache for remote proxies. */
var proxiesCache = new Map();

/**
 * Load the definitions, cached by their resolved file path.
 * @param definitionPath - The path to the definition file, relative to the module of
 *  the caller.
 * @returns - The Definitions that represents the API of the definiition file.
 */

function getDefinitions(definitionPath) {
  var resolvedPath = resolvePath(definitionPath);

  // Cache definitions by the resolved file path they were loaded from.
  if (!definitionsCache.has(resolvedPath)) {
    definitionsCache.set(resolvedPath, (0, _serviceParser2['default'])(resolvedPath, _fs2['default'].readFileSync(resolvedPath, 'utf8')));
  }
  return definitionsCache.get(resolvedPath);
}

/**
 * Get a proxy module for a given (service, client) pair. This function generates
 * the definitions if the they don't exist, and caches the proxy module if it has
 * already been generated before.
 * @param cleintObject {NuclideClient} The client object that needs to be able to marhsal
 *   and unmarshal objects, as well as make RPC calls.
 * @returns - A proxy module that exports the API specified by the definition
 */

function getProxy(serviceName, definitionPath, clientObject) {
  var resolvedPath = resolvePath(definitionPath);
  var defs = getDefinitions(definitionPath);

  // Cache proxy factory functions by the resolved definition file path.
  if (!proxiesCache.has(resolvedPath)) {
    // Transpile this code (since it will use anonymous classes and arrow functions).
    var code = (0, _proxyGenerator2['default'])(serviceName, defs);
    var filename = _path2['default'].parse(definitionPath).name + 'Proxy.js';
    var transpiled = (0, _nuclideNodeTranspilerLibBabelCache.createOrFetchFromCache)(code, filename);

    // Load the module direcly from a string.
    var m = new module.constructor();
    // $FlowIssue
    m.paths = module.paths;
    m._compile(transpiled, filename);

    // Add the factory function to a cache.
    proxiesCache.set(resolvedPath, {
      factory: m.exports,
      proxies: new WeakMap()
    });
  }

  // Cache remote proxy modules by the (definition path, client object) tuple.
  var cache = proxiesCache.get(resolvedPath);
  if (!cache.proxies.has(clientObject)) {
    cache.proxies.set(clientObject, cache.factory(clientObject));
  }
  return cache.proxies.get(clientObject);
}

/**
 * Resolve definitionPath based on the caller's module, and fallback to
 * this file's module in case module.parent doesn't exist (we are using repl).
 * Note that `require('module')._resolveFilename(path, module)` is equivelent to
 * `require.resolve(path)` under the context of given module.
 */
function resolvePath(definitionPath) {
  // $FlowIssue
  return require('module')._resolveFilename(definitionPath, module.parent ? module.parent : module);
}

// Export caches for testing.
var __test__ = {
  definitionsCache: definitionsCache,
  proxiesCache: proxiesCache
};
exports.__test__ = __test__;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZpY2UtcGFyc2VyL2xpYi9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7a0RBV3FDLHlDQUF5Qzs7a0JBQy9ELElBQUk7Ozs7OEJBQ08sbUJBQW1COzs7OzZCQUNWLGtCQUFrQjs7OztvQkFDcEMsTUFBTTs7Ozs7QUFmdkIsV0FBVyxDQUFDO0FBb0JaLElBQU0sZ0JBQTBDLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQzs7QUFFN0QsSUFBTSxZQUFnRSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7Ozs7Ozs7OztBQVE1RSxTQUFTLGNBQWMsQ0FBQyxjQUFzQixFQUFlO0FBQ2xFLE1BQU0sWUFBWSxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQzs7O0FBR2pELE1BQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUU7QUFDdkMsb0JBQWdCLENBQUMsR0FBRyxDQUFDLFlBQVksRUFDL0IsZ0NBQXVCLFlBQVksRUFBRSxnQkFBRyxZQUFZLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNoRjtBQUNELFNBQU8sZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQzNDOzs7Ozs7Ozs7OztBQVVNLFNBQVMsUUFBUSxDQUFDLFdBQW1CLEVBQUUsY0FBc0IsRUFBRSxZQUFpQixFQUFPO0FBQzVGLE1BQU0sWUFBWSxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNqRCxNQUFNLElBQUksR0FBRyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7OztBQUc1QyxNQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRTs7QUFFbkMsUUFBTSxJQUFJLEdBQUcsaUNBQWMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzlDLFFBQU0sUUFBUSxHQUFHLGtCQUFLLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDO0FBQzlELFFBQU0sVUFBVSxHQUFHLHdDQS9DZixzQkFBc0IsRUErQ2dCLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQzs7O0FBRzFELFFBQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDOztBQUVuQyxLQUFDLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDdkIsS0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7OztBQUdqQyxnQkFBWSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUU7QUFDN0IsYUFBTyxFQUFFLENBQUMsQ0FBQyxPQUFPO0FBQ2xCLGFBQU8sRUFBRSxJQUFJLE9BQU8sRUFBRTtLQUN2QixDQUFDLENBQUM7R0FDSjs7O0FBR0QsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM3QyxNQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUU7QUFDcEMsU0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztHQUM5RDtBQUNELFNBQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7Q0FDeEM7Ozs7Ozs7O0FBUUQsU0FBUyxXQUFXLENBQUMsY0FBc0IsRUFBVTs7QUFFbkQsU0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQztDQUNuRzs7O0FBR00sSUFBTSxRQUFRLEdBQUc7QUFDdEIsa0JBQWdCLEVBQWhCLGdCQUFnQjtBQUNoQixjQUFZLEVBQVosWUFBWTtDQUNiLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtc2VydmljZS1wYXJzZXIvbGliL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQge2NyZWF0ZU9yRmV0Y2hGcm9tQ2FjaGV9IGZyb20gJ251Y2xpZGUtbm9kZS10cmFuc3BpbGVyL2xpYi9iYWJlbC1jYWNoZSc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IGdlbmVyYXRlUHJveHkgZnJvbSAnLi9wcm94eS1nZW5lcmF0b3InO1xuaW1wb3J0IHBhcnNlU2VydmljZURlZmluaXRpb24gZnJvbSAnLi9zZXJ2aWNlLXBhcnNlcic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHR5cGUge0RlZmluaXRpb25zfSBmcm9tICcuL3R5cGVzJztcblxuLyoqIENhY2hlIGZvciBkZWZpbml0aW9ucy4gKi9cbmNvbnN0IGRlZmluaXRpb25zQ2FjaGU6IE1hcDxzdHJpbmcsIERlZmluaXRpb25zPiA9IG5ldyBNYXAoKTtcbi8qKiBDYWNoZSBmb3IgcmVtb3RlIHByb3hpZXMuICovXG5jb25zdCBwcm94aWVzQ2FjaGU6IE1hcDxzdHJpbmcsIHtmYWN0b3J5OiBGdW5jdGlvbiwgcHJveGllczogV2Vha01hcH0+ID0gbmV3IE1hcCgpO1xuXG4vKipcbiAqIExvYWQgdGhlIGRlZmluaXRpb25zLCBjYWNoZWQgYnkgdGhlaXIgcmVzb2x2ZWQgZmlsZSBwYXRoLlxuICogQHBhcmFtIGRlZmluaXRpb25QYXRoIC0gVGhlIHBhdGggdG8gdGhlIGRlZmluaXRpb24gZmlsZSwgcmVsYXRpdmUgdG8gdGhlIG1vZHVsZSBvZlxuICogIHRoZSBjYWxsZXIuXG4gKiBAcmV0dXJucyAtIFRoZSBEZWZpbml0aW9ucyB0aGF0IHJlcHJlc2VudHMgdGhlIEFQSSBvZiB0aGUgZGVmaW5paXRpb24gZmlsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmluaXRpb25zKGRlZmluaXRpb25QYXRoOiBzdHJpbmcpOiBEZWZpbml0aW9ucyB7XG4gIGNvbnN0IHJlc29sdmVkUGF0aCA9IHJlc29sdmVQYXRoKGRlZmluaXRpb25QYXRoKTtcblxuICAvLyBDYWNoZSBkZWZpbml0aW9ucyBieSB0aGUgcmVzb2x2ZWQgZmlsZSBwYXRoIHRoZXkgd2VyZSBsb2FkZWQgZnJvbS5cbiAgaWYgKCFkZWZpbml0aW9uc0NhY2hlLmhhcyhyZXNvbHZlZFBhdGgpKSB7XG4gICAgZGVmaW5pdGlvbnNDYWNoZS5zZXQocmVzb2x2ZWRQYXRoLFxuICAgICAgcGFyc2VTZXJ2aWNlRGVmaW5pdGlvbihyZXNvbHZlZFBhdGgsIGZzLnJlYWRGaWxlU3luYyhyZXNvbHZlZFBhdGgsICd1dGY4JykpKTtcbiAgfVxuICByZXR1cm4gZGVmaW5pdGlvbnNDYWNoZS5nZXQocmVzb2x2ZWRQYXRoKTtcbn1cblxuLyoqXG4gKiBHZXQgYSBwcm94eSBtb2R1bGUgZm9yIGEgZ2l2ZW4gKHNlcnZpY2UsIGNsaWVudCkgcGFpci4gVGhpcyBmdW5jdGlvbiBnZW5lcmF0ZXNcbiAqIHRoZSBkZWZpbml0aW9ucyBpZiB0aGUgdGhleSBkb24ndCBleGlzdCwgYW5kIGNhY2hlcyB0aGUgcHJveHkgbW9kdWxlIGlmIGl0IGhhc1xuICogYWxyZWFkeSBiZWVuIGdlbmVyYXRlZCBiZWZvcmUuXG4gKiBAcGFyYW0gY2xlaW50T2JqZWN0IHtOdWNsaWRlQ2xpZW50fSBUaGUgY2xpZW50IG9iamVjdCB0aGF0IG5lZWRzIHRvIGJlIGFibGUgdG8gbWFyaHNhbFxuICogICBhbmQgdW5tYXJzaGFsIG9iamVjdHMsIGFzIHdlbGwgYXMgbWFrZSBSUEMgY2FsbHMuXG4gKiBAcmV0dXJucyAtIEEgcHJveHkgbW9kdWxlIHRoYXQgZXhwb3J0cyB0aGUgQVBJIHNwZWNpZmllZCBieSB0aGUgZGVmaW5pdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJveHkoc2VydmljZU5hbWU6IHN0cmluZywgZGVmaW5pdGlvblBhdGg6IHN0cmluZywgY2xpZW50T2JqZWN0OiBhbnkpOiBhbnkge1xuICBjb25zdCByZXNvbHZlZFBhdGggPSByZXNvbHZlUGF0aChkZWZpbml0aW9uUGF0aCk7XG4gIGNvbnN0IGRlZnMgPSBnZXREZWZpbml0aW9ucyhkZWZpbml0aW9uUGF0aCk7XG5cbiAgLy8gQ2FjaGUgcHJveHkgZmFjdG9yeSBmdW5jdGlvbnMgYnkgdGhlIHJlc29sdmVkIGRlZmluaXRpb24gZmlsZSBwYXRoLlxuICBpZiAoIXByb3hpZXNDYWNoZS5oYXMocmVzb2x2ZWRQYXRoKSkge1xuICAgIC8vIFRyYW5zcGlsZSB0aGlzIGNvZGUgKHNpbmNlIGl0IHdpbGwgdXNlIGFub255bW91cyBjbGFzc2VzIGFuZCBhcnJvdyBmdW5jdGlvbnMpLlxuICAgIGNvbnN0IGNvZGUgPSBnZW5lcmF0ZVByb3h5KHNlcnZpY2VOYW1lLCBkZWZzKTtcbiAgICBjb25zdCBmaWxlbmFtZSA9IHBhdGgucGFyc2UoZGVmaW5pdGlvblBhdGgpLm5hbWUgKyAnUHJveHkuanMnO1xuICAgIGNvbnN0IHRyYW5zcGlsZWQgPSBjcmVhdGVPckZldGNoRnJvbUNhY2hlKGNvZGUsIGZpbGVuYW1lKTtcblxuICAgIC8vIExvYWQgdGhlIG1vZHVsZSBkaXJlY2x5IGZyb20gYSBzdHJpbmcuXG4gICAgY29uc3QgbSA9IG5ldyBtb2R1bGUuY29uc3RydWN0b3IoKTtcbiAgLy8gJEZsb3dJc3N1ZVxuICAgIG0ucGF0aHMgPSBtb2R1bGUucGF0aHM7XG4gICAgbS5fY29tcGlsZSh0cmFuc3BpbGVkLCBmaWxlbmFtZSk7XG5cbiAgICAvLyBBZGQgdGhlIGZhY3RvcnkgZnVuY3Rpb24gdG8gYSBjYWNoZS5cbiAgICBwcm94aWVzQ2FjaGUuc2V0KHJlc29sdmVkUGF0aCwge1xuICAgICAgZmFjdG9yeTogbS5leHBvcnRzLFxuICAgICAgcHJveGllczogbmV3IFdlYWtNYXAoKSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIENhY2hlIHJlbW90ZSBwcm94eSBtb2R1bGVzIGJ5IHRoZSAoZGVmaW5pdGlvbiBwYXRoLCBjbGllbnQgb2JqZWN0KSB0dXBsZS5cbiAgY29uc3QgY2FjaGUgPSBwcm94aWVzQ2FjaGUuZ2V0KHJlc29sdmVkUGF0aCk7XG4gIGlmICghY2FjaGUucHJveGllcy5oYXMoY2xpZW50T2JqZWN0KSkge1xuICAgIGNhY2hlLnByb3hpZXMuc2V0KGNsaWVudE9iamVjdCwgY2FjaGUuZmFjdG9yeShjbGllbnRPYmplY3QpKTtcbiAgfVxuICByZXR1cm4gY2FjaGUucHJveGllcy5nZXQoY2xpZW50T2JqZWN0KTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGRlZmluaXRpb25QYXRoIGJhc2VkIG9uIHRoZSBjYWxsZXIncyBtb2R1bGUsIGFuZCBmYWxsYmFjayB0b1xuICogdGhpcyBmaWxlJ3MgbW9kdWxlIGluIGNhc2UgbW9kdWxlLnBhcmVudCBkb2Vzbid0IGV4aXN0ICh3ZSBhcmUgdXNpbmcgcmVwbCkuXG4gKiBOb3RlIHRoYXQgYHJlcXVpcmUoJ21vZHVsZScpLl9yZXNvbHZlRmlsZW5hbWUocGF0aCwgbW9kdWxlKWAgaXMgZXF1aXZlbGVudCB0b1xuICogYHJlcXVpcmUucmVzb2x2ZShwYXRoKWAgdW5kZXIgdGhlIGNvbnRleHQgb2YgZ2l2ZW4gbW9kdWxlLlxuICovXG5mdW5jdGlvbiByZXNvbHZlUGF0aChkZWZpbml0aW9uUGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgLy8gJEZsb3dJc3N1ZVxuICByZXR1cm4gcmVxdWlyZSgnbW9kdWxlJykuX3Jlc29sdmVGaWxlbmFtZShkZWZpbml0aW9uUGF0aCwgbW9kdWxlLnBhcmVudCA/IG1vZHVsZS5wYXJlbnQgOiBtb2R1bGUpO1xufVxuXG4vLyBFeHBvcnQgY2FjaGVzIGZvciB0ZXN0aW5nLlxuZXhwb3J0IGNvbnN0IF9fdGVzdF9fID0ge1xuICBkZWZpbml0aW9uc0NhY2hlLFxuICBwcm94aWVzQ2FjaGUsXG59O1xuIl19
