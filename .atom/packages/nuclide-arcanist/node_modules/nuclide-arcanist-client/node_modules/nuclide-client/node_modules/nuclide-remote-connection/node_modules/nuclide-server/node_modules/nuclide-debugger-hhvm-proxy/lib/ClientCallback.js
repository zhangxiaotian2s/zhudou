Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _utils = require('./utils');

var _rx = require('rx');

'use babel';

function createMessage(method, params) {
  var result = { method: method };
  if (params) {
    result.params = params;
  }
  return result;
}

/**
 * This class provides a central callback channel to communicate with debugger client.
 * Currently it provides three callback channels:
 * 1. Chrome server messages.
 * 2. Atom UI notification.
 * 3. Chrome console user messages.
 */

var ClientCallback = (function () {
  // For atom UI notifications.

  function ClientCallback() {
    _classCallCheck(this, ClientCallback);

    this._serverMessageObservable = new _rx.Subject();
    this._notificationObservable = new _rx.Subject();
  }

  _createClass(ClientCallback, [{
    key: 'getNotificationObservable',
    value: function getNotificationObservable() {
      return this._notificationObservable;
    }
  }, {
    key: 'getServerMessageObservable',
    value: function getServerMessageObservable() {
      return this._serverMessageObservable;
    }
  }, {
    key: 'sendUserMessage',
    value: function sendUserMessage(type, message) {
      (0, _utils.log)('sendUserMessage(' + type + '): ' + JSON.stringify(message));
      if (type === 'notification') {
        this._notificationObservable.onNext({
          type: message.type,
          message: message.message
        });
      } else if (type === 'console') {
        this.sendMethod('Console.messageAdded', {
          message: message
        });
      } else {
        (0, _utils.logError)('Unknown UserMessageType: ' + type);
      }
    }
  }, {
    key: 'unknownMethod',
    value: function unknownMethod(id, domain, method, params) {
      var message = 'Unknown chrome dev tools method: ' + domain + '.' + method;
      (0, _utils.log)(message);
      this.replyWithError(id, message);
    }
  }, {
    key: 'replyWithError',
    value: function replyWithError(id, error) {
      this.replyToCommand(id, {}, error);
    }
  }, {
    key: 'replyToCommand',
    value: function replyToCommand(id, result, error) {
      var value = { id: id, result: result };
      if (error) {
        value.error = error;
      }
      this._sendJsonObject(value);
    }
  }, {
    key: 'sendMethod',
    value: function sendMethod(method, params) {
      this._sendJsonObject(createMessage(method, params));
    }
  }, {
    key: '_sendJsonObject',
    value: function _sendJsonObject(value) {
      var message = JSON.stringify(value);
      (0, _utils.log)('Sending JSON: ' + message);
      this._serverMessageObservable.onNext(message);
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this._notificationObservable.onCompleted();
      this._serverMessageObservable.onCompleted();
    }
  }]);

  return ClientCallback;
})();

exports.ClientCallback = ClientCallback;
// For server messages.
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWRlYnVnZ2VyLWhodm0tcHJveHkvbGliL0NsaWVudENhbGxiYWNrLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBVTRCLFNBQVM7O2tCQUNILElBQUk7O0FBWHRDLFdBQVcsQ0FBQzs7QUFnQlosU0FBUyxhQUFhLENBQUMsTUFBYyxFQUFFLE1BQWUsRUFBVTtBQUM5RCxNQUFNLE1BQU0sR0FBRyxFQUFDLE1BQU0sRUFBTixNQUFNLEVBQUMsQ0FBQztBQUN4QixNQUFJLE1BQU0sRUFBRTtBQUNWLFVBQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0dBQ3hCO0FBQ0QsU0FBTyxNQUFNLENBQUM7Q0FDZjs7Ozs7Ozs7OztJQVNZLGNBQWM7OztBQUlkLFdBSkEsY0FBYyxHQUlYOzBCQUpILGNBQWM7O0FBS3ZCLFFBQUksQ0FBQyx3QkFBd0IsR0FBRyxRQXpCaEIsT0FBTyxFQXlCc0IsQ0FBQztBQUM5QyxRQUFJLENBQUMsdUJBQXVCLEdBQUcsUUExQmYsT0FBTyxFQTBCcUIsQ0FBQztHQUM5Qzs7ZUFQVSxjQUFjOztXQVNBLHFDQUFvQztBQUMzRCxhQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztLQUNyQzs7O1dBRXlCLHNDQUF1QjtBQUMvQyxhQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztLQUN0Qzs7O1dBRWMseUJBQUMsSUFBcUIsRUFBRSxPQUFlLEVBQVE7QUFDNUQsaUJBdkNJLEdBQUcsdUJBdUNnQixJQUFJLFdBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBRyxDQUFDO0FBQzVELFVBQUksSUFBSSxLQUFLLGNBQWMsRUFBRTtBQUMzQixZQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDO0FBQ2xDLGNBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtBQUNsQixpQkFBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO1NBQ3pCLENBQUMsQ0FBQztPQUNKLE1BQU0sSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO0FBQzdCLFlBQUksQ0FBQyxVQUFVLENBQUMsc0JBQXNCLEVBQUU7QUFDdEMsaUJBQU8sRUFBUCxPQUFPO1NBQ1IsQ0FBQyxDQUFDO09BQ0osTUFBTTtBQUNMLG1CQWxETyxRQUFRLGdDQWtEc0IsSUFBSSxDQUFHLENBQUM7T0FDOUM7S0FDRjs7O1dBRVksdUJBQUMsRUFBVSxFQUFFLE1BQWMsRUFBRSxNQUFjLEVBQUUsTUFBZSxFQUFRO0FBQy9FLFVBQU0sT0FBTyxHQUFHLG1DQUFtQyxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDO0FBQzVFLGlCQXhESSxHQUFHLEVBd0RILE9BQU8sQ0FBQyxDQUFDO0FBQ2IsVUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDbEM7OztXQUVhLHdCQUFDLEVBQVUsRUFBRSxLQUFhLEVBQVE7QUFDOUMsVUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3BDOzs7V0FFYSx3QkFBQyxFQUFVLEVBQUUsTUFBYyxFQUFFLEtBQWMsRUFBUTtBQUMvRCxVQUFNLEtBQUssR0FBRyxFQUFDLEVBQUUsRUFBRixFQUFFLEVBQUUsTUFBTSxFQUFOLE1BQU0sRUFBQyxDQUFDO0FBQzNCLFVBQUksS0FBSyxFQUFFO0FBQ1QsYUFBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7T0FDckI7QUFDRCxVQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzdCOzs7V0FFUyxvQkFBQyxNQUFjLEVBQUUsTUFBZSxFQUFFO0FBQzFDLFVBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0tBQ3JEOzs7V0FFYyx5QkFBQyxLQUFhLEVBQVE7QUFDbkMsVUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN0QyxpQkE5RUksR0FBRyxFQThFSCxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsQ0FBQztBQUNoQyxVQUFJLENBQUMsd0JBQXdCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQy9DOzs7V0FFTSxtQkFBUztBQUNkLFVBQUksQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUMzQyxVQUFJLENBQUMsd0JBQXdCLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDN0M7OztTQWhFVSxjQUFjIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWRlYnVnZ2VyLWhodm0tcHJveHkvbGliL0NsaWVudENhbGxiYWNrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7bG9nLCBsb2dFcnJvcn0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQge09ic2VydmFibGUsIFN1YmplY3R9IGZyb20gJ3J4JztcblxuZXhwb3J0IHR5cGUgVXNlck1lc3NhZ2VUeXBlID0gJ25vdGlmaWNhdGlvbicgfCAnY29uc29sZSc7XG5leHBvcnQgdHlwZSBOb3RpZmljYXRpb25UeXBlID0gJ2luZm8nIHwgJ3dhcm5pbmcnIHwgJ2Vycm9yJyB8ICdmYXRhbEVycm9yJztcblxuZnVuY3Rpb24gY3JlYXRlTWVzc2FnZShtZXRob2Q6IHN0cmluZywgcGFyYW1zOiA/T2JqZWN0KTogT2JqZWN0IHtcbiAgY29uc3QgcmVzdWx0ID0ge21ldGhvZH07XG4gIGlmIChwYXJhbXMpIHtcbiAgICByZXN1bHQucGFyYW1zID0gcGFyYW1zO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBwcm92aWRlcyBhIGNlbnRyYWwgY2FsbGJhY2sgY2hhbm5lbCB0byBjb21tdW5pY2F0ZSB3aXRoIGRlYnVnZ2VyIGNsaWVudC5cbiAqIEN1cnJlbnRseSBpdCBwcm92aWRlcyB0aHJlZSBjYWxsYmFjayBjaGFubmVsczpcbiAqIDEuIENocm9tZSBzZXJ2ZXIgbWVzc2FnZXMuXG4gKiAyLiBBdG9tIFVJIG5vdGlmaWNhdGlvbi5cbiAqIDMuIENocm9tZSBjb25zb2xlIHVzZXIgbWVzc2FnZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGllbnRDYWxsYmFjayB7XG4gIF9zZXJ2ZXJNZXNzYWdlT2JzZXJ2YWJsZTogU3ViamVjdDsgIC8vIEZvciBzZXJ2ZXIgbWVzc2FnZXMuXG4gIF9ub3RpZmljYXRpb25PYnNlcnZhYmxlOiBTdWJqZWN0OyAgIC8vIEZvciBhdG9tIFVJIG5vdGlmaWNhdGlvbnMuXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fc2VydmVyTWVzc2FnZU9ic2VydmFibGUgPSBuZXcgU3ViamVjdCgpO1xuICAgIHRoaXMuX25vdGlmaWNhdGlvbk9ic2VydmFibGUgPSBuZXcgU3ViamVjdCgpO1xuICB9XG5cbiAgZ2V0Tm90aWZpY2F0aW9uT2JzZXJ2YWJsZSgpOiBPYnNlcnZhYmxlPE5vdGlmaWNhdGlvbk1lc3NhZ2U+IHtcbiAgICByZXR1cm4gdGhpcy5fbm90aWZpY2F0aW9uT2JzZXJ2YWJsZTtcbiAgfVxuXG4gIGdldFNlcnZlck1lc3NhZ2VPYnNlcnZhYmxlKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlcnZlck1lc3NhZ2VPYnNlcnZhYmxlO1xuICB9XG5cbiAgc2VuZFVzZXJNZXNzYWdlKHR5cGU6IFVzZXJNZXNzYWdlVHlwZSwgbWVzc2FnZTogT2JqZWN0KTogdm9pZCB7XG4gICAgbG9nKGBzZW5kVXNlck1lc3NhZ2UoJHt0eXBlfSk6ICR7SlNPTi5zdHJpbmdpZnkobWVzc2FnZSl9YCk7XG4gICAgaWYgKHR5cGUgPT09ICdub3RpZmljYXRpb24nKSB7XG4gICAgICB0aGlzLl9ub3RpZmljYXRpb25PYnNlcnZhYmxlLm9uTmV4dCh7XG4gICAgICAgIHR5cGU6IG1lc3NhZ2UudHlwZSxcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZS5tZXNzYWdlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnY29uc29sZScpIHtcbiAgICAgIHRoaXMuc2VuZE1ldGhvZCgnQ29uc29sZS5tZXNzYWdlQWRkZWQnLCB7XG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nRXJyb3IoYFVua25vd24gVXNlck1lc3NhZ2VUeXBlOiAke3R5cGV9YCk7XG4gICAgfVxuICB9XG5cbiAgdW5rbm93bk1ldGhvZChpZDogbnVtYmVyLCBkb21haW46IHN0cmluZywgbWV0aG9kOiBzdHJpbmcsIHBhcmFtczogP09iamVjdCk6IHZvaWQge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSAnVW5rbm93biBjaHJvbWUgZGV2IHRvb2xzIG1ldGhvZDogJyArIGRvbWFpbiArICcuJyArIG1ldGhvZDtcbiAgICBsb2cobWVzc2FnZSk7XG4gICAgdGhpcy5yZXBseVdpdGhFcnJvcihpZCwgbWVzc2FnZSk7XG4gIH1cblxuICByZXBseVdpdGhFcnJvcihpZDogbnVtYmVyLCBlcnJvcjogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5yZXBseVRvQ29tbWFuZChpZCwge30sIGVycm9yKTtcbiAgfVxuXG4gIHJlcGx5VG9Db21tYW5kKGlkOiBudW1iZXIsIHJlc3VsdDogT2JqZWN0LCBlcnJvcjogP3N0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IHZhbHVlID0ge2lkLCByZXN1bHR9O1xuICAgIGlmIChlcnJvcikge1xuICAgICAgdmFsdWUuZXJyb3IgPSBlcnJvcjtcbiAgICB9XG4gICAgdGhpcy5fc2VuZEpzb25PYmplY3QodmFsdWUpO1xuICB9XG5cbiAgc2VuZE1ldGhvZChtZXRob2Q6IHN0cmluZywgcGFyYW1zOiA/T2JqZWN0KSB7XG4gICAgdGhpcy5fc2VuZEpzb25PYmplY3QoY3JlYXRlTWVzc2FnZShtZXRob2QsIHBhcmFtcykpO1xuICB9XG5cbiAgX3NlbmRKc29uT2JqZWN0KHZhbHVlOiBPYmplY3QpOiB2b2lkIHtcbiAgICBjb25zdCBtZXNzYWdlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIGxvZygnU2VuZGluZyBKU09OOiAnICsgbWVzc2FnZSk7XG4gICAgdGhpcy5fc2VydmVyTWVzc2FnZU9ic2VydmFibGUub25OZXh0KG1lc3NhZ2UpO1xuICB9XG5cbiAgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9ub3RpZmljYXRpb25PYnNlcnZhYmxlLm9uQ29tcGxldGVkKCk7XG4gICAgdGhpcy5fc2VydmVyTWVzc2FnZU9ic2VydmFibGUub25Db21wbGV0ZWQoKTtcbiAgfVxufVxuIl19
