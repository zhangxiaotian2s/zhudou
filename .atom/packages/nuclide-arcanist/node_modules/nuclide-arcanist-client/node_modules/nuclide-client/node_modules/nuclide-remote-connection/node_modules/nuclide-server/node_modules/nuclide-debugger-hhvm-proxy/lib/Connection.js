Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _DbgpSocket = require('./DbgpSocket');

var _DataCache = require('./DataCache');

'use babel';

var connectionCount = 1;

var Connection = (function () {
  function Connection(socket) {
    _classCallCheck(this, Connection);

    var dbgpSocket = new _DbgpSocket.DbgpSocket(socket);
    this._socket = dbgpSocket;
    this._dataCache = new _DataCache.DataCache(dbgpSocket);
    this._id = connectionCount++;
  }

  _createClass(Connection, [{
    key: 'getId',
    value: function getId() {
      return this._id;
    }
  }, {
    key: 'onStatus',
    value: function onStatus(callback) {
      return this._socket.onStatus(callback);
    }
  }, {
    key: 'evaluateOnCallFrame',
    value: function evaluateOnCallFrame(frameIndex, expression) {
      return this._dataCache.evaluateOnCallFrame(frameIndex, expression);
    }
  }, {
    key: 'setExceptionBreakpoint',
    value: function setExceptionBreakpoint(exceptionName) {
      return this._socket.setExceptionBreakpoint(exceptionName);
    }
  }, {
    key: 'setBreakpoint',
    value: function setBreakpoint(filename, lineNumber) {
      return this._socket.setBreakpoint(filename, lineNumber);
    }
  }, {
    key: 'removeBreakpoint',
    value: function removeBreakpoint(breakpointId) {
      return this._socket.removeBreakpoint(breakpointId);
    }
  }, {
    key: 'getStackFrames',
    value: function getStackFrames() {
      return this._socket.getStackFrames();
    }
  }, {
    key: 'getScopesForFrame',
    value: function getScopesForFrame(frameIndex) {
      return this._dataCache.getScopesForFrame(frameIndex);
    }
  }, {
    key: 'getStatus',
    value: function getStatus() {
      return this._socket.getStatus();
    }
  }, {
    key: 'sendContinuationCommand',
    value: function sendContinuationCommand(command) {
      return this._socket.sendContinuationCommand(command);
    }
  }, {
    key: 'sendBreakCommand',
    value: function sendBreakCommand() {
      return this._socket.sendBreakCommand();
    }
  }, {
    key: 'getProperties',
    value: function getProperties(remoteId) {
      return this._dataCache.getProperties(remoteId);
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this._socket.dispose();
    }
  }]);

  return Connection;
})();

exports.Connection = Connection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWRlYnVnZ2VyLWhodm0tcHJveHkvbGliL0Nvbm5lY3Rpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OzswQkFXeUIsY0FBYzs7eUJBQ2YsYUFBYTs7QUFackMsV0FBVyxDQUFDOztBQW9CWixJQUFJLGVBQWUsR0FBRyxDQUFDLENBQUM7O0lBRVgsVUFBVTtBQUtWLFdBTEEsVUFBVSxDQUtULE1BQWMsRUFBRTswQkFMakIsVUFBVTs7QUFNbkIsUUFBTSxVQUFVLEdBQUcsZ0JBakJmLFVBQVUsQ0FpQm9CLE1BQU0sQ0FBQyxDQUFDO0FBQzFDLFFBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDO0FBQzFCLFFBQUksQ0FBQyxVQUFVLEdBQUcsZUFsQmQsU0FBUyxDQWtCbUIsVUFBVSxDQUFDLENBQUM7QUFDNUMsUUFBSSxDQUFDLEdBQUcsR0FBRyxlQUFlLEVBQUUsQ0FBQztHQUM5Qjs7ZUFWVSxVQUFVOztXQVloQixpQkFBVztBQUNkLGFBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztLQUNqQjs7O1dBRU8sa0JBQUMsUUFBbUMsRUFBYztBQUN4RCxhQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3hDOzs7V0FFa0IsNkJBQUMsVUFBa0IsRUFBRSxVQUFrQixFQUFtQjtBQUMzRSxhQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQ3BFOzs7V0FFcUIsZ0NBQUMsYUFBcUIsRUFBbUI7QUFDN0QsYUFBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQzNEOzs7V0FFWSx1QkFBQyxRQUFnQixFQUFFLFVBQWtCLEVBQW1CO0FBQ25FLGFBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQ3pEOzs7V0FFZSwwQkFBQyxZQUFvQixFQUFXO0FBQzlDLGFBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUNwRDs7O1dBRWEsMEJBQTJCO0FBQ3ZDLGFBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztLQUN0Qzs7O1dBRWdCLDJCQUFDLFVBQWtCLEVBQWtCO0FBQ3BELGFBQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUN0RDs7O1dBRVEscUJBQW9CO0FBQzNCLGFBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztLQUNqQzs7O1dBRXNCLGlDQUFDLE9BQWUsRUFBbUI7QUFDeEQsYUFBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3REOzs7V0FFZSw0QkFBcUI7QUFDbkMsYUFBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLENBQUM7S0FDeEM7OztXQUVZLHVCQUFDLFFBQXdCLEVBQXNDO0FBQzFFLGFBQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDaEQ7OztXQUVNLG1CQUFTO0FBQ2QsVUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUN4Qjs7O1NBOURVLFVBQVUiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtZGVidWdnZXItaGh2bS1wcm94eS9saWIvQ29ubmVjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB7RGJncFNvY2tldH0gZnJvbSAnLi9EYmdwU29ja2V0JztcbmltcG9ydCB7RGF0YUNhY2hlfSBmcm9tICcuL0RhdGFDYWNoZSc7XG5cbmltcG9ydCB0eXBlIHtTb2NrZXR9IGZyb20gJ25ldCc7XG5pbXBvcnQgdHlwZSBTY29wZSBmcm9tICcuL0RhdGFDYWNoZSc7XG5pbXBvcnQgdHlwZSBQcm9wZXJ0eURlc2NyaXB0b3IgZnJvbSAnLi9EYXRhQ2FjaGUnO1xuaW1wb3J0IHR5cGUgUmVtb3RlT2JqZWN0SWQgZnJvbSAnLi9EYXRhQ2FjaGUnO1xuaW1wb3J0IHR5cGUge0Rpc3Bvc2FibGV9IGZyb20gJ251Y2xpZGUtY29tbW9ucyc7XG5cbmxldCBjb25uZWN0aW9uQ291bnQgPSAxO1xuXG5leHBvcnQgY2xhc3MgQ29ubmVjdGlvbiB7XG4gIF9zb2NrZXQ6IERiZ3BTb2NrZXQ7XG4gIF9kYXRhQ2FjaGU6IERhdGFDYWNoZTtcbiAgX2lkOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3Ioc29ja2V0OiBTb2NrZXQpIHtcbiAgICBjb25zdCBkYmdwU29ja2V0ID0gbmV3IERiZ3BTb2NrZXQoc29ja2V0KTtcbiAgICB0aGlzLl9zb2NrZXQgPSBkYmdwU29ja2V0O1xuICAgIHRoaXMuX2RhdGFDYWNoZSA9IG5ldyBEYXRhQ2FjaGUoZGJncFNvY2tldCk7XG4gICAgdGhpcy5faWQgPSBjb25uZWN0aW9uQ291bnQrKztcbiAgfVxuXG4gIGdldElkKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2lkO1xuICB9XG5cbiAgb25TdGF0dXMoY2FsbGJhY2s6IChzdGF0dXM6IHN0cmluZykgPT4gbWl4ZWQpOiBEaXNwb3NhYmxlIHtcbiAgICByZXR1cm4gdGhpcy5fc29ja2V0Lm9uU3RhdHVzKGNhbGxiYWNrKTtcbiAgfVxuXG4gIGV2YWx1YXRlT25DYWxsRnJhbWUoZnJhbWVJbmRleDogbnVtYmVyLCBleHByZXNzaW9uOiBzdHJpbmcpOiBQcm9taXNlPE9iamVjdD4ge1xuICAgIHJldHVybiB0aGlzLl9kYXRhQ2FjaGUuZXZhbHVhdGVPbkNhbGxGcmFtZShmcmFtZUluZGV4LCBleHByZXNzaW9uKTtcbiAgfVxuXG4gIHNldEV4Y2VwdGlvbkJyZWFrcG9pbnQoZXhjZXB0aW9uTmFtZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5fc29ja2V0LnNldEV4Y2VwdGlvbkJyZWFrcG9pbnQoZXhjZXB0aW9uTmFtZSk7XG4gIH1cblxuICBzZXRCcmVha3BvaW50KGZpbGVuYW1lOiBzdHJpbmcsIGxpbmVOdW1iZXI6IG51bWJlcik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX3NvY2tldC5zZXRCcmVha3BvaW50KGZpbGVuYW1lLCBsaW5lTnVtYmVyKTtcbiAgfVxuXG4gIHJlbW92ZUJyZWFrcG9pbnQoYnJlYWtwb2ludElkOiBzdHJpbmcpOiBQcm9taXNlIHtcbiAgICByZXR1cm4gdGhpcy5fc29ja2V0LnJlbW92ZUJyZWFrcG9pbnQoYnJlYWtwb2ludElkKTtcbiAgfVxuXG4gIGdldFN0YWNrRnJhbWVzKCk6IFByb21pc2U8QXJyYXk8T2JqZWN0Pj4ge1xuICAgIHJldHVybiB0aGlzLl9zb2NrZXQuZ2V0U3RhY2tGcmFtZXMoKTtcbiAgfVxuXG4gIGdldFNjb3Blc0ZvckZyYW1lKGZyYW1lSW5kZXg6IG51bWJlcik6IFByb21pc2U8U2NvcGU+IHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YUNhY2hlLmdldFNjb3Blc0ZvckZyYW1lKGZyYW1lSW5kZXgpO1xuICB9XG5cbiAgZ2V0U3RhdHVzKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX3NvY2tldC5nZXRTdGF0dXMoKTtcbiAgfVxuXG4gIHNlbmRDb250aW51YXRpb25Db21tYW5kKGNvbW1hbmQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX3NvY2tldC5zZW5kQ29udGludWF0aW9uQ29tbWFuZChjb21tYW5kKTtcbiAgfVxuXG4gIHNlbmRCcmVha0NvbW1hbmQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuX3NvY2tldC5zZW5kQnJlYWtDb21tYW5kKCk7XG4gIH1cblxuICBnZXRQcm9wZXJ0aWVzKHJlbW90ZUlkOiBSZW1vdGVPYmplY3RJZCk6IFByb21pc2U8QXJyYXk8UHJvcGVydHlEZXNjcmlwdG9yPj4ge1xuICAgIHJldHVybiB0aGlzLl9kYXRhQ2FjaGUuZ2V0UHJvcGVydGllcyhyZW1vdGVJZCk7XG4gIH1cblxuICBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuX3NvY2tldC5kaXNwb3NlKCk7XG4gIH1cbn1cbiJdfQ==
