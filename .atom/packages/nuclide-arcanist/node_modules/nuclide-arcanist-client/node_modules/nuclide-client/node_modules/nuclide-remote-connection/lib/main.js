
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */
var RemoteConnection = require('./RemoteConnection');
var RemoteDirectory = require('./RemoteDirectory');
var RemoteFile = require('./RemoteFile');

var _require = require('./SshHandshake');

var SshHandshake = _require.SshHandshake;
var decorateSshConnectionDelegateWithTracking = _require.decorateSshConnectionDelegateWithTracking;

/*
 * We want the services to exist as a singleton. The ./service-manager.js file
 * in this package contains a cache of services, each of which should also be singletons for each
 * root/service pair. To this end, we use the singleton() utility in nuclide-commons to ensure that
 * only one instance of service-manager is loaded, serving as a clearinghouse for all service
 * loading, which is done via its getService() and getServiceByNuclideUri() methods.
 */
var NUCLIDE_CLIENT_EXPORTS_KEY = '_nuclide_client_exports';
var nuclideClientExports = require('nuclide-commons').singleton.get(NUCLIDE_CLIENT_EXPORTS_KEY, function () {
  var _require2 = require('./service-manager');

  var getService = _require2.getService;
  var getServiceByNuclideUri = _require2.getServiceByNuclideUri;
  var getServiceLogger = _require2.getServiceLogger;
  var getRemoteServiceByRemoteConnection = _require2.getRemoteServiceByRemoteConnection;

  var _require3 = require('./client');

  var getClient = _require3.getClient;
  var getFileForPath = _require3.getFileForPath;

  return {
    getClient: getClient,
    getFileForPath: getFileForPath,
    getService: getService,
    getServiceLogger: getServiceLogger,
    getServiceByNuclideUri: getServiceByNuclideUri,
    getRemoteServiceByRemoteConnection: getRemoteServiceByRemoteConnection
  };
});

module.exports = {
  decorateSshConnectionDelegateWithTracking: decorateSshConnectionDelegateWithTracking,
  RemoteConnection: RemoteConnection,
  RemoteFile: RemoteFile,
  RemoteDirectory: RemoteDirectory,
  SshHandshake: SshHandshake,
  getClient: nuclideClientExports.getClient,
  getFileForPath: nuclideClientExports.getFileForPath,
  getService: nuclideClientExports.getService,
  getServiceLogger: nuclideClientExports.getServiceLogger,
  getServiceByNuclideUri: nuclideClientExports.getServiceByNuclideUri,
  getRemoteServiceByRemoteConnection: nuclideClientExports.getRemoteServiceByRemoteConnection
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXJlbW90ZS1jb25uZWN0aW9uL2xpYi9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7O0FBVVosSUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUN2RCxJQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUNyRCxJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7O2VBQ3VCLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQzs7SUFBcEYsWUFBWSxZQUFaLFlBQVk7SUFBRSx5Q0FBeUMsWUFBekMseUNBQXlDOzs7Ozs7Ozs7QUFTOUQsSUFBTSwwQkFBMEIsR0FBRyx5QkFBeUIsQ0FBQztBQUM3RCxJQUFNLG9CQUEwQyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQ3pGLDBCQUEwQixFQUMxQixZQUFNO2tCQU1BLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQzs7TUFKOUIsVUFBVSxhQUFWLFVBQVU7TUFDVixzQkFBc0IsYUFBdEIsc0JBQXNCO01BQ3RCLGdCQUFnQixhQUFoQixnQkFBZ0I7TUFDaEIsa0NBQWtDLGFBQWxDLGtDQUFrQzs7a0JBS2hDLE9BQU8sQ0FBQyxVQUFVLENBQUM7O01BRnJCLFNBQVMsYUFBVCxTQUFTO01BQ1QsY0FBYyxhQUFkLGNBQWM7O0FBRWhCLFNBQU87QUFDTCxhQUFTLEVBQVQsU0FBUztBQUNULGtCQUFjLEVBQWQsY0FBYztBQUNkLGNBQVUsRUFBVixVQUFVO0FBQ1Ysb0JBQWdCLEVBQWhCLGdCQUFnQjtBQUNoQiwwQkFBc0IsRUFBdEIsc0JBQXNCO0FBQ3RCLHNDQUFrQyxFQUFsQyxrQ0FBa0M7R0FDbkMsQ0FBQztDQUNILENBQ0YsQ0FBQzs7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsMkNBQXlDLEVBQXpDLHlDQUF5QztBQUN6QyxrQkFBZ0IsRUFBaEIsZ0JBQWdCO0FBQ2hCLFlBQVUsRUFBVixVQUFVO0FBQ1YsaUJBQWUsRUFBZixlQUFlO0FBQ2YsY0FBWSxFQUFaLFlBQVk7QUFDWixXQUFTLEVBQUUsb0JBQW9CLENBQUMsU0FBUztBQUN6QyxnQkFBYyxFQUFFLG9CQUFvQixDQUFDLGNBQWM7QUFDbkQsWUFBVSxFQUFFLG9CQUFvQixDQUFDLFVBQVU7QUFDM0Msa0JBQWdCLEVBQUUsb0JBQW9CLENBQUMsZ0JBQWdCO0FBQ3ZELHdCQUFzQixFQUFFLG9CQUFvQixDQUFDLHNCQUFzQjtBQUNuRSxvQ0FBa0MsRUFBRSxvQkFBb0IsQ0FBQyxrQ0FBa0M7Q0FDNUYsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1yZW1vdGUtY29ubmVjdGlvbi9saWIvbWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5jb25zdCBSZW1vdGVDb25uZWN0aW9uID0gcmVxdWlyZSgnLi9SZW1vdGVDb25uZWN0aW9uJyk7XG5jb25zdCBSZW1vdGVEaXJlY3RvcnkgPSByZXF1aXJlKCcuL1JlbW90ZURpcmVjdG9yeScpO1xuY29uc3QgUmVtb3RlRmlsZSA9IHJlcXVpcmUoJy4vUmVtb3RlRmlsZScpO1xuY29uc3Qge1NzaEhhbmRzaGFrZSwgZGVjb3JhdGVTc2hDb25uZWN0aW9uRGVsZWdhdGVXaXRoVHJhY2tpbmd9ID0gcmVxdWlyZSgnLi9Tc2hIYW5kc2hha2UnKTtcblxuLypcbiAqIFdlIHdhbnQgdGhlIHNlcnZpY2VzIHRvIGV4aXN0IGFzIGEgc2luZ2xldG9uLiBUaGUgLi9zZXJ2aWNlLW1hbmFnZXIuanMgZmlsZVxuICogaW4gdGhpcyBwYWNrYWdlIGNvbnRhaW5zIGEgY2FjaGUgb2Ygc2VydmljZXMsIGVhY2ggb2Ygd2hpY2ggc2hvdWxkIGFsc28gYmUgc2luZ2xldG9ucyBmb3IgZWFjaFxuICogcm9vdC9zZXJ2aWNlIHBhaXIuIFRvIHRoaXMgZW5kLCB3ZSB1c2UgdGhlIHNpbmdsZXRvbigpIHV0aWxpdHkgaW4gbnVjbGlkZS1jb21tb25zIHRvIGVuc3VyZSB0aGF0XG4gKiBvbmx5IG9uZSBpbnN0YW5jZSBvZiBzZXJ2aWNlLW1hbmFnZXIgaXMgbG9hZGVkLCBzZXJ2aW5nIGFzIGEgY2xlYXJpbmdob3VzZSBmb3IgYWxsIHNlcnZpY2VcbiAqIGxvYWRpbmcsIHdoaWNoIGlzIGRvbmUgdmlhIGl0cyBnZXRTZXJ2aWNlKCkgYW5kIGdldFNlcnZpY2VCeU51Y2xpZGVVcmkoKSBtZXRob2RzLlxuICovXG5jb25zdCBOVUNMSURFX0NMSUVOVF9FWFBPUlRTX0tFWSA9ICdfbnVjbGlkZV9jbGllbnRfZXhwb3J0cyc7XG5jb25zdCBudWNsaWRlQ2xpZW50RXhwb3J0czogTnVjbGlkZUNsaWVudEV4cG9ydHMgPSByZXF1aXJlKCdudWNsaWRlLWNvbW1vbnMnKS5zaW5nbGV0b24uZ2V0KFxuICBOVUNMSURFX0NMSUVOVF9FWFBPUlRTX0tFWSxcbiAgKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGdldFNlcnZpY2UsXG4gICAgICBnZXRTZXJ2aWNlQnlOdWNsaWRlVXJpLFxuICAgICAgZ2V0U2VydmljZUxvZ2dlcixcbiAgICAgIGdldFJlbW90ZVNlcnZpY2VCeVJlbW90ZUNvbm5lY3Rpb24sXG4gICAgfSA9IHJlcXVpcmUoJy4vc2VydmljZS1tYW5hZ2VyJyk7XG4gICAgY29uc3Qge1xuICAgICAgZ2V0Q2xpZW50LFxuICAgICAgZ2V0RmlsZUZvclBhdGgsXG4gICAgfSA9IHJlcXVpcmUoJy4vY2xpZW50Jyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldENsaWVudCxcbiAgICAgIGdldEZpbGVGb3JQYXRoLFxuICAgICAgZ2V0U2VydmljZSxcbiAgICAgIGdldFNlcnZpY2VMb2dnZXIsXG4gICAgICBnZXRTZXJ2aWNlQnlOdWNsaWRlVXJpLFxuICAgICAgZ2V0UmVtb3RlU2VydmljZUJ5UmVtb3RlQ29ubmVjdGlvbixcbiAgICB9O1xuICB9LFxuKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlY29yYXRlU3NoQ29ubmVjdGlvbkRlbGVnYXRlV2l0aFRyYWNraW5nLFxuICBSZW1vdGVDb25uZWN0aW9uLFxuICBSZW1vdGVGaWxlLFxuICBSZW1vdGVEaXJlY3RvcnksXG4gIFNzaEhhbmRzaGFrZSxcbiAgZ2V0Q2xpZW50OiBudWNsaWRlQ2xpZW50RXhwb3J0cy5nZXRDbGllbnQsXG4gIGdldEZpbGVGb3JQYXRoOiBudWNsaWRlQ2xpZW50RXhwb3J0cy5nZXRGaWxlRm9yUGF0aCxcbiAgZ2V0U2VydmljZTogbnVjbGlkZUNsaWVudEV4cG9ydHMuZ2V0U2VydmljZSxcbiAgZ2V0U2VydmljZUxvZ2dlcjogbnVjbGlkZUNsaWVudEV4cG9ydHMuZ2V0U2VydmljZUxvZ2dlcixcbiAgZ2V0U2VydmljZUJ5TnVjbGlkZVVyaTogbnVjbGlkZUNsaWVudEV4cG9ydHMuZ2V0U2VydmljZUJ5TnVjbGlkZVVyaSxcbiAgZ2V0UmVtb3RlU2VydmljZUJ5UmVtb3RlQ29ubmVjdGlvbjogbnVjbGlkZUNsaWVudEV4cG9ydHMuZ2V0UmVtb3RlU2VydmljZUJ5UmVtb3RlQ29ubmVjdGlvbixcbn07XG4iXX0=
