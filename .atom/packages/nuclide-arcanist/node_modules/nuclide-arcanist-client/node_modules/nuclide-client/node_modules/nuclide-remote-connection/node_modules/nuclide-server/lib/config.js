
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */
/**
  * Currently we have two different ways to config a service in service-config.json:
  *   1. `{"useServiceFramework": false, "path": "path/to/service/file"}`, a old fashioned way
  *      to config a service and it is deprecated.
  *   2. `{"useServiceFramework": true,
  *        "definition": "path/to/service/defintion",
  *        "implementation": "path/to/local/implementation"}, use service framework to config
  *      a service definition and a local implementation.
  */

var fs = require('fs-plus');
var path = require('path');

var PACKAGE_ROOT = path.resolve(__dirname, '..');

// Custom services path is defined in "package.json", which is always in the root, so resolve
// the path to the custom services config from the root as well.
var CUSTOM_SERVICES_CONFIG_PATH = path.resolve(PACKAGE_ROOT, require(path.resolve(PACKAGE_ROOT, 'package.json'))['nuclide']['customServices']);
var HEARTBEAT_CHANNEL = 'heartbeat';
var SERVICE_FRAMEWORK_EVENT_CHANNEL = 'service_framework_event';
var SERVICE_FRAMEWORK_RPC_CHANNEL = 'service_framework_rpc';
var SERVICE_FRAMEWORK3_CHANNEL = 'service_framework3_rpc';

var SERVICE_FRAMEWORK_RPC_TIMEOUT_MS = 60 * 1000;
var SERVICES_CONFIG_PATH = path.resolve(PACKAGE_ROOT, 'services-config.json');

function loadConfigs() {
  var configList = require(SERVICES_CONFIG_PATH);

  if (fs.isFileSync(CUSTOM_SERVICES_CONFIG_PATH)) {
    var customConfigs = require(CUSTOM_SERVICES_CONFIG_PATH);
    configList = configList.concat(customConfigs);
  }

  return configList;
}

function loadConfigsOfServiceWithServiceFramework() {
  return loadConfigs().filter(function (config) {
    return config.useServiceFramework;
  }).map(function (config) {
    return {
      name: config.name,
      definition: _resolveServiceConfigPath(config.definition),
      implementation: _resolveServiceConfigPath(config.implementation)
    };
  });
}

function loadConfigsOfServiceWithoutServiceFramework() {
  return loadConfigs().filter(function (config) {
    return !config.useServiceFramework;
  }).map(function (config) {
    return _resolveServiceConfigPath(config.path);
  });
}

/**
  * Resolve service path defined in service-config.json to absolute path. The service path could
  * be in one of following forms:
  *   1. A path relative to the folder contains `service-config.json`.
  *   2. An absolute path.
  *   3. A path in form of `$dependency_package/path/to/service`. For example,
  *      'nuclide-commons/lib/array.js'.
  */
function _resolveServiceConfigPath(serviceConfigPath) {
  try {
    return require.resolve(serviceConfigPath);
  } catch (e) {
    return path.resolve(path.dirname(SERVICES_CONFIG_PATH), serviceConfigPath);
  }
}

module.exports = {
  loadConfigsOfServiceWithoutServiceFramework: loadConfigsOfServiceWithoutServiceFramework,
  loadConfigsOfServiceWithServiceFramework: loadConfigsOfServiceWithServiceFramework,
  HEARTBEAT_CHANNEL: HEARTBEAT_CHANNEL,
  SERVICE_FRAMEWORK_EVENT_CHANNEL: SERVICE_FRAMEWORK_EVENT_CHANNEL,
  SERVICE_FRAMEWORK_RPC_CHANNEL: SERVICE_FRAMEWORK_RPC_CHANNEL,
  SERVICE_FRAMEWORK_RPC_TIMEOUT_MS: SERVICE_FRAMEWORK_RPC_TIMEOUT_MS,
  SERVICE_FRAMEWORK3_CHANNEL: SERVICE_FRAMEWORK3_CHANNEL
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvY29uZmlnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CWixJQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDOUIsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUU3QixJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQzs7OztBQUluRCxJQUFNLDJCQUEyQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQzlDLFlBQVksRUFDWixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUNqRixDQUFDO0FBQ0YsSUFBTSxpQkFBaUIsR0FBRyxXQUFXLENBQUM7QUFDdEMsSUFBTSwrQkFBK0IsR0FBRyx5QkFBeUIsQ0FBQztBQUNsRSxJQUFNLDZCQUE2QixHQUFHLHVCQUF1QixDQUFDO0FBQzlELElBQU0sMEJBQTBCLEdBQUcsd0JBQXdCLENBQUM7O0FBRTVELElBQU0sZ0NBQWdDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztBQUNuRCxJQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLHNCQUFzQixDQUFDLENBQUM7O0FBRWhGLFNBQVMsV0FBVyxHQUFlO0FBQ2pDLE1BQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDOztBQUUvQyxNQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsMkJBQTJCLENBQUMsRUFBRTtBQUM5QyxRQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUMzRCxjQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztHQUMvQzs7QUFFRCxTQUFPLFVBQVUsQ0FBQztDQUNuQjs7QUFFRCxTQUFTLHdDQUF3QyxHQUFlO0FBQzlELFNBQU8sV0FBVyxFQUFFLENBQ2pCLE1BQU0sQ0FBQyxVQUFBLE1BQU07V0FBSSxNQUFNLENBQUMsbUJBQW1CO0dBQUEsQ0FBQyxDQUM1QyxHQUFHLENBQUMsVUFBQSxNQUFNLEVBQUk7QUFDYixXQUFPO0FBQ0wsVUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO0FBQ2pCLGdCQUFVLEVBQUUseUJBQXlCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztBQUN4RCxvQkFBYyxFQUFFLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7S0FDakUsQ0FBQztHQUNILENBQUMsQ0FBQztDQUNOOztBQUVELFNBQVMsMkNBQTJDLEdBQWtCO0FBQ3BFLFNBQU8sV0FBVyxFQUFFLENBQ2pCLE1BQU0sQ0FBQyxVQUFBLE1BQU07V0FBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUI7R0FBQSxDQUFDLENBQzdDLEdBQUcsQ0FBQyxVQUFBLE1BQU07V0FBSSx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0dBQUEsQ0FBQyxDQUFDO0NBQzFEOzs7Ozs7Ozs7O0FBVUQsU0FBUyx5QkFBeUIsQ0FBQyxpQkFBeUIsRUFBVTtBQUNwRSxNQUFJO0FBQ0YsV0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7R0FDM0MsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNWLFdBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztHQUM1RTtDQUNGOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZiw2Q0FBMkMsRUFBM0MsMkNBQTJDO0FBQzNDLDBDQUF3QyxFQUF4Qyx3Q0FBd0M7QUFDeEMsbUJBQWlCLEVBQWpCLGlCQUFpQjtBQUNqQixpQ0FBK0IsRUFBL0IsK0JBQStCO0FBQy9CLCtCQUE2QixFQUE3Qiw2QkFBNkI7QUFDN0Isa0NBQWdDLEVBQWhDLGdDQUFnQztBQUNoQyw0QkFBMEIsRUFBMUIsMEJBQTBCO0NBQzNCLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtc2VydmVyL2xpYi9jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLyoqXG4gICogQ3VycmVudGx5IHdlIGhhdmUgdHdvIGRpZmZlcmVudCB3YXlzIHRvIGNvbmZpZyBhIHNlcnZpY2UgaW4gc2VydmljZS1jb25maWcuanNvbjpcbiAgKiAgIDEuIGB7XCJ1c2VTZXJ2aWNlRnJhbWV3b3JrXCI6IGZhbHNlLCBcInBhdGhcIjogXCJwYXRoL3RvL3NlcnZpY2UvZmlsZVwifWAsIGEgb2xkIGZhc2hpb25lZCB3YXlcbiAgKiAgICAgIHRvIGNvbmZpZyBhIHNlcnZpY2UgYW5kIGl0IGlzIGRlcHJlY2F0ZWQuXG4gICogICAyLiBge1widXNlU2VydmljZUZyYW1ld29ya1wiOiB0cnVlLFxuICAqICAgICAgICBcImRlZmluaXRpb25cIjogXCJwYXRoL3RvL3NlcnZpY2UvZGVmaW50aW9uXCIsXG4gICogICAgICAgIFwiaW1wbGVtZW50YXRpb25cIjogXCJwYXRoL3RvL2xvY2FsL2ltcGxlbWVudGF0aW9uXCJ9LCB1c2Ugc2VydmljZSBmcmFtZXdvcmsgdG8gY29uZmlnXG4gICogICAgICBhIHNlcnZpY2UgZGVmaW5pdGlvbiBhbmQgYSBsb2NhbCBpbXBsZW1lbnRhdGlvbi5cbiAgKi9cblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcy1wbHVzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5jb25zdCBQQUNLQUdFX1JPT1QgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nKTtcblxuLy8gQ3VzdG9tIHNlcnZpY2VzIHBhdGggaXMgZGVmaW5lZCBpbiBcInBhY2thZ2UuanNvblwiLCB3aGljaCBpcyBhbHdheXMgaW4gdGhlIHJvb3QsIHNvIHJlc29sdmVcbi8vIHRoZSBwYXRoIHRvIHRoZSBjdXN0b20gc2VydmljZXMgY29uZmlnIGZyb20gdGhlIHJvb3QgYXMgd2VsbC5cbmNvbnN0IENVU1RPTV9TRVJWSUNFU19DT05GSUdfUEFUSCA9IHBhdGgucmVzb2x2ZShcbiAgUEFDS0FHRV9ST09ULFxuICByZXF1aXJlKHBhdGgucmVzb2x2ZShQQUNLQUdFX1JPT1QsICdwYWNrYWdlLmpzb24nKSlbJ251Y2xpZGUnXVsnY3VzdG9tU2VydmljZXMnXVxuKTtcbmNvbnN0IEhFQVJUQkVBVF9DSEFOTkVMID0gJ2hlYXJ0YmVhdCc7XG5jb25zdCBTRVJWSUNFX0ZSQU1FV09SS19FVkVOVF9DSEFOTkVMID0gJ3NlcnZpY2VfZnJhbWV3b3JrX2V2ZW50JztcbmNvbnN0IFNFUlZJQ0VfRlJBTUVXT1JLX1JQQ19DSEFOTkVMID0gJ3NlcnZpY2VfZnJhbWV3b3JrX3JwYyc7XG5jb25zdCBTRVJWSUNFX0ZSQU1FV09SSzNfQ0hBTk5FTCA9ICdzZXJ2aWNlX2ZyYW1ld29yazNfcnBjJztcblxuY29uc3QgU0VSVklDRV9GUkFNRVdPUktfUlBDX1RJTUVPVVRfTVMgPSA2MCAqIDEwMDA7XG5jb25zdCBTRVJWSUNFU19DT05GSUdfUEFUSCA9IHBhdGgucmVzb2x2ZShQQUNLQUdFX1JPT1QsICdzZXJ2aWNlcy1jb25maWcuanNvbicpO1xuXG5mdW5jdGlvbiBsb2FkQ29uZmlncygpOiBBcnJheTxhbnk+IHtcbiAgbGV0IGNvbmZpZ0xpc3QgPSByZXF1aXJlKFNFUlZJQ0VTX0NPTkZJR19QQVRIKTtcblxuICBpZiAoZnMuaXNGaWxlU3luYyhDVVNUT01fU0VSVklDRVNfQ09ORklHX1BBVEgpKSB7XG4gICAgY29uc3QgY3VzdG9tQ29uZmlncyA9IHJlcXVpcmUoQ1VTVE9NX1NFUlZJQ0VTX0NPTkZJR19QQVRIKTtcbiAgICBjb25maWdMaXN0ID0gY29uZmlnTGlzdC5jb25jYXQoY3VzdG9tQ29uZmlncyk7XG4gIH1cblxuICByZXR1cm4gY29uZmlnTGlzdDtcbn1cblxuZnVuY3Rpb24gbG9hZENvbmZpZ3NPZlNlcnZpY2VXaXRoU2VydmljZUZyYW1ld29yaygpOiBBcnJheTxhbnk+IHtcbiAgcmV0dXJuIGxvYWRDb25maWdzKClcbiAgICAuZmlsdGVyKGNvbmZpZyA9PiBjb25maWcudXNlU2VydmljZUZyYW1ld29yaylcbiAgICAubWFwKGNvbmZpZyA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBjb25maWcubmFtZSxcbiAgICAgICAgZGVmaW5pdGlvbjogX3Jlc29sdmVTZXJ2aWNlQ29uZmlnUGF0aChjb25maWcuZGVmaW5pdGlvbiksXG4gICAgICAgIGltcGxlbWVudGF0aW9uOiBfcmVzb2x2ZVNlcnZpY2VDb25maWdQYXRoKGNvbmZpZy5pbXBsZW1lbnRhdGlvbiksXG4gICAgICB9O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBsb2FkQ29uZmlnc09mU2VydmljZVdpdGhvdXRTZXJ2aWNlRnJhbWV3b3JrKCk6IEFycmF5PHN0cmluZz4ge1xuICByZXR1cm4gbG9hZENvbmZpZ3MoKVxuICAgIC5maWx0ZXIoY29uZmlnID0+ICFjb25maWcudXNlU2VydmljZUZyYW1ld29yaylcbiAgICAubWFwKGNvbmZpZyA9PiBfcmVzb2x2ZVNlcnZpY2VDb25maWdQYXRoKGNvbmZpZy5wYXRoKSk7XG59XG5cbi8qKlxuICAqIFJlc29sdmUgc2VydmljZSBwYXRoIGRlZmluZWQgaW4gc2VydmljZS1jb25maWcuanNvbiB0byBhYnNvbHV0ZSBwYXRoLiBUaGUgc2VydmljZSBwYXRoIGNvdWxkXG4gICogYmUgaW4gb25lIG9mIGZvbGxvd2luZyBmb3JtczpcbiAgKiAgIDEuIEEgcGF0aCByZWxhdGl2ZSB0byB0aGUgZm9sZGVyIGNvbnRhaW5zIGBzZXJ2aWNlLWNvbmZpZy5qc29uYC5cbiAgKiAgIDIuIEFuIGFic29sdXRlIHBhdGguXG4gICogICAzLiBBIHBhdGggaW4gZm9ybSBvZiBgJGRlcGVuZGVuY3lfcGFja2FnZS9wYXRoL3RvL3NlcnZpY2VgLiBGb3IgZXhhbXBsZSxcbiAgKiAgICAgICdudWNsaWRlLWNvbW1vbnMvbGliL2FycmF5LmpzJy5cbiAgKi9cbmZ1bmN0aW9uIF9yZXNvbHZlU2VydmljZUNvbmZpZ1BhdGgoc2VydmljZUNvbmZpZ1BhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHJlcXVpcmUucmVzb2x2ZShzZXJ2aWNlQ29uZmlnUGF0aCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gcGF0aC5yZXNvbHZlKHBhdGguZGlybmFtZShTRVJWSUNFU19DT05GSUdfUEFUSCksIHNlcnZpY2VDb25maWdQYXRoKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbG9hZENvbmZpZ3NPZlNlcnZpY2VXaXRob3V0U2VydmljZUZyYW1ld29yayxcbiAgbG9hZENvbmZpZ3NPZlNlcnZpY2VXaXRoU2VydmljZUZyYW1ld29yayxcbiAgSEVBUlRCRUFUX0NIQU5ORUwsXG4gIFNFUlZJQ0VfRlJBTUVXT1JLX0VWRU5UX0NIQU5ORUwsXG4gIFNFUlZJQ0VfRlJBTUVXT1JLX1JQQ19DSEFOTkVMLFxuICBTRVJWSUNFX0ZSQU1FV09SS19SUENfVElNRU9VVF9NUyxcbiAgU0VSVklDRV9GUkFNRVdPUkszX0NIQU5ORUwsXG59O1xuIl19
