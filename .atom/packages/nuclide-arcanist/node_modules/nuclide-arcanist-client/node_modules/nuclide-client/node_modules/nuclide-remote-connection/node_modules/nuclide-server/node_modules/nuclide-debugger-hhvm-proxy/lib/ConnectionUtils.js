Object.defineProperty(exports, '__esModule', {
  value: true
});

var getHackRoot = _asyncToGenerator(function* (filePath) {
  return yield (0, _nuclideCommons.findNearestFile)('.hhconfig', filePath);
});

var setRootDirectoryUri = _asyncToGenerator(function* (directoryUri) {
  var hackRootDirectory = yield getHackRoot(directoryUri);
  (0, _utils.log)('setRootDirectoryUri: from ' + directoryUri + ' to ' + hackRootDirectory);
  var path = require('path');
  // TODO: make xdebug_includes.php path configurable from hhconfig.
  var hackDummyRequestFilePath = path.join(hackRootDirectory ? hackRootDirectory : '', '/scripts/xdebug_includes.php');

  // Use hackDummyRequestFilePath if possible.
  if (yield _nuclideCommons.fsPromise.exists(hackDummyRequestFilePath)) {
    dummyRequestFilePath = hackDummyRequestFilePath;
  }
});

exports.setRootDirectoryUri = setRootDirectoryUri;
exports.sendDummyRequest = sendDummyRequest;
exports.isDummyConnection = isDummyConnection;
exports.failConnection = failConnection;
exports.isCorrectConnection = isCorrectConnection;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _utils = require('./utils');

var _helpers = require('./helpers');

var _nuclideCommons = require('nuclide-commons');

'use babel';

var dummyRequestFilePath = 'php_only_xdebug_request.php';

function sendDummyRequest() {
  return (0, _helpers.launchPhpScriptWithXDebugEnabled)(dummyRequestFilePath);
}

function isDummyConnection(message) {
  var attributes = message.init.$;
  return attributes.fileuri.endsWith(dummyRequestFilePath);
}

function failConnection(socket, errorMessage) {
  (0, _utils.log)(errorMessage);
  socket.end();
  socket.destroy();
}

function isCorrectConnection(config, message) {
  var pid = config.pid;
  var idekeyRegex = config.idekeyRegex;
  var scriptRegex = config.scriptRegex;

  if (!message || !message.init || !message.init.$) {
    (0, _utils.logError)('Incorrect init');
    return false;
  }

  var init = message.init;
  if (!init.engine || !init.engine || !init.engine[0] || init.engine[0]._ !== 'xdebug') {
    (0, _utils.logError)('Incorrect engine');
    return false;
  }

  var attributes = init.$;
  if (attributes.xmlns !== 'urn:debugger_protocol_v1' || attributes['xmlns:xdebug'] !== 'http://xdebug.org/dbgp/xdebug' || attributes.language !== 'PHP') {
    (0, _utils.logError)('Incorrect attributes');
    return false;
  }

  return (!pid || attributes.appid === String(pid)) && (!idekeyRegex || new RegExp(idekeyRegex).test(attributes.idekey)) && (!scriptRegex || new RegExp(scriptRegex).test((0, _helpers.uriToPath)(attributes.fileuri)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWRlYnVnZ2VyLWhodm0tcHJveHkvbGliL0Nvbm5lY3Rpb25VdGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0lBbUJlLFdBQVcscUJBQTFCLFdBQTJCLFFBQWdCLEVBQW9CO0FBQzdELFNBQU8sTUFBTSxvQkFSSSxlQUFlLEVBUUgsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBQ3JEOztJQUVxQixtQkFBbUIscUJBQWxDLFdBQW1DLFlBQW9CLEVBQVc7QUFDdkUsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMxRCxhQWZNLEdBQUcsaUNBZXdCLFlBQVksWUFBTyxpQkFBaUIsQ0FBRyxDQUFDO0FBQ3pFLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFN0IsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUN2QyxpQkFBaUIsR0FBRyxpQkFBaUIsR0FBRyxFQUFFLEVBQzNDLDhCQUE4QixDQUMvQixDQUFDOzs7QUFHRixNQUFJLE1BQU0sZ0JBdEJKLFNBQVMsQ0FzQkssTUFBTSxDQUFDLHdCQUF3QixDQUFDLEVBQUU7QUFDcEQsd0JBQW9CLEdBQUcsd0JBQXdCLENBQUM7R0FDakQ7Q0FDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FCQTNCMkIsU0FBUzs7dUJBQ3FCLFdBQVc7OzhCQUM1QixpQkFBaUI7O0FBWjFELFdBQVcsQ0FBQzs7QUFpQlosSUFBSSxvQkFBb0IsR0FBRyw2QkFBNkIsQ0FBQzs7QUFzQmxELFNBQVMsZ0JBQWdCLEdBQWlCO0FBQy9DLFNBQU8sYUE3QkQsZ0NBQWdDLEVBNkJFLG9CQUFvQixDQUFDLENBQUM7Q0FDL0Q7O0FBRU0sU0FBUyxpQkFBaUIsQ0FBQyxPQUFlLEVBQVc7QUFDMUQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDbEMsU0FBTyxVQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0NBQzFEOztBQUVNLFNBQVMsY0FBYyxDQUFDLE1BQWMsRUFBRSxZQUFvQixFQUFRO0FBQ3pFLGFBdkNNLEdBQUcsRUF1Q0wsWUFBWSxDQUFDLENBQUM7QUFDbEIsUUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2IsUUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0NBQ2xCOztBQUVNLFNBQVMsbUJBQW1CLENBQUMsTUFBd0IsRUFBRSxPQUFlLEVBQVc7TUFDL0UsR0FBRyxHQUE4QixNQUFNLENBQXZDLEdBQUc7TUFBRSxXQUFXLEdBQWlCLE1BQU0sQ0FBbEMsV0FBVztNQUFFLFdBQVcsR0FBSSxNQUFNLENBQXJCLFdBQVc7O0FBQ3BDLE1BQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7QUFDaEQsZUEvQ1MsUUFBUSxFQStDUixnQkFBZ0IsQ0FBQyxDQUFDO0FBQzNCLFdBQU8sS0FBSyxDQUFDO0dBQ2Q7O0FBRUQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztBQUMxQixNQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtBQUNwRixlQXJEUyxRQUFRLEVBcURSLGtCQUFrQixDQUFDLENBQUM7QUFDN0IsV0FBTyxLQUFLLENBQUM7R0FDZDs7QUFFRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzFCLE1BQUksVUFBVSxDQUFDLEtBQUssS0FBSywwQkFBMEIsSUFDOUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxLQUFLLCtCQUErQixJQUM5RCxVQUFVLENBQUMsUUFBUSxLQUFLLEtBQUssRUFBRTtBQUNsQyxlQTdEUyxRQUFRLEVBNkRSLHNCQUFzQixDQUFDLENBQUM7QUFDakMsV0FBTyxLQUFLLENBQUM7R0FDZDs7QUFFRCxTQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksVUFBVSxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUEsS0FDN0MsQ0FBQyxXQUFXLElBQUksSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQSxBQUFDLEtBQ2hFLENBQUMsV0FBVyxJQUFJLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQWxFUixTQUFTLEVBa0VTLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQztDQUNqRiIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1kZWJ1Z2dlci1oaHZtLXByb3h5L2xpYi9Db25uZWN0aW9uVXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHtsb2csIGxvZ0Vycm9yfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7bGF1bmNoUGhwU2NyaXB0V2l0aFhEZWJ1Z0VuYWJsZWQsIHVyaVRvUGF0aH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7ZnNQcm9taXNlLCBmaW5kTmVhcmVzdEZpbGV9IGZyb20gJ251Y2xpZGUtY29tbW9ucyc7XG5cbmltcG9ydCB0eXBlIHtTb2NrZXR9IGZyb20gJ25ldCc7XG5pbXBvcnQgdHlwZSB7Q29ubmVjdGlvbkNvbmZpZ30gZnJvbSAnLi9EYmdwQ29ubmVjdG9yJztcblxubGV0IGR1bW15UmVxdWVzdEZpbGVQYXRoID0gJ3BocF9vbmx5X3hkZWJ1Z19yZXF1ZXN0LnBocCc7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEhhY2tSb290KGZpbGVQYXRoOiBzdHJpbmcpOiBQcm9taXNlPD9zdHJpbmc+IHtcbiAgcmV0dXJuIGF3YWl0IGZpbmROZWFyZXN0RmlsZSgnLmhoY29uZmlnJywgZmlsZVBhdGgpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0Um9vdERpcmVjdG9yeVVyaShkaXJlY3RvcnlVcmk6IHN0cmluZyk6IFByb21pc2Uge1xuICBjb25zdCBoYWNrUm9vdERpcmVjdG9yeSA9IGF3YWl0IGdldEhhY2tSb290KGRpcmVjdG9yeVVyaSk7XG4gIGxvZyhgc2V0Um9vdERpcmVjdG9yeVVyaTogZnJvbSAke2RpcmVjdG9yeVVyaX0gdG8gJHtoYWNrUm9vdERpcmVjdG9yeX1gKTtcbiAgY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbiAgLy8gVE9ETzogbWFrZSB4ZGVidWdfaW5jbHVkZXMucGhwIHBhdGggY29uZmlndXJhYmxlIGZyb20gaGhjb25maWcuXG4gIGNvbnN0IGhhY2tEdW1teVJlcXVlc3RGaWxlUGF0aCA9IHBhdGguam9pbihcbiAgICAoaGFja1Jvb3REaXJlY3RvcnkgPyBoYWNrUm9vdERpcmVjdG9yeSA6ICcnKSxcbiAgICAnL3NjcmlwdHMveGRlYnVnX2luY2x1ZGVzLnBocCdcbiAgKTtcblxuICAvLyBVc2UgaGFja0R1bW15UmVxdWVzdEZpbGVQYXRoIGlmIHBvc3NpYmxlLlxuICBpZiAoYXdhaXQgZnNQcm9taXNlLmV4aXN0cyhoYWNrRHVtbXlSZXF1ZXN0RmlsZVBhdGgpKSB7XG4gICAgZHVtbXlSZXF1ZXN0RmlsZVBhdGggPSBoYWNrRHVtbXlSZXF1ZXN0RmlsZVBhdGg7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbmREdW1teVJlcXVlc3QoKTogQ2hpbGRQcm9jZXNzIHtcbiAgcmV0dXJuIGxhdW5jaFBocFNjcmlwdFdpdGhYRGVidWdFbmFibGVkKGR1bW15UmVxdWVzdEZpbGVQYXRoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRHVtbXlDb25uZWN0aW9uKG1lc3NhZ2U6IE9iamVjdCk6IGJvb2xlYW4ge1xuICBjb25zdCBhdHRyaWJ1dGVzID0gbWVzc2FnZS5pbml0LiQ7XG4gIHJldHVybiBhdHRyaWJ1dGVzLmZpbGV1cmkuZW5kc1dpdGgoZHVtbXlSZXF1ZXN0RmlsZVBhdGgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmFpbENvbm5lY3Rpb24oc29ja2V0OiBTb2NrZXQsIGVycm9yTWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gIGxvZyhlcnJvck1lc3NhZ2UpO1xuICBzb2NrZXQuZW5kKCk7XG4gIHNvY2tldC5kZXN0cm95KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvcnJlY3RDb25uZWN0aW9uKGNvbmZpZzogQ29ubmVjdGlvbkNvbmZpZywgbWVzc2FnZTogT2JqZWN0KTogYm9vbGVhbiB7XG4gIGNvbnN0IHtwaWQsIGlkZWtleVJlZ2V4LCBzY3JpcHRSZWdleH0gPSBjb25maWc7XG4gIGlmICghbWVzc2FnZSB8fCAhbWVzc2FnZS5pbml0IHx8ICFtZXNzYWdlLmluaXQuJCkge1xuICAgIGxvZ0Vycm9yKCdJbmNvcnJlY3QgaW5pdCcpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGluaXQgPSBtZXNzYWdlLmluaXQ7XG4gIGlmICghaW5pdC5lbmdpbmUgfHwgIWluaXQuZW5naW5lIHx8ICFpbml0LmVuZ2luZVswXSB8fCBpbml0LmVuZ2luZVswXS5fICE9PSAneGRlYnVnJykge1xuICAgIGxvZ0Vycm9yKCdJbmNvcnJlY3QgZW5naW5lJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgYXR0cmlidXRlcyA9IGluaXQuJDtcbiAgaWYgKGF0dHJpYnV0ZXMueG1sbnMgIT09ICd1cm46ZGVidWdnZXJfcHJvdG9jb2xfdjEnXG4gICAgfHwgYXR0cmlidXRlc1sneG1sbnM6eGRlYnVnJ10gIT09ICdodHRwOi8veGRlYnVnLm9yZy9kYmdwL3hkZWJ1ZydcbiAgICB8fCBhdHRyaWJ1dGVzLmxhbmd1YWdlICE9PSAnUEhQJykge1xuICAgIGxvZ0Vycm9yKCdJbmNvcnJlY3QgYXR0cmlidXRlcycpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiAoIXBpZCB8fCBhdHRyaWJ1dGVzLmFwcGlkID09PSBTdHJpbmcocGlkKSkgJiZcbiAgICAoIWlkZWtleVJlZ2V4IHx8IG5ldyBSZWdFeHAoaWRla2V5UmVnZXgpLnRlc3QoYXR0cmlidXRlcy5pZGVrZXkpKSAmJlxuICAgICghc2NyaXB0UmVnZXggfHwgbmV3IFJlZ0V4cChzY3JpcHRSZWdleCkudGVzdCh1cmlUb1BhdGgoYXR0cmlidXRlcy5maWxldXJpKSkpO1xufVxuIl19
