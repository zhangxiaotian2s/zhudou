
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var path = require('path');

var _require = require('child_process');

var spawnSync = _require.spawnSync;

function getApmNodePath() {
  var apmDir = path.dirname(atom.packages.getApmPath());
  return path.normalize(path.join(apmDir, 'node'));
}

function getApmNodeModulesPath() {
  var apmDir = path.dirname(atom.packages.getApmPath());
  return path.normalize(path.join(apmDir, '..', 'node_modules'));
}

function runScriptInApmNode(script) {
  var args = ['-e', script];
  var options = { env: { NODE_PATH: getApmNodeModulesPath() } };
  var output = spawnSync(getApmNodePath(), args, options);
  return output.stdout.toString();
}

function getPassword(service, account) {
  var script = '\n    var keytar = require(\'keytar\');\n    var service = ' + JSON.stringify(service) + ';\n    var account = ' + JSON.stringify(account) + ';\n    var password = keytar.getPassword(service, account);\n    console.log(JSON.stringify(password));\n  ';
  return JSON.parse(runScriptInApmNode(script));
}

function replacePassword(service, account, password) {
  var script = '\n    var keytar = require(\'keytar\');\n    var service = ' + JSON.stringify(service) + ';\n    var account = ' + JSON.stringify(account) + ';\n    var password = ' + JSON.stringify(password) + ';\n    var result = keytar.replacePassword(service, account, password);\n    console.log(JSON.stringify(result));\n  ';
  return JSON.parse(runScriptInApmNode(script));
}

module.exports = {
  getPassword: getPassword,
  replacePassword: replacePassword,
  __test__: {
    runScriptInApmNode: runScriptInApmNode,
    getApmNodePath: getApmNodePath,
    getApmNodeModulesPath: getApmNodeModulesPath
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWtleXRhci13cmFwcGVyL2xpYi9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7OztBQVdaLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs7ZUFDVCxPQUFPLENBQUMsZUFBZSxDQUFDOztJQUFyQyxTQUFTLFlBQVQsU0FBUzs7QUFFaEIsU0FBUyxjQUFjLEdBQUc7QUFDeEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDeEQsU0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7Q0FDbEQ7O0FBRUQsU0FBUyxxQkFBcUIsR0FBRztBQUMvQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUN4RCxTQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7Q0FDaEU7O0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxNQUFjLEVBQUU7QUFDMUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDNUIsTUFBTSxPQUFPLEdBQUcsRUFBQyxHQUFHLEVBQUUsRUFBQyxTQUFTLEVBQUUscUJBQXFCLEVBQUUsRUFBQyxFQUFDLENBQUM7QUFDNUQsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLGNBQWMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMxRCxTQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7Q0FDakM7O0FBRUQsU0FBUyxXQUFXLENBQUMsT0FBZSxFQUFFLE9BQWUsRUFBVztBQUM5RCxNQUFNLE1BQU0sbUVBRU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsNkJBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGdIQUd4QyxDQUFDO0FBQ0YsU0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Q0FDL0M7O0FBRUQsU0FBUyxlQUFlLENBQ3BCLE9BQWUsRUFDZixPQUFlLEVBQ2YsUUFBZ0IsRUFBWTtBQUM5QixNQUFNLE1BQU0sbUVBRU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsNkJBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLDhCQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQywwSEFHMUMsQ0FBQztBQUNGLFNBQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0NBQy9DOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZixhQUFXLEVBQVgsV0FBVztBQUNYLGlCQUFlLEVBQWYsZUFBZTtBQUNmLFVBQVEsRUFBRTtBQUNSLHNCQUFrQixFQUFsQixrQkFBa0I7QUFDbEIsa0JBQWMsRUFBZCxjQUFjO0FBQ2QseUJBQXFCLEVBQXJCLHFCQUFxQjtHQUN0QjtDQUNGLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUta2V5dGFyLXdyYXBwZXIvbGliL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3Qge3NwYXduU3luY30gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7XG5cbmZ1bmN0aW9uIGdldEFwbU5vZGVQYXRoKCkge1xuICBjb25zdCBhcG1EaXIgPSBwYXRoLmRpcm5hbWUoYXRvbS5wYWNrYWdlcy5nZXRBcG1QYXRoKCkpO1xuICByZXR1cm4gcGF0aC5ub3JtYWxpemUocGF0aC5qb2luKGFwbURpciwgJ25vZGUnKSk7XG59XG5cbmZ1bmN0aW9uIGdldEFwbU5vZGVNb2R1bGVzUGF0aCgpIHtcbiAgY29uc3QgYXBtRGlyID0gcGF0aC5kaXJuYW1lKGF0b20ucGFja2FnZXMuZ2V0QXBtUGF0aCgpKTtcbiAgcmV0dXJuIHBhdGgubm9ybWFsaXplKHBhdGguam9pbihhcG1EaXIsICcuLicsICdub2RlX21vZHVsZXMnKSk7XG59XG5cbmZ1bmN0aW9uIHJ1blNjcmlwdEluQXBtTm9kZShzY3JpcHQ6IHN0cmluZykge1xuICBjb25zdCBhcmdzID0gWyctZScsIHNjcmlwdF07XG4gIGNvbnN0IG9wdGlvbnMgPSB7ZW52OiB7Tk9ERV9QQVRIOiBnZXRBcG1Ob2RlTW9kdWxlc1BhdGgoKX19O1xuICBjb25zdCBvdXRwdXQgPSBzcGF3blN5bmMoZ2V0QXBtTm9kZVBhdGgoKSwgYXJncywgb3B0aW9ucyk7XG4gIHJldHVybiBvdXRwdXQuc3Rkb3V0LnRvU3RyaW5nKCk7XG59XG5cbmZ1bmN0aW9uIGdldFBhc3N3b3JkKHNlcnZpY2U6IHN0cmluZywgYWNjb3VudDogc3RyaW5nKTogP3N0cmluZyB7XG4gIGNvbnN0IHNjcmlwdCA9IGBcbiAgICB2YXIga2V5dGFyID0gcmVxdWlyZSgna2V5dGFyJyk7XG4gICAgdmFyIHNlcnZpY2UgPSAke0pTT04uc3RyaW5naWZ5KHNlcnZpY2UpfTtcbiAgICB2YXIgYWNjb3VudCA9ICR7SlNPTi5zdHJpbmdpZnkoYWNjb3VudCl9O1xuICAgIHZhciBwYXNzd29yZCA9IGtleXRhci5nZXRQYXNzd29yZChzZXJ2aWNlLCBhY2NvdW50KTtcbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShwYXNzd29yZCkpO1xuICBgO1xuICByZXR1cm4gSlNPTi5wYXJzZShydW5TY3JpcHRJbkFwbU5vZGUoc2NyaXB0KSk7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VQYXNzd29yZChcbiAgICBzZXJ2aWNlOiBzdHJpbmcsXG4gICAgYWNjb3VudDogc3RyaW5nLFxuICAgIHBhc3N3b3JkOiBzdHJpbmcpOiA/Ym9vbGVhbiB7XG4gIGNvbnN0IHNjcmlwdCA9IGBcbiAgICB2YXIga2V5dGFyID0gcmVxdWlyZSgna2V5dGFyJyk7XG4gICAgdmFyIHNlcnZpY2UgPSAke0pTT04uc3RyaW5naWZ5KHNlcnZpY2UpfTtcbiAgICB2YXIgYWNjb3VudCA9ICR7SlNPTi5zdHJpbmdpZnkoYWNjb3VudCl9O1xuICAgIHZhciBwYXNzd29yZCA9ICR7SlNPTi5zdHJpbmdpZnkocGFzc3dvcmQpfTtcbiAgICB2YXIgcmVzdWx0ID0ga2V5dGFyLnJlcGxhY2VQYXNzd29yZChzZXJ2aWNlLCBhY2NvdW50LCBwYXNzd29yZCk7XG4gICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gIGA7XG4gIHJldHVybiBKU09OLnBhcnNlKHJ1blNjcmlwdEluQXBtTm9kZShzY3JpcHQpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldFBhc3N3b3JkLFxuICByZXBsYWNlUGFzc3dvcmQsXG4gIF9fdGVzdF9fOiB7XG4gICAgcnVuU2NyaXB0SW5BcG1Ob2RlLFxuICAgIGdldEFwbU5vZGVQYXRoLFxuICAgIGdldEFwbU5vZGVNb2R1bGVzUGF0aCxcbiAgfSxcbn07XG4iXX0=
