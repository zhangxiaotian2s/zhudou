// An example counter service that contains a constructor + some basic methods.
export type CounterChangeEvent = {
  type: string;
  oldValue: number;
  newValue: number;
};

export class Counter {
  // Create a new counter with the given initial count.
  constructor(initialCount: number) {}

  // Get the current value of a counter.
  getCount(): Promise<number> {}

  // Add the specified value to the counter's count.
  addCount(x: number): Promise<void> {}

  // List all of the counters that have been created.
  static listCounters(): Promise<Array<Counter>> {}

  // Subscribe to changes in the counter.
  watchChanges(): Observable<CounterChangeEvent> {}

  // Watch added counters.
  static watchNewCounters(): Observable<Counter> {}

  // A static method that takes a Counter object as an argument.
  static indexOf(counter: Counter): Promise<number> {}
}
