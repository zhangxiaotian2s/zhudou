
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

Object.defineProperty(exports, '__esModule', {
  value: true
});

var keyMirror = require('nuclide-commons').object.keyMirror;

// Maps clang's cursor types to the actual declaration types: for a full list see
// https://github.com/llvm-mirror/clang/blob/master/include/clang/Basic/DeclNodes.td
//
// Keep in sync with the clang Python binding (../fb/lib/python/clang/cindex.py)
// The order of the keys matches the ordering in cindex.py.
var ClangCursorToDeclarationTypes = {
  UNEXPOSED_DECL: '',
  STRUCT_DECL: 'Record',
  UNION_DECL: 'Record',
  CLASS_DECL: 'CXXRecord',
  ENUM_DECL: 'Enum',
  FIELD_DECL: 'Field',
  ENUM_CONSTANT_DECL: 'EnumConstant',
  FUNCTION_DECL: 'Function',
  VAR_DECL: 'Var',
  PARM_DECL: 'ParmVar',
  OBJC_INTERFACE_DECL: 'ObjCInterface',
  OBJC_CATEGORY_DECL: 'ObjCCategory',
  OBJC_PROTOCOL_DECL: 'ObjCProtocol',
  OBJC_PROPERTY_DECL: 'ObjCProperty',
  OBJC_IVAR_DECL: 'ObjCIVar',
  OBJC_INSTANCE_METHOD_DECL: 'ObjCMethod',
  OBJC_CLASS_METHOD_DECL: 'ObjCMethod',
  OBJC_IMPLEMENTATION_DECL: 'ObjCImplementation',
  OBJC_CATEGORY_IMPL_DECL: 'ObjCCategoryImpl',
  TYPEDEF_DECL: 'Typedef',
  CXX_METHOD: 'CXXMethod',
  NAMESPACE: 'Namespace',
  LINKAGE_SPEC: 'LinkageSpec',
  CONSTRUCTOR: 'CXXConstructor',
  DESTRUCTOR: 'CXXDestructor',
  CONVERSION_FUNCTION: 'CXXConversion',
  TEMPLATE_TYPE_PARAMETER: 'TemplateTypeParm',
  TEMPLATE_NON_TYPE_PARAMETER: 'NonTypeTemplateParm',
  TEMPLATE_TEMPLATE_PARAMETER: 'TemplateTemplateParm',
  FUNCTION_TEMPLATE: 'FunctionTemplate',
  CLASS_TEMPLATE: 'ClassTemplate',
  CLASS_TEMPLATE_PARTIAL_SPECIALIZATION: 'ClassTemplatePartialSpecialization',
  NAMESPACE_ALIAS: 'NamespaceAlias',
  USING_DIRECTIVE: 'UsingDirective',
  USING_DECLARATION: 'Using',
  TYPE_ALIAS_DECL: 'TypeAlias',
  OBJC_SYNTHESIZE_DECL: 'ObjCSynthesize',
  OBJC_DYNAMIC_DECL: 'ObjCDynamic',
  CXX_ACCESS_SPEC_DECL: 'AccessSpec'
};

// Fetches information for a declaration and all its parents.
// The first element in info will be for the declaration itself,
// the second will be for its direct semantic parent (if it exists), etc.

var ClangCursorTypes = keyMirror(ClangCursorToDeclarationTypes);

module.exports = {
  ClangCursorToDeclarationTypes: ClangCursorToDeclarationTypes,
  ClangCursorTypes: ClangCursorTypes
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNsYW5nL2xpYi9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7SUFXTCxTQUFTLEdBQUksT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsTUFBTSxDQUE5QyxTQUFTOzs7Ozs7O0FBT2hCLElBQU0sNkJBQTZCLEdBQUc7QUFDcEMsZ0JBQWMsRUFBRSxFQUFFO0FBQ2xCLGFBQVcsRUFBRSxRQUFRO0FBQ3JCLFlBQVUsRUFBRSxRQUFRO0FBQ3BCLFlBQVUsRUFBRSxXQUFXO0FBQ3ZCLFdBQVMsRUFBRSxNQUFNO0FBQ2pCLFlBQVUsRUFBRSxPQUFPO0FBQ25CLG9CQUFrQixFQUFFLGNBQWM7QUFDbEMsZUFBYSxFQUFFLFVBQVU7QUFDekIsVUFBUSxFQUFFLEtBQUs7QUFDZixXQUFTLEVBQUUsU0FBUztBQUNwQixxQkFBbUIsRUFBRSxlQUFlO0FBQ3BDLG9CQUFrQixFQUFFLGNBQWM7QUFDbEMsb0JBQWtCLEVBQUUsY0FBYztBQUNsQyxvQkFBa0IsRUFBRSxjQUFjO0FBQ2xDLGdCQUFjLEVBQUUsVUFBVTtBQUMxQiwyQkFBeUIsRUFBRSxZQUFZO0FBQ3ZDLHdCQUFzQixFQUFFLFlBQVk7QUFDcEMsMEJBQXdCLEVBQUUsb0JBQW9CO0FBQzlDLHlCQUF1QixFQUFFLGtCQUFrQjtBQUMzQyxjQUFZLEVBQUUsU0FBUztBQUN2QixZQUFVLEVBQUUsV0FBVztBQUN2QixXQUFTLEVBQUUsV0FBVztBQUN0QixjQUFZLEVBQUUsYUFBYTtBQUMzQixhQUFXLEVBQUUsZ0JBQWdCO0FBQzdCLFlBQVUsRUFBRSxlQUFlO0FBQzNCLHFCQUFtQixFQUFFLGVBQWU7QUFDcEMseUJBQXVCLEVBQUUsa0JBQWtCO0FBQzNDLDZCQUEyQixFQUFFLHFCQUFxQjtBQUNsRCw2QkFBMkIsRUFBRSxzQkFBc0I7QUFDbkQsbUJBQWlCLEVBQUUsa0JBQWtCO0FBQ3JDLGdCQUFjLEVBQUUsZUFBZTtBQUMvQix1Q0FBcUMsRUFBRSxvQ0FBb0M7QUFDM0UsaUJBQWUsRUFBRSxnQkFBZ0I7QUFDakMsaUJBQWUsRUFBRSxnQkFBZ0I7QUFDakMsbUJBQWlCLEVBQUUsT0FBTztBQUMxQixpQkFBZSxFQUFFLFdBQVc7QUFDNUIsc0JBQW9CLEVBQUUsZ0JBQWdCO0FBQ3RDLG1CQUFpQixFQUFFLGFBQWE7QUFDaEMsc0JBQW9CLEVBQUUsWUFBWTtDQUNuQyxDQUFDOzs7Ozs7QUE0QkYsSUFBTSxnQkFBMkQsR0FDL0QsU0FBUyxDQUFDLDZCQUE2QixDQUFDLENBQUM7O0FBRTNDLE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZiwrQkFBNkIsRUFBN0IsNkJBQTZCO0FBQzdCLGtCQUFnQixFQUFoQixnQkFBZ0I7Q0FDakIsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1jbGFuZy9saWIvbWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNvbnN0IHtrZXlNaXJyb3J9ID0gcmVxdWlyZSgnbnVjbGlkZS1jb21tb25zJykub2JqZWN0O1xuXG4vLyBNYXBzIGNsYW5nJ3MgY3Vyc29yIHR5cGVzIHRvIHRoZSBhY3R1YWwgZGVjbGFyYXRpb24gdHlwZXM6IGZvciBhIGZ1bGwgbGlzdCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9sbHZtLW1pcnJvci9jbGFuZy9ibG9iL21hc3Rlci9pbmNsdWRlL2NsYW5nL0Jhc2ljL0RlY2xOb2Rlcy50ZFxuLy9cbi8vIEtlZXAgaW4gc3luYyB3aXRoIHRoZSBjbGFuZyBQeXRob24gYmluZGluZyAoLi4vZmIvbGliL3B5dGhvbi9jbGFuZy9jaW5kZXgucHkpXG4vLyBUaGUgb3JkZXIgb2YgdGhlIGtleXMgbWF0Y2hlcyB0aGUgb3JkZXJpbmcgaW4gY2luZGV4LnB5LlxuY29uc3QgQ2xhbmdDdXJzb3JUb0RlY2xhcmF0aW9uVHlwZXMgPSB7XG4gIFVORVhQT1NFRF9ERUNMOiAnJyxcbiAgU1RSVUNUX0RFQ0w6ICdSZWNvcmQnLFxuICBVTklPTl9ERUNMOiAnUmVjb3JkJyxcbiAgQ0xBU1NfREVDTDogJ0NYWFJlY29yZCcsXG4gIEVOVU1fREVDTDogJ0VudW0nLFxuICBGSUVMRF9ERUNMOiAnRmllbGQnLFxuICBFTlVNX0NPTlNUQU5UX0RFQ0w6ICdFbnVtQ29uc3RhbnQnLFxuICBGVU5DVElPTl9ERUNMOiAnRnVuY3Rpb24nLFxuICBWQVJfREVDTDogJ1ZhcicsXG4gIFBBUk1fREVDTDogJ1Bhcm1WYXInLFxuICBPQkpDX0lOVEVSRkFDRV9ERUNMOiAnT2JqQ0ludGVyZmFjZScsXG4gIE9CSkNfQ0FURUdPUllfREVDTDogJ09iakNDYXRlZ29yeScsXG4gIE9CSkNfUFJPVE9DT0xfREVDTDogJ09iakNQcm90b2NvbCcsXG4gIE9CSkNfUFJPUEVSVFlfREVDTDogJ09iakNQcm9wZXJ0eScsXG4gIE9CSkNfSVZBUl9ERUNMOiAnT2JqQ0lWYXInLFxuICBPQkpDX0lOU1RBTkNFX01FVEhPRF9ERUNMOiAnT2JqQ01ldGhvZCcsXG4gIE9CSkNfQ0xBU1NfTUVUSE9EX0RFQ0w6ICdPYmpDTWV0aG9kJyxcbiAgT0JKQ19JTVBMRU1FTlRBVElPTl9ERUNMOiAnT2JqQ0ltcGxlbWVudGF0aW9uJyxcbiAgT0JKQ19DQVRFR09SWV9JTVBMX0RFQ0w6ICdPYmpDQ2F0ZWdvcnlJbXBsJyxcbiAgVFlQRURFRl9ERUNMOiAnVHlwZWRlZicsXG4gIENYWF9NRVRIT0Q6ICdDWFhNZXRob2QnLFxuICBOQU1FU1BBQ0U6ICdOYW1lc3BhY2UnLFxuICBMSU5LQUdFX1NQRUM6ICdMaW5rYWdlU3BlYycsXG4gIENPTlNUUlVDVE9SOiAnQ1hYQ29uc3RydWN0b3InLFxuICBERVNUUlVDVE9SOiAnQ1hYRGVzdHJ1Y3RvcicsXG4gIENPTlZFUlNJT05fRlVOQ1RJT046ICdDWFhDb252ZXJzaW9uJyxcbiAgVEVNUExBVEVfVFlQRV9QQVJBTUVURVI6ICdUZW1wbGF0ZVR5cGVQYXJtJyxcbiAgVEVNUExBVEVfTk9OX1RZUEVfUEFSQU1FVEVSOiAnTm9uVHlwZVRlbXBsYXRlUGFybScsXG4gIFRFTVBMQVRFX1RFTVBMQVRFX1BBUkFNRVRFUjogJ1RlbXBsYXRlVGVtcGxhdGVQYXJtJyxcbiAgRlVOQ1RJT05fVEVNUExBVEU6ICdGdW5jdGlvblRlbXBsYXRlJyxcbiAgQ0xBU1NfVEVNUExBVEU6ICdDbGFzc1RlbXBsYXRlJyxcbiAgQ0xBU1NfVEVNUExBVEVfUEFSVElBTF9TUEVDSUFMSVpBVElPTjogJ0NsYXNzVGVtcGxhdGVQYXJ0aWFsU3BlY2lhbGl6YXRpb24nLFxuICBOQU1FU1BBQ0VfQUxJQVM6ICdOYW1lc3BhY2VBbGlhcycsXG4gIFVTSU5HX0RJUkVDVElWRTogJ1VzaW5nRGlyZWN0aXZlJyxcbiAgVVNJTkdfREVDTEFSQVRJT046ICdVc2luZycsXG4gIFRZUEVfQUxJQVNfREVDTDogJ1R5cGVBbGlhcycsXG4gIE9CSkNfU1lOVEhFU0laRV9ERUNMOiAnT2JqQ1N5bnRoZXNpemUnLFxuICBPQkpDX0RZTkFNSUNfREVDTDogJ09iakNEeW5hbWljJyxcbiAgQ1hYX0FDQ0VTU19TUEVDX0RFQ0w6ICdBY2Nlc3NTcGVjJyxcbn07XG5cbmV4cG9ydCB0eXBlIENsYW5nQ3Vyc29yVHlwZSA9ICRFbnVtPHR5cGVvZiBDbGFuZ0N1cnNvclRvRGVjbGFyYXRpb25UeXBlcz47XG5cbmV4cG9ydCB0eXBlIENsYW5nQ3Vyc29yRXh0ZW50ID0ge1xuICBzdGFydDoge2xpbmU6IG51bWJlcjsgY29sdW1uOiBudW1iZXJ9O1xuICBlbmQ6IHtsaW5lOiBudW1iZXI7IGNvbHVtbjogbnVtYmVyfTtcbn07XG5cbmV4cG9ydCB0eXBlIERlY2xhcmF0aW9uID0ge1xuICBuYW1lOiBzdHJpbmcsXG4gIHR5cGU6IENsYW5nQ3Vyc29yVHlwZSxcbiAgY3Vyc29yX3VzcjogP3N0cmluZyxcbiAgZmlsZTogP051Y2xpZGVVcmksXG59O1xuXG4vLyBGZXRjaGVzIGluZm9ybWF0aW9uIGZvciBhIGRlY2xhcmF0aW9uIGFuZCBhbGwgaXRzIHBhcmVudHMuXG4vLyBUaGUgZmlyc3QgZWxlbWVudCBpbiBpbmZvIHdpbGwgYmUgZm9yIHRoZSBkZWNsYXJhdGlvbiBpdHNlbGYsXG4vLyB0aGUgc2Vjb25kIHdpbGwgYmUgZm9yIGl0cyBkaXJlY3Qgc2VtYW50aWMgcGFyZW50IChpZiBpdCBleGlzdHMpLCBldGMuXG5leHBvcnQgdHlwZSBEZWNsYXJhdGlvbkluZm8gPSB7XG4gIGZpbGU6IE51Y2xpZGVVcmksXG4gIGxpbmU6IG51bWJlcixcbiAgY29sdW1uOiBudW1iZXIsXG4gIGluZm86IEFycmF5PERlY2xhcmF0aW9uPixcbn07XG5cbmV4cG9ydCB0eXBlIE51Y2xpZGVVcmkgPSBzdHJpbmc7XG5cbmNvbnN0IENsYW5nQ3Vyc29yVHlwZXM6IHtba2V5OiBDbGFuZ0N1cnNvclR5cGVdOiBDbGFuZ0N1cnNvclR5cGV9ID1cbiAga2V5TWlycm9yKENsYW5nQ3Vyc29yVG9EZWNsYXJhdGlvblR5cGVzKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENsYW5nQ3Vyc29yVG9EZWNsYXJhdGlvblR5cGVzLFxuICBDbGFuZ0N1cnNvclR5cGVzLFxufTtcbiJdfQ==
