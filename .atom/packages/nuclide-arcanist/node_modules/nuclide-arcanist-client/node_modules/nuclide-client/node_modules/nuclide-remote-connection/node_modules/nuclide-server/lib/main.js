
// Swallow the error while runing in open sourced version.

var main = _asyncToGenerator(function* (args) {
  var serverStartTimer = (0, _nuclideAnalytics.startTracking)('nuclide-server:start');
  try {
    setupServer();
    var port = args.port;
    var key = args.key;
    var cert = args.cert;
    var ca = args.ca;

    if (key && cert && ca) {
      key = _fs2['default'].readFileSync(key);
      cert = _fs2['default'].readFileSync(cert);
      ca = _fs2['default'].readFileSync(ca);
    }
    var server = new _NuclideServer2['default']({
      port: port,
      serverKey: key,
      serverCertificate: cert,
      certificateAuthorityCertificate: ca,
      trackEventLoop: true
    });
    yield server.connect();
    serverStartTimer.onSuccess();
    logger.info('NuclideServer started on port ' + port + '.');
  } catch (e) {
    // Ensure logging is configured.
    yield (0, _nuclideLogging.initialUpdateConfig)();
    yield serverStartTimer.onError(e);
    logger.fatal(e);
    (0, _nuclideLogging.flushLogsAndExit)(1);
  }
}

// This should never happen because the server must be started with stderr redirected to a log file.
);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _nuclideLogging = require('nuclide-logging');

var _nuclideAnalytics = require('nuclide-analytics');

var _NuclideServer = require('./NuclideServer');

var _NuclideServer2 = _interopRequireDefault(_NuclideServer);

'use babel';

var DEFAULT_PORT = 9090;

var logger = (0, _nuclideLogging.getLogger)();

function setupServer() {
  try {
    require('./fb/setup').setupServer();
  } catch (e) {}
}

process.stderr.on('error', function (error) {
  throw new Error('Can not write to stderr! :' + error);
});

process.on('uncaughtException', function (err) {
  // Log the error and continue the server crash.
  logger.fatal('uncaughtException:', err);
  // According to the docs, we need to close our server when this happens once we logged or
  // handled it: https://nodejs.org/api/process.html#process_event_uncaughtexception
  (0, _nuclideLogging.flushLogsAndExit)(1);
});

// This works in io.js as of v2.4.0 (possibly earlier versions, as well). Support for this was
// introduced by https://github.com/nodejs/io.js/pull/758 in io.js.
//
// Unfortunately, the analogous change was rejected in Node v0.12.x:
// https://github.com/joyent/node/issues/8997.
//
// We include this code here in anticipation of the Node/io.js merger.
process.on('unhandledRejection', function (error, promise) {
  logger.error('Unhandled promise rejection ' + promise + '. Error:', error);
});

var argv = require('yargs')['default']('port', DEFAULT_PORT).argv;

main(argv);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUE0QmUsSUFBSSxxQkFBbkIsV0FBb0IsSUFBSSxFQUFFO0FBQ3hCLE1BQU0sZ0JBQWdCLEdBQUcsc0JBaEJuQixhQUFhLEVBZ0JvQixzQkFBc0IsQ0FBQyxDQUFDO0FBQy9ELE1BQUk7QUFDRixlQUFXLEVBQUUsQ0FBQztRQUNQLElBQUksR0FBSSxJQUFJLENBQVosSUFBSTtRQUNOLEdBQUcsR0FBYyxJQUFJLENBQXJCLEdBQUc7UUFBRSxJQUFJLEdBQVEsSUFBSSxDQUFoQixJQUFJO1FBQUUsRUFBRSxHQUFJLElBQUksQ0FBVixFQUFFOztBQUNsQixRQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksRUFBRSxFQUFFO0FBQ3JCLFNBQUcsR0FBRyxnQkFBRyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0IsVUFBSSxHQUFHLGdCQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QixRQUFFLEdBQUcsZ0JBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzFCO0FBQ0QsUUFBTSxNQUFNLEdBQUcsK0JBQWtCO0FBQy9CLFVBQUksRUFBSixJQUFJO0FBQ0osZUFBUyxFQUFFLEdBQUc7QUFDZCx1QkFBaUIsRUFBRSxJQUFJO0FBQ3ZCLHFDQUErQixFQUFFLEVBQUU7QUFDbkMsb0JBQWMsRUFBRSxJQUFJO0tBQ3JCLENBQUMsQ0FBQztBQUNILFVBQU0sTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3ZCLG9CQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQzdCLFVBQU0sQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0dBQzVELENBQUMsT0FBTyxDQUFDLEVBQUU7O0FBRVYsVUFBTSxvQkF2QzJCLG1CQUFtQixHQXVDekIsQ0FBQztBQUM1QixVQUFNLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQyxVQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLHdCQTFDZSxnQkFBZ0IsRUEwQ2QsQ0FBQyxDQUFDLENBQUM7R0FDckI7Q0FDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBN0NjLElBQUk7Ozs7OEJBQzRDLGlCQUFpQjs7Z0NBQ3BELG1CQUFtQjs7NkJBQ3JCLGlCQUFpQjs7OztBQWQzQyxXQUFXLENBQUM7O0FBZ0JaLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQzs7QUFFMUIsSUFBTSxNQUFNLEdBQUcsb0JBTlAsU0FBUyxHQU1TLENBQUM7O0FBRTNCLFNBQVMsV0FBVyxHQUFTO0FBQzNCLE1BQUk7QUFDRixXQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDckMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUVYO0NBQ0Y7O0FBaUNELE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFDLEtBQUssRUFBSztBQUNwQyxRQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixHQUFHLEtBQUssQ0FBQyxDQUFDO0NBQ3ZELENBQUMsQ0FBQzs7QUFFSCxPQUFPLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLFVBQUMsR0FBRyxFQUFLOztBQUV2QyxRQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxDQUFDOzs7QUFHeEMsc0JBeERpQixnQkFBZ0IsRUF3RGhCLENBQUMsQ0FBQyxDQUFDO0NBQ3JCLENBQUMsQ0FBQzs7Ozs7Ozs7O0FBU0gsT0FBTyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxVQUFDLEtBQUssRUFBRSxPQUFPLEVBQUs7QUFDbkQsUUFBTSxDQUFDLEtBQUssa0NBQWdDLE9BQU8sZUFBWSxLQUFLLENBQUMsQ0FBQztDQUN2RSxDQUFDLENBQUM7O0FBRUgsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUNqQixDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FDN0IsSUFBSSxDQUFDOztBQUVWLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1zZXJ2ZXIvbGliL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHtnZXRMb2dnZXIsIGZsdXNoTG9nc0FuZEV4aXQsIGluaXRpYWxVcGRhdGVDb25maWd9IGZyb20gJ251Y2xpZGUtbG9nZ2luZyc7XG5pbXBvcnQge3N0YXJ0VHJhY2tpbmd9IGZyb20gJ251Y2xpZGUtYW5hbHl0aWNzJztcbmltcG9ydCBOdWNsaWRlU2VydmVyIGZyb20gJy4vTnVjbGlkZVNlcnZlcic7XG5cbmNvbnN0IERFRkFVTFRfUE9SVCA9IDkwOTA7XG5cbmNvbnN0IGxvZ2dlciA9IGdldExvZ2dlcigpO1xuXG5mdW5jdGlvbiBzZXR1cFNlcnZlcigpOiB2b2lkIHtcbiAgdHJ5IHtcbiAgICByZXF1aXJlKCcuL2ZiL3NldHVwJykuc2V0dXBTZXJ2ZXIoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFN3YWxsb3cgdGhlIGVycm9yIHdoaWxlIHJ1bmluZyBpbiBvcGVuIHNvdXJjZWQgdmVyc2lvbi5cbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBtYWluKGFyZ3MpIHtcbiAgY29uc3Qgc2VydmVyU3RhcnRUaW1lciA9IHN0YXJ0VHJhY2tpbmcoJ251Y2xpZGUtc2VydmVyOnN0YXJ0Jyk7XG4gIHRyeSB7XG4gICAgc2V0dXBTZXJ2ZXIoKTtcbiAgICBjb25zdCB7cG9ydH0gPSBhcmdzO1xuICAgIGxldCB7a2V5LCBjZXJ0LCBjYX0gPSBhcmdzO1xuICAgIGlmIChrZXkgJiYgY2VydCAmJiBjYSkge1xuICAgICAga2V5ID0gZnMucmVhZEZpbGVTeW5jKGtleSk7XG4gICAgICBjZXJ0ID0gZnMucmVhZEZpbGVTeW5jKGNlcnQpO1xuICAgICAgY2EgPSBmcy5yZWFkRmlsZVN5bmMoY2EpO1xuICAgIH1cbiAgICBjb25zdCBzZXJ2ZXIgPSBuZXcgTnVjbGlkZVNlcnZlcih7XG4gICAgICBwb3J0LFxuICAgICAgc2VydmVyS2V5OiBrZXksXG4gICAgICBzZXJ2ZXJDZXJ0aWZpY2F0ZTogY2VydCxcbiAgICAgIGNlcnRpZmljYXRlQXV0aG9yaXR5Q2VydGlmaWNhdGU6IGNhLFxuICAgICAgdHJhY2tFdmVudExvb3A6IHRydWUsXG4gICAgfSk7XG4gICAgYXdhaXQgc2VydmVyLmNvbm5lY3QoKTtcbiAgICBzZXJ2ZXJTdGFydFRpbWVyLm9uU3VjY2VzcygpO1xuICAgIGxvZ2dlci5pbmZvKCdOdWNsaWRlU2VydmVyIHN0YXJ0ZWQgb24gcG9ydCAnICsgcG9ydCArICcuJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBFbnN1cmUgbG9nZ2luZyBpcyBjb25maWd1cmVkLlxuICAgIGF3YWl0IGluaXRpYWxVcGRhdGVDb25maWcoKTtcbiAgICBhd2FpdCBzZXJ2ZXJTdGFydFRpbWVyLm9uRXJyb3IoZSk7XG4gICAgbG9nZ2VyLmZhdGFsKGUpO1xuICAgIGZsdXNoTG9nc0FuZEV4aXQoMSk7XG4gIH1cbn1cblxuLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuIGJlY2F1c2UgdGhlIHNlcnZlciBtdXN0IGJlIHN0YXJ0ZWQgd2l0aCBzdGRlcnIgcmVkaXJlY3RlZCB0byBhIGxvZyBmaWxlLlxucHJvY2Vzcy5zdGRlcnIub24oJ2Vycm9yJywgKGVycm9yKSA9PiB7XG4gIHRocm93IG5ldyBFcnJvcignQ2FuIG5vdCB3cml0ZSB0byBzdGRlcnIhIDonICsgZXJyb3IpO1xufSk7XG5cbnByb2Nlc3Mub24oJ3VuY2F1Z2h0RXhjZXB0aW9uJywgKGVycikgPT4ge1xuICAvLyBMb2cgdGhlIGVycm9yIGFuZCBjb250aW51ZSB0aGUgc2VydmVyIGNyYXNoLlxuICBsb2dnZXIuZmF0YWwoJ3VuY2F1Z2h0RXhjZXB0aW9uOicsIGVycik7XG4gIC8vIEFjY29yZGluZyB0byB0aGUgZG9jcywgd2UgbmVlZCB0byBjbG9zZSBvdXIgc2VydmVyIHdoZW4gdGhpcyBoYXBwZW5zIG9uY2Ugd2UgbG9nZ2VkIG9yXG4gIC8vIGhhbmRsZWQgaXQ6IGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvcHJvY2Vzcy5odG1sI3Byb2Nlc3NfZXZlbnRfdW5jYXVnaHRleGNlcHRpb25cbiAgZmx1c2hMb2dzQW5kRXhpdCgxKTtcbn0pO1xuXG4vLyBUaGlzIHdvcmtzIGluIGlvLmpzIGFzIG9mIHYyLjQuMCAocG9zc2libHkgZWFybGllciB2ZXJzaW9ucywgYXMgd2VsbCkuIFN1cHBvcnQgZm9yIHRoaXMgd2FzXG4vLyBpbnRyb2R1Y2VkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvaW8uanMvcHVsbC83NTggaW4gaW8uanMuXG4vL1xuLy8gVW5mb3J0dW5hdGVseSwgdGhlIGFuYWxvZ291cyBjaGFuZ2Ugd2FzIHJlamVjdGVkIGluIE5vZGUgdjAuMTIueDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvODk5Ny5cbi8vXG4vLyBXZSBpbmNsdWRlIHRoaXMgY29kZSBoZXJlIGluIGFudGljaXBhdGlvbiBvZiB0aGUgTm9kZS9pby5qcyBtZXJnZXIuXG5wcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCAoZXJyb3IsIHByb21pc2UpID0+IHtcbiAgbG9nZ2VyLmVycm9yKGBVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24gJHtwcm9taXNlfS4gRXJyb3I6YCwgZXJyb3IpO1xufSk7XG5cbmNvbnN0IGFyZ3YgPSByZXF1aXJlKCd5YXJncycpXG4gICAgLmRlZmF1bHQoJ3BvcnQnLCBERUZBVUxUX1BPUlQpXG4gICAgLmFyZ3Y7XG5cbm1haW4oYXJndik7XG4iXX0=
