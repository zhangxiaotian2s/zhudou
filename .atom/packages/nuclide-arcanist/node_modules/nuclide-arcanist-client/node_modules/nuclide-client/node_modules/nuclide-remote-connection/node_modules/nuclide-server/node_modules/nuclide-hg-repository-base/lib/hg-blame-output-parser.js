
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * We choose a length that should be long enough to uniquely identify a ChangeSet with an Hg repo,
 * while also being compact enough to display efficiently in a UI.
 */
var CHANGE_SET_ID_PREFIX_LENGTH = 8;
var HG_BLAME_ERROR_MESSAGE_START = '[abort: ';

/**
 * Parses the output of `hg blame -r "wdir()" -T json --changeset --user --line-number <filename>`.
 * @return A Map that maps line numbers (0-indexed) to the blame info for the line.
 *   The blame info is of the form: "Firstname Lastname <username@email.com> ChangeSetID".
 *   (The Firstname Lastname may not appear sometimes.)
 *   The ChangeSetID will not be the full 40 digit hexadecimal number, but a prefix whose length is
 *   determined by CHANGE_SET_ID_PREFIX_LENGTH.
 */
function parseHgBlameOutput(output) {
  var results = new Map();

  if (output.startsWith(HG_BLAME_ERROR_MESSAGE_START)) {
    return results;
  }

  var arrayOfLineDescriptions = undefined;
  try {
    arrayOfLineDescriptions = JSON.parse(output);
  } catch (e) {
    // The error message may change. An error will return non-JSON.
    return results;
  }
  arrayOfLineDescriptions.forEach(function (lineDescription, index) {
    var changeSetId = lineDescription['node'];
    if (changeSetId != null) {
      changeSetId = changeSetId.substring(0, CHANGE_SET_ID_PREFIX_LENGTH);
    }
    results.set(index.toString(), lineDescription['user'] + ' ' + changeSetId);
  });

  return results;
}

module.exports = {
  parseHgBlameOutput: parseHgBlameOutput
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWhnLXJlcG9zaXRvcnktYmFzZS9saWIvaGctYmxhbWUtb3V0cHV0LXBhcnNlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7O0FBZVosSUFBTSwyQkFBMkIsR0FBRyxDQUFDLENBQUM7QUFDdEMsSUFBTSw0QkFBNEIsR0FBRyxVQUFVLENBQUM7Ozs7Ozs7Ozs7QUFVaEQsU0FBUyxrQkFBa0IsQ0FBQyxNQUFjLEVBQXVCO0FBQy9ELE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7O0FBRTFCLE1BQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyw0QkFBNEIsQ0FBQyxFQUFFO0FBQ25ELFdBQU8sT0FBTyxDQUFDO0dBQ2hCOztBQUVELE1BQUksdUJBQXVCLFlBQUEsQ0FBQztBQUM1QixNQUFJO0FBQ0YsMkJBQXVCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUM5QyxDQUFDLE9BQU8sQ0FBQyxFQUFFOztBQUVWLFdBQU8sT0FBTyxDQUFDO0dBQ2hCO0FBQ0QseUJBQXVCLENBQUMsT0FBTyxDQUFDLFVBQUMsZUFBZSxFQUFFLEtBQUssRUFBSztBQUMxRCxRQUFJLFdBQW9CLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25ELFFBQUksV0FBVyxJQUFJLElBQUksRUFBRTtBQUN2QixpQkFBVyxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLDJCQUEyQixDQUFDLENBQUM7S0FDckU7QUFDRCxXQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBSyxlQUFlLENBQUMsTUFBTSxDQUFDLFNBQUksV0FBVyxDQUFHLENBQUM7R0FDNUUsQ0FBQyxDQUFDOztBQUVILFNBQU8sT0FBTyxDQUFDO0NBQ2hCOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZixvQkFBa0IsRUFBbEIsa0JBQWtCO0NBQ25CLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtaGctcmVwb3NpdG9yeS1iYXNlL2xpYi9oZy1ibGFtZS1vdXRwdXQtcGFyc2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLyoqXG4gKiBXZSBjaG9vc2UgYSBsZW5ndGggdGhhdCBzaG91bGQgYmUgbG9uZyBlbm91Z2ggdG8gdW5pcXVlbHkgaWRlbnRpZnkgYSBDaGFuZ2VTZXQgd2l0aCBhbiBIZyByZXBvLFxuICogd2hpbGUgYWxzbyBiZWluZyBjb21wYWN0IGVub3VnaCB0byBkaXNwbGF5IGVmZmljaWVudGx5IGluIGEgVUkuXG4gKi9cbmNvbnN0IENIQU5HRV9TRVRfSURfUFJFRklYX0xFTkdUSCA9IDg7XG5jb25zdCBIR19CTEFNRV9FUlJPUl9NRVNTQUdFX1NUQVJUID0gJ1thYm9ydDogJztcblxuLyoqXG4gKiBQYXJzZXMgdGhlIG91dHB1dCBvZiBgaGcgYmxhbWUgLXIgXCJ3ZGlyKClcIiAtVCBqc29uIC0tY2hhbmdlc2V0IC0tdXNlciAtLWxpbmUtbnVtYmVyIDxmaWxlbmFtZT5gLlxuICogQHJldHVybiBBIE1hcCB0aGF0IG1hcHMgbGluZSBudW1iZXJzICgwLWluZGV4ZWQpIHRvIHRoZSBibGFtZSBpbmZvIGZvciB0aGUgbGluZS5cbiAqICAgVGhlIGJsYW1lIGluZm8gaXMgb2YgdGhlIGZvcm06IFwiRmlyc3RuYW1lIExhc3RuYW1lIDx1c2VybmFtZUBlbWFpbC5jb20+IENoYW5nZVNldElEXCIuXG4gKiAgIChUaGUgRmlyc3RuYW1lIExhc3RuYW1lIG1heSBub3QgYXBwZWFyIHNvbWV0aW1lcy4pXG4gKiAgIFRoZSBDaGFuZ2VTZXRJRCB3aWxsIG5vdCBiZSB0aGUgZnVsbCA0MCBkaWdpdCBoZXhhZGVjaW1hbCBudW1iZXIsIGJ1dCBhIHByZWZpeCB3aG9zZSBsZW5ndGggaXNcbiAqICAgZGV0ZXJtaW5lZCBieSBDSEFOR0VfU0VUX0lEX1BSRUZJWF9MRU5HVEguXG4gKi9cbmZ1bmN0aW9uIHBhcnNlSGdCbGFtZU91dHB1dChvdXRwdXQ6IHN0cmluZyk6IE1hcDxzdHJpbmcsIHN0cmluZz4ge1xuICBjb25zdCByZXN1bHRzID0gbmV3IE1hcCgpO1xuXG4gIGlmIChvdXRwdXQuc3RhcnRzV2l0aChIR19CTEFNRV9FUlJPUl9NRVNTQUdFX1NUQVJUKSkge1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG5cbiAgbGV0IGFycmF5T2ZMaW5lRGVzY3JpcHRpb25zO1xuICB0cnkge1xuICAgIGFycmF5T2ZMaW5lRGVzY3JpcHRpb25zID0gSlNPTi5wYXJzZShvdXRwdXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gVGhlIGVycm9yIG1lc3NhZ2UgbWF5IGNoYW5nZS4gQW4gZXJyb3Igd2lsbCByZXR1cm4gbm9uLUpTT04uXG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cbiAgYXJyYXlPZkxpbmVEZXNjcmlwdGlvbnMuZm9yRWFjaCgobGluZURlc2NyaXB0aW9uLCBpbmRleCkgPT4ge1xuICAgIGxldCBjaGFuZ2VTZXRJZDogP3N0cmluZyA9IGxpbmVEZXNjcmlwdGlvblsnbm9kZSddO1xuICAgIGlmIChjaGFuZ2VTZXRJZCAhPSBudWxsKSB7XG4gICAgICBjaGFuZ2VTZXRJZCA9IGNoYW5nZVNldElkLnN1YnN0cmluZygwLCBDSEFOR0VfU0VUX0lEX1BSRUZJWF9MRU5HVEgpO1xuICAgIH1cbiAgICByZXN1bHRzLnNldChpbmRleC50b1N0cmluZygpLCBgJHtsaW5lRGVzY3JpcHRpb25bJ3VzZXInXX0gJHtjaGFuZ2VTZXRJZH1gKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwYXJzZUhnQmxhbWVPdXRwdXQsXG59O1xuIl19
