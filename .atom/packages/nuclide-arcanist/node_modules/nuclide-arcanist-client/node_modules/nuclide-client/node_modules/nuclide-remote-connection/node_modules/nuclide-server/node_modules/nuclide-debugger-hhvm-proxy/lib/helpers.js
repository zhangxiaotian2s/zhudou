Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.base64Decode = base64Decode;
exports.makeDbgpMessage = makeDbgpMessage;
exports.makeMessage = makeMessage;
exports.pathToUri = pathToUri;
exports.uriToPath = uriToPath;
exports.launchPhpScriptWithXDebugEnabled = launchPhpScriptWithXDebugEnabled;

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _utils = require('./utils');

'use babel';
var DUMMY_FRAME_ID = 'Frame.0';

exports.DUMMY_FRAME_ID = DUMMY_FRAME_ID;

function base64Decode(value) {
  return new Buffer(value, 'base64').toString();
}

function makeDbgpMessage(message) {
  return String(message.length) + '\x00' + message + '\x00';
}

function makeMessage(obj, body) {
  body = body || '';
  var result = '<?xml version="1.0" encoding="iso-8859-1"?>' + '<response xmlns="urn:debugger_protocol_v1" xmlns:xdebug="http://xdebug.org/dbgp/xdebug"';
  for (var key in obj) {
    result += ' ' + key + '="' + obj[key] + '"';
  }
  result += '>' + body + '</response>';
  return makeDbgpMessage(result);
}

function pathToUri(path) {
  return 'file://' + path;
}

function uriToPath(uri) {
  var components = require('url').parse(uri);
  // Some filename returned from hhvm does not have protocol.
  if (components.protocol !== 'file:' && components.protocol !== null) {
    (0, _utils.logErrorAndThrow)('unexpected file protocol. Got: ' + components.protocol);
  }
  return components.pathname;
}

function launchPhpScriptWithXDebugEnabled(scriptPath) {
  var child_process = require('child_process');
  var args = ['-c', 'xdebug.ini', scriptPath];
  // TODO[jeffreytan]: make hhvm path configurable so that it will
  // work for non-FB environment.
  var proc = child_process.spawn('/usr/local/hphpi/bin/hhvm', args);
  (0, _utils.log)('child_process(' + proc.pid + ') spawned with xdebug enabled for: ' + scriptPath);

  proc.stdout.on('data', function (chunk) {
    // stdout should hopefully be set to line-buffering, in which case the

    var block = chunk.toString();
    var output = 'child_process(' + proc.pid + ') stdout: ' + block;
    (0, _utils.log)(output);
  });
  proc.on('error', function (err) {
    (0, _utils.log)('child_process(' + proc.pid + ') error: ' + err);
  });
  proc.on('exit', function (code) {
    (0, _utils.log)('child_process(' + proc.pid + ') exit: ' + code);
  });
  return proc;
}

// string would come on one line.
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWRlYnVnZ2VyLWhodm0tcHJveHkvbGliL2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FCQVdvQyxTQUFTOztBQVg3QyxXQUFXLENBQUM7QUFjTCxJQUFNLGNBQWMsR0FBRyxTQUFTLENBQUM7Ozs7QUFFakMsU0FBUyxZQUFZLENBQUMsS0FBYSxFQUFVO0FBQ2xELFNBQU8sSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0NBQy9DOztBQUVNLFNBQVMsZUFBZSxDQUFDLE9BQWUsRUFBVTtBQUN2RCxTQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxHQUFHLE9BQU8sR0FBRyxNQUFNLENBQUM7Q0FDM0Q7O0FBRU0sU0FBUyxXQUFXLENBQUMsR0FBVyxFQUFFLElBQWEsRUFBVTtBQUM5RCxNQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUNsQixNQUFJLE1BQU0sR0FBRyw2Q0FBNkMsR0FDeEQseUZBQXlGLENBQUM7QUFDNUYsT0FBSyxJQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUU7QUFDckIsVUFBTSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7R0FDN0M7QUFDRCxRQUFNLElBQUksR0FBRyxHQUFHLElBQUksR0FBRyxhQUFhLENBQUM7QUFDckMsU0FBTyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDaEM7O0FBRU0sU0FBUyxTQUFTLENBQUMsSUFBWSxFQUFVO0FBQzlDLFNBQU8sU0FBUyxHQUFHLElBQUksQ0FBQztDQUN6Qjs7QUFFTSxTQUFTLFNBQVMsQ0FBQyxHQUFXLEVBQVU7QUFDN0MsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzs7QUFFN0MsTUFBSSxVQUFVLENBQUMsUUFBUSxLQUFLLE9BQU8sSUFBSSxVQUFVLENBQUMsUUFBUSxLQUFLLElBQUksRUFBRTtBQUNuRSxlQWhDUyxnQkFBZ0IsRUFnQ1IsaUNBQWlDLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQzNFO0FBQ0QsU0FBTyxVQUFVLENBQUMsUUFBUSxDQUFDO0NBQzVCOztBQUVNLFNBQVMsZ0NBQWdDLENBQUMsVUFBa0IsRUFBZ0I7QUFDakYsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQy9DLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQzs7O0FBRzlDLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDcEUsYUEzQ00sR0FBRyxxQkEyQ1ksSUFBSSxDQUFDLEdBQUcsMkNBQXNDLFVBQVUsQ0FBRyxDQUFDOztBQUVqRixNQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBQSxLQUFLLEVBQUk7OztBQUc5QixRQUFNLEtBQWEsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDdkMsUUFBTSxNQUFNLHNCQUFvQixJQUFJLENBQUMsR0FBRyxrQkFBYSxLQUFLLEFBQUUsQ0FBQztBQUM3RCxlQWxESSxHQUFHLEVBa0RILE1BQU0sQ0FBQyxDQUFDO0dBQ2IsQ0FBQyxDQUFDO0FBQ0gsTUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBQSxHQUFHLEVBQUk7QUFDdEIsZUFyREksR0FBRyxxQkFxRGMsSUFBSSxDQUFDLEdBQUcsaUJBQVksR0FBRyxDQUFHLENBQUM7R0FDakQsQ0FBQyxDQUFDO0FBQ0gsTUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBQSxJQUFJLEVBQUk7QUFDdEIsZUF4REksR0FBRyxxQkF3RGMsSUFBSSxDQUFDLEdBQUcsZ0JBQVcsSUFBSSxDQUFHLENBQUM7R0FDakQsQ0FBQyxDQUFDO0FBQ0gsU0FBTyxJQUFJLENBQUM7Q0FDYiIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1kZWJ1Z2dlci1oaHZtLXByb3h5L2xpYi9oZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IHtsb2csIGxvZ0Vycm9yQW5kVGhyb3d9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHR5cGUge0NoaWxkUHJvY2Vzc30gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5cbmV4cG9ydCBjb25zdCBEVU1NWV9GUkFNRV9JRCA9ICdGcmFtZS4wJztcblxuZXhwb3J0IGZ1bmN0aW9uIGJhc2U2NERlY29kZSh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIG5ldyBCdWZmZXIodmFsdWUsICdiYXNlNjQnKS50b1N0cmluZygpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZURiZ3BNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBTdHJpbmcobWVzc2FnZS5sZW5ndGgpICsgJ1xceDAwJyArIG1lc3NhZ2UgKyAnXFx4MDAnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZU1lc3NhZ2Uob2JqOiBPYmplY3QsIGJvZHk6ID9zdHJpbmcpOiBzdHJpbmcge1xuICBib2R5ID0gYm9keSB8fCAnJztcbiAgbGV0IHJlc3VsdCA9ICc8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJpc28tODg1OS0xXCI/PicgK1xuICAgICc8cmVzcG9uc2UgeG1sbnM9XCJ1cm46ZGVidWdnZXJfcHJvdG9jb2xfdjFcIiB4bWxuczp4ZGVidWc9XCJodHRwOi8veGRlYnVnLm9yZy9kYmdwL3hkZWJ1Z1wiJztcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgcmVzdWx0ICs9ICcgJyArIGtleSArICc9XCInICsgb2JqW2tleV0gKyAnXCInO1xuICB9XG4gIHJlc3VsdCArPSAnPicgKyBib2R5ICsgJzwvcmVzcG9uc2U+JztcbiAgcmV0dXJuIG1ha2VEYmdwTWVzc2FnZShyZXN1bHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGF0aFRvVXJpKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiAnZmlsZTovLycgKyBwYXRoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXJpVG9QYXRoKHVyaTogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgY29tcG9uZW50cyA9IHJlcXVpcmUoJ3VybCcpLnBhcnNlKHVyaSk7XG4gIC8vIFNvbWUgZmlsZW5hbWUgcmV0dXJuZWQgZnJvbSBoaHZtIGRvZXMgbm90IGhhdmUgcHJvdG9jb2wuXG4gIGlmIChjb21wb25lbnRzLnByb3RvY29sICE9PSAnZmlsZTonICYmIGNvbXBvbmVudHMucHJvdG9jb2wgIT09IG51bGwpIHtcbiAgICBsb2dFcnJvckFuZFRocm93KCd1bmV4cGVjdGVkIGZpbGUgcHJvdG9jb2wuIEdvdDogJyArIGNvbXBvbmVudHMucHJvdG9jb2wpO1xuICB9XG4gIHJldHVybiBjb21wb25lbnRzLnBhdGhuYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGF1bmNoUGhwU2NyaXB0V2l0aFhEZWJ1Z0VuYWJsZWQoc2NyaXB0UGF0aDogc3RyaW5nKTogQ2hpbGRQcm9jZXNzIHtcbiAgY29uc3QgY2hpbGRfcHJvY2VzcyA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKTtcbiAgY29uc3QgYXJncyA9IFsnLWMnLCAneGRlYnVnLmluaScsIHNjcmlwdFBhdGhdO1xuICAvLyBUT0RPW2plZmZyZXl0YW5dOiBtYWtlIGhodm0gcGF0aCBjb25maWd1cmFibGUgc28gdGhhdCBpdCB3aWxsXG4gIC8vIHdvcmsgZm9yIG5vbi1GQiBlbnZpcm9ubWVudC5cbiAgY29uc3QgcHJvYyA9IGNoaWxkX3Byb2Nlc3Muc3Bhd24oJy91c3IvbG9jYWwvaHBocGkvYmluL2hodm0nLCBhcmdzKTtcbiAgbG9nKGBjaGlsZF9wcm9jZXNzKCR7cHJvYy5waWR9KSBzcGF3bmVkIHdpdGggeGRlYnVnIGVuYWJsZWQgZm9yOiAke3NjcmlwdFBhdGh9YCk7XG5cbiAgcHJvYy5zdGRvdXQub24oJ2RhdGEnLCBjaHVuayA9PiB7XG4gICAgLy8gc3Rkb3V0IHNob3VsZCBob3BlZnVsbHkgYmUgc2V0IHRvIGxpbmUtYnVmZmVyaW5nLCBpbiB3aGljaCBjYXNlIHRoZVxuICAgIC8vIHN0cmluZyB3b3VsZCBjb21lIG9uIG9uZSBsaW5lLlxuICAgIGNvbnN0IGJsb2NrOiBzdHJpbmcgPSBjaHVuay50b1N0cmluZygpO1xuICAgIGNvbnN0IG91dHB1dCA9IGBjaGlsZF9wcm9jZXNzKCR7cHJvYy5waWR9KSBzdGRvdXQ6ICR7YmxvY2t9YDtcbiAgICBsb2cob3V0cHV0KTtcbiAgfSk7XG4gIHByb2Mub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICBsb2coYGNoaWxkX3Byb2Nlc3MoJHtwcm9jLnBpZH0pIGVycm9yOiAke2Vycn1gKTtcbiAgfSk7XG4gIHByb2Mub24oJ2V4aXQnLCBjb2RlID0+IHtcbiAgICBsb2coYGNoaWxkX3Byb2Nlc3MoJHtwcm9jLnBpZH0pIGV4aXQ6ICR7Y29kZX1gKTtcbiAgfSk7XG4gIHJldHVybiBwcm9jO1xufVxuIl19
