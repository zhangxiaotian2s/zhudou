Object.defineProperty(exports, '__esModule', {
  value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _config = require('./config');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _serviceframework = require('./serviceframework');

var _serviceframework2 = _interopRequireDefault(_serviceframework);

var _nuclideLogging = require('nuclide-logging');

'use babel';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var blocked = require('./blocked');
var connect = require('connect');

var _require = require('./service-manager');

var getService = _require.getService;
var getRemoteEventName = _require.getRemoteEventName;

var http = require('http');
var https = require('https');

var _require2 = require('nuclide-service-transformer');

var parseServiceApiSync = _require2.parseServiceApiSync;

var _require3 = require('events');

var EventEmitter = _require3.EventEmitter;

var WebSocketServer = require('ws').Server;

var _require4 = require('./utils');

var deserializeArgs = _require4.deserializeArgs;
var sendJsonResponse = _require4.sendJsonResponse;
var sendTextResponse = _require4.sendTextResponse;

var _require5 = require('nuclide-version');

var getVersion = _require5.getVersion;

var logger = (0, _nuclideLogging.getLogger)();

var EVENT_HANDLE_REGISTERED = '_nuclideServerEventHandleRegstered';

var NuclideServer = (function () {
  function NuclideServer(options) {
    _classCallCheck(this, NuclideServer);

    (0, _assert2['default'])(NuclideServer._theServer == null);
    NuclideServer._theServer = this;

    var serverKey = options.serverKey;
    var serverCertificate = options.serverCertificate;
    var port = options.port;
    var certificateAuthorityCertificate = options.certificateAuthorityCertificate;
    var trackEventLoop = options.trackEventLoop;

    this._app = connect();
    this._attachUtilHandlers(this._app);
    if (serverKey && serverCertificate && certificateAuthorityCertificate) {
      var webServerOptions = {
        key: serverKey,
        cert: serverCertificate,
        ca: certificateAuthorityCertificate,
        requestCert: true,
        rejectUnauthorized: true
      };

      this._webServer = https.createServer(webServerOptions, this._app);
    } else {
      this._webServer = http.createServer(this._app);
    }
    this._port = port;

    this._webSocketServer = this._createWebSocketServer();
    this._clients = {};
    this._eventSubscriptions = new Map();

    this._setupServices(); // Setup 1.0 and 2.0 services.

    if (trackEventLoop) {
      blocked(function (ms) {
        logger.info('NuclideServer event loop blocked for ' + ms + 'ms');
      });
    }

    // Setup 3.0 services.
    this._serverComponent = new _serviceframework2['default'].ServerComponent(this);
  }

  _createClass(NuclideServer, [{
    key: '_attachUtilHandlers',
    value: function _attachUtilHandlers(app) {
      var _this = this;

      // Add specific method handlers.
      ['get', 'post', 'delete', 'put'].forEach(function (methodName) {
        _this._app[methodName] = function (uri, handler) {
          _this._app.use(uri, function (request, response, next) {
            if (request.method.toUpperCase() !== methodName.toUpperCase()) {
              // skip if method doesn't match.
              return next();
            } else {
              handler(request, response, next);
            }
          });
        };
      });
    }
  }, {
    key: '_createWebSocketServer',
    value: function _createWebSocketServer() {
      var _this2 = this;

      var webSocketServer = new WebSocketServer({ server: this._webServer });
      webSocketServer.on('connection', function (socket) {
        return _this2._onConnection(socket);
      });
      webSocketServer.on('error', function (error) {
        return logger.error('WebSocketServer Error:', error);
      });
      return webSocketServer;
    }
  }, {
    key: '_getServiceFrameworkServiceAndRegisterEventHandle',
    value: function _getServiceFrameworkServiceAndRegisterEventHandle(serviceConfig, serviceOptions) {
      var _this3 = this;

      var localServiceInstance = getService(serviceConfig.name, serviceOptions, serviceConfig.implementation);
      if (localServiceInstance[EVENT_HANDLE_REGISTERED]) {
        return localServiceInstance;
      }

      var serviceApi = parseServiceApiSync(serviceConfig.definition, serviceConfig.name);

      serviceApi.eventMethodNames.forEach(function (methodName) {
        localServiceInstance[methodName].call(localServiceInstance, function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var eventName = getRemoteEventName(serviceConfig.name, methodName, serviceOptions);
          (_this3._eventSubscriptions.get(eventName) || []).forEach(function (clientId) {
            var client = _this3._clients[clientId];

            if (!client) {
              logger.warn('Client with clientId: %s not found!', clientId);
              return;
            }

            _this3._sendSocketMessage(client, {
              channel: _config.SERVICE_FRAMEWORK_EVENT_CHANNEL,
              event: {
                name: eventName,
                args: args
              }
            });
          });
        });
      });
      Object.defineProperty(localServiceInstance, EVENT_HANDLE_REGISTERED, { value: true });

      return localServiceInstance;
    }
  }, {
    key: '_registerServiceWithServiceFramework',
    value: function _registerServiceWithServiceFramework(serviceConfig) {
      var _this4 = this;

      var serviceApi = parseServiceApiSync(serviceConfig.definition, serviceConfig.name);

      serviceApi.rpcMethodNames.forEach(function (methodName) {
        _this4._registerService('/' + serviceApi.className + '/' + methodName,

        // Take serviceOptions as first argument for serviceFramework service.
        // TODO(chenshen) seperate the logic of service initialization.
        function (serviceOptions) {
          for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          var localServiceInstance = _this4._getServiceFrameworkServiceAndRegisterEventHandle(serviceConfig, serviceOptions);
          return localServiceInstance[methodName].apply(localServiceInstance, args);
        }, 'post');
      });
    }
  }, {
    key: '_registerServiceWithoutServiceFramework',
    value: function _registerServiceWithoutServiceFramework(serviceFilePath) {
      var _require6 = require(serviceFilePath);

      var urlHandlers = _require6.urlHandlers;
      var services = _require6.services;
      var initialize = _require6.initialize;

      for (var serviceName in services) {
        var serviceConfig = services[serviceName];
        this._registerService(serviceName, serviceConfig.handler, serviceConfig.method, serviceConfig.text);
      }

      if (urlHandlers) {
        for (var url in urlHandlers) {
          var handlerConfig = urlHandlers[url];
          this._attachUrlHandler(url, handlerConfig.handler, handlerConfig.method);
        }
      }

      if (initialize) {
        initialize(this);
      }
    }
  }, {
    key: '_setupServices',
    value: function _setupServices() {
      var _this5 = this;

      // Lazy require these functions so that we could spyOn them while testing in
      // ServiceIntegrationTestHelper.

      var _require7 = require('./config');

      var loadConfigsOfServiceWithServiceFramework = _require7.loadConfigsOfServiceWithServiceFramework;
      var loadConfigsOfServiceWithoutServiceFramework = _require7.loadConfigsOfServiceWithoutServiceFramework;

      this._serviceRegistry = {};
      this._version = getVersion().toString();
      this._setupHeartbeatHandler();
      this._setupServiceFrameworkSubscriptionHandler();
      this._serviceWithoutServiceFrameworkConfigs = loadConfigsOfServiceWithoutServiceFramework();
      this._serviceWithServiceFrameworkConfigs = loadConfigsOfServiceWithServiceFramework();

      this._serviceWithoutServiceFrameworkConfigs.forEach(function (config) {
        _this5._registerServiceWithoutServiceFramework(config);
        logger.debug('Registered service ' + config + ' without ServiceFramework.');
      });

      this._serviceWithServiceFrameworkConfigs.forEach(function (config) {
        _this5._registerServiceWithServiceFramework(config);
        logger.debug('Registered service ' + config.name + ' with ServiceFramework.');
      });

      // Setup error handler.
      this._app.use(function (error, request, response, next) {
        if (error) {
          sendJsonResponse(response, { code: error.code, message: error.message }, 500);
        } else {
          next();
        }
      });
    }
  }, {
    key: '_setupHeartbeatHandler',
    value: function _setupHeartbeatHandler() {
      var _this6 = this;

      this._registerService('/' + _config.HEARTBEAT_CHANNEL, _asyncToGenerator(function* () {
        return _this6._version;
      }), 'post', true);
    }
  }, {
    key: '_setupServiceFrameworkSubscriptionHandler',
    value: function _setupServiceFrameworkSubscriptionHandler() {
      var _this7 = this;

      this._registerService('/serviceFramework/subscribeEvent', function (serviceOptions, clientId, serviceName, methodName) {

        // Create the service instance and register the event handle.

        var _serviceWithServiceFrameworkConfigs$filter = _this7._serviceWithServiceFrameworkConfigs.filter(function (config) {
          return config.name === serviceName;
        });

        var _serviceWithServiceFrameworkConfigs$filter2 = _slicedToArray(_serviceWithServiceFrameworkConfigs$filter, 1);

        var serviceConfig = _serviceWithServiceFrameworkConfigs$filter2[0];

        _this7._getServiceFrameworkServiceAndRegisterEventHandle(serviceConfig, serviceOptions);

        var eventName = getRemoteEventName(serviceName, methodName, serviceOptions);

        _this7._eventSubscriptions.set(eventName, (_this7._eventSubscriptions.get(eventName) || new Set()).add(clientId));

        logger.debug(clientId + ' subscribed to ' + eventName);
      }, 'post');

      this._registerService('/serviceFramework/unsubscribeEvent', function (serviceOptions, clientId, serviceName, methodName) {
        var eventName = getRemoteEventName(serviceName, methodName, serviceOptions);
        if (_this7._eventSubscriptions.has(eventName)) {
          _this7._eventSubscriptions.get(eventName)['delete'](clientId);
        }
        logger.debug(clientId + ' unsubscribed to ' + eventName);
      }, 'post');
    }
  }, {
    key: 'connect',
    value: function connect() {
      var _this8 = this;

      return new Promise(function (resolve, reject) {
        _this8._webServer.on('listening', function () {
          resolve();
        });
        _this8._webServer.on('error', function (e) {
          _this8._webServer.removeAllListeners();
          reject(e);
        });
        _this8._webServer.listen(_this8._port);
      });
    }

    /**
     * Calls a registered service with a name and arguments.
     */
  }, {
    key: 'callService',
    value: function callService(serviceName, args) {
      var serviceFunction = this._serviceRegistry[serviceName];
      if (!serviceFunction) {
        throw Error('No service registered with name: ' + serviceName);
      }
      return serviceFunction.apply(this, args);
    }

    /**
     * Registers a service function to a service name.
     * This allows simple future calls of the service by name and arguments or http-triggered endpoint calls
     * with arguments serialized over http.
     */
  }, {
    key: '_registerService',
    value: function _registerService(serviceName, serviceFunction, method, isTextResponse) {
      if (method === undefined) method = 'get';

      if (this._serviceRegistry[serviceName]) {
        throw new Error('A service with this name is already registered:', serviceName);
      }
      this._serviceRegistry[serviceName] = serviceFunction;
      this._registerHttpService(serviceName, method, isTextResponse);
    }
  }, {
    key: '_registerHttpService',
    value: function _registerHttpService(serviceName, method, isTextResponse) {
      var _this9 = this;

      var loweredCaseMethod = method.toLowerCase();
      this._app[loweredCaseMethod](serviceName, _asyncToGenerator(function* (request, response, next) {
        try {
          var result = yield _this9.callService(serviceName, deserializeArgs(request.url));
          if (isTextResponse) {
            sendTextResponse(response, result || '');
          } else {
            sendJsonResponse(response, result);
          }
        } catch (e) {
          // Delegate to the registered connect error handler.
          next(e);
        }
      }));
    }

    /**
     * Attach an explicit http connect handler for some services that need request/response related optimizations.
     * e.g. readFile and writeFile uses it to stream reading and writing files (perf improvement for big files).
     */
  }, {
    key: '_attachUrlHandler',
    value: function _attachUrlHandler(url, handler) {
      var method = arguments.length <= 2 || arguments[2] === undefined ? 'get' : arguments[2];

      this._app[method](url, handler);
    }
  }, {
    key: '_onConnection',
    value: function _onConnection(socket) {
      var _this10 = this;

      logger.debug('WebSocket connecting');

      var client = null;

      socket.on('error', function (e) {
        return logger.error('Client #%s error: %s', client ? client.id : 'unkown', e.message);
      });

      socket.once('message', function (clientId) {
        client = _this10._clients[clientId] = _this10._clients[clientId] || { subscriptions: {}, id: clientId, messageQueue: [] };
        // If an existing client, we close its socket before listening to the new socket.
        if (client.socket) {
          client.socket.close();
          client.socket = null;
        }
        logger.info('Client #%s connecting with a new socket!', clientId);
        client.socket = socket;
        client.messageQueue.splice(0).forEach(function (message) {
          return _this10._sendSocketMessage(client, message.data);
        });
        socket.on('message', function (message) {
          return _this10._onSocketMessage(client, message);
        });
      });

      socket.on('close', function () {
        if (!client) {
          return;
        }
        if (client.socket === socket) {
          client.socket = null;
        }
        logger.info('Client #%s closing a socket!', client.id);
        // TODO: enable subscription cleanup when we have a robust reconnect scenario.
        /*
        for (var channel in client.subscriptions) {
          this.unsubscribe(channel, subscriptions[channel]);
        }
        this._eventSubscriptions.forEach(value => value.delete(client.id));
        delete this._clients[client.id];
        */
      });
    }
  }, {
    key: '_onSocketMessage',
    value: _asyncToGenerator(function* (client, message) {
      message = JSON.parse(message);
      if (message.protocol && message.protocol === _config.SERVICE_FRAMEWORK3_CHANNEL) {
        this._serverComponent.handleMessage(client, message);
        return;
      }

      var _message = message;
      var serviceName = _message.serviceName;
      var methodName = _message.methodName;
      var methodArgs = _message.methodArgs;
      var serviceOptions = _message.serviceOptions;
      var requestId = _message.requestId;

      var result = null;
      var error = null;

      try {
        result = yield this.callService('/' + serviceName + '/' + methodName, [serviceOptions].concat(methodArgs));
      } catch (e) {
        logger.error('Failed to call %s/%s with error %o', serviceName, methodName, e);
        error = e;
      }

      this._sendSocketMessage(client, {
        channel: _config.SERVICE_FRAMEWORK_RPC_CHANNEL,
        requestId: requestId,
        result: result,
        error: error
      });
    })
  }, {
    key: '_sendSocketMessage',
    value: function _sendSocketMessage(client, data) {
      // Wrap the data in an object, because if `data` is a primitive data type,
      // finding it in an array would return the first matching item, not necessarily the same inserted item.
      var message = { data: data };
      var id = client.id;
      var socket = client.socket;
      var messageQueue = client.messageQueue;

      messageQueue.push(message);
      if (!socket) {
        return;
      }
      socket.send(JSON.stringify(data), function (err) {
        if (err) {
          logger.warn('Failed sending socket message to client:', id, data);
        } else {
          var messageIndex = messageQueue.indexOf(message);
          if (messageIndex !== -1) {
            messageQueue.splice(messageIndex, 1);
          }
        }
      });
    }
  }, {
    key: 'close',
    value: function close() {
      var _this11 = this;

      (0, _assert2['default'])(NuclideServer._theServer === this);
      NuclideServer._theServer = null;

      this._webSocketServer.close();
      this._webServer.close();
      this._serviceWithoutServiceFrameworkConfigs.forEach(function (service_path) {
        var _require8 = require(service_path);

        var shutdown = _require8.shutdown;

        if (shutdown) {
          shutdown(_this11);
        }
      });
    }
  }], [{
    key: 'shutdown',
    value: function shutdown() {
      logger.info('Shutting down the server');
      try {
        if (NuclideServer._theServer != null) {
          NuclideServer._theServer.close();
        }
      } catch (e) {
        logger.error('Error while shutting down, but proceeding anyway:', e);
      } finally {
        (0, _nuclideLogging.flushLogsAndExit)(0);
      }
    }
  }]);

  return NuclideServer;
})();

module.exports = NuclideServer;
/* eventName */ /* clientId */
//# sourceMappingURL=data:application/json;base64,
