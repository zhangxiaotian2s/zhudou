Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/**
 * As defined in com.facebook.buck.cli.Command, some of Buck's subcommands are
 * read-only. The read-only commands can be executed in parallel, but the rest
 * must be executed serially.
 *
 * TODO(mbolin): This does not account for the case where the user runs
 * `buck build` from the command line while Nuclide is also trying to build.
 */
'use babel';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _require = require('nuclide-commons');

var asyncExecute = _require.asyncExecute;
var scriptSafeSpawnAndObserveOutput = _require.scriptSafeSpawnAndObserveOutput;

var _require2 = require('nuclide-commons');

var fsPromise = _require2.fsPromise;

var logger = require('nuclide-logging').getLogger();
var path = require('path');

var BLOCKING_BUCK_COMMAND_QUEUE_PREFIX = 'buck';

/**
 * Represents a Buck project on disk. All Buck commands for a project should be
 * done through an instance of this class.
 */

var BuckProject = (function () {

  /**
   * @param options.rootPath Absolute path to the directory that contains the
   *     .buckconfig file to configure the project.
   */

  function BuckProject(options) {
    _classCallCheck(this, BuckProject);

    this._rootPath = options.rootPath;
    this._serialQueueName = BLOCKING_BUCK_COMMAND_QUEUE_PREFIX + this._rootPath;
  }

  _createClass(BuckProject, [{
    key: 'dispose',
    value: function dispose() {
      // This method is required by the service framework.
    }
  }, {
    key: 'getPath',
    value: function getPath() {
      return Promise.resolve(this._rootPath);
    }

    /**
     * This syntax is not supported yet, but the return type is:
     * Promise<{stdout: string; stderr: string; exitCode: number}>
     *
     * @param args Do not include 'buck' as the first argument: it will be added
     *     automatically.
     */
  }, {
    key: '_runBuckCommandFromProjectRoot',
    value: function _runBuckCommandFromProjectRoot(args) {
      var _getBuckCommandAndOptions2 = this._getBuckCommandAndOptions();

      var pathToBuck = _getBuckCommandAndOptions2.pathToBuck;
      var options = _getBuckCommandAndOptions2.buckCommandOptions;

      logger.debug('Buck command:', pathToBuck, args, options);
      return asyncExecute(pathToBuck, args, options);
    }

    /**
     * @return The path to buck and set of options to be used to run a `buck` command.
     */
  }, {
    key: '_getBuckCommandAndOptions',
    value: function _getBuckCommandAndOptions() {
      var pathToBuck = undefined;
      if (global.atom) {
        pathToBuck = global.atom.config.get('nuclide-buck-files.pathToBuck');
      } else {
        pathToBuck = 'buck';
      }
      var buckCommandOptions = {
        cwd: this._rootPath,
        queueName: this._serialQueueName
      };
      return { pathToBuck: pathToBuck, buckCommandOptions: buckCommandOptions };
    }
  }, {
    key: 'getOwner',
    value: _asyncToGenerator(function* (filePath) {
      var args = ['audit', 'owner', filePath];
      var result = yield this._runBuckCommandFromProjectRoot(args);
      var stdout = result.stdout;
      var targets = stdout.trim().split('\n');
      return targets;
    })
  }, {
    key: 'getBuckConfig',
    value: _asyncToGenerator(function* (section, property) {
      var buckConfig = this._buckConfig;
      if (!buckConfig) {
        buckConfig = this._buckConfig = yield this._loadBuckConfig();
      }
      if (!buckConfig.hasOwnProperty(section)) {
        return null;
      }
      var sectionConfig = buckConfig[section];
      if (!sectionConfig.hasOwnProperty(property)) {
        return null;
      }
      return sectionConfig[property];
    })

    /**
     * TODO(natthu): Also load .buckconfig.local. Consider loading .buckconfig from the home directory
     * and ~/.buckconfig.d/ directory.
     */
  }, {
    key: '_loadBuckConfig',
    value: _asyncToGenerator(function* () {
      var ini = require('ini');
      var header = 'scope = global\n';
      var buckConfigContent = yield fsPromise.readFile(path.join(this._rootPath, '.buckconfig'));
      return ini.parse(header + buckConfigContent);
    })
  }, {
    key: 'build',
    value: function build(buildTargets) {
      return this._build(buildTargets, { install: false });
    }
  }, {
    key: 'install',
    value: function install(buildTargets, simulator, runOptions) {
      return this._build(buildTargets, { install: true, simulator: simulator, runOptions: runOptions });
    }
  }, {
    key: '_build',
    value: _asyncToGenerator(function* (buildTargets, options) {
      var report = yield fsPromise.tempfile({ suffix: '.json' });
      var args = this._translateOptionsToBuckBuildArgs({
        baseOptions: _extends({}, options),
        pathToBuildReport: report,
        buildTargets: buildTargets
      });

      try {
        yield this._runBuckCommandFromProjectRoot(args);
      } catch (e) {
        // The build failed. However, because --keep-going was specified, the
        // build report should have still been written unless any of the target
        // args were invalid. We check the existence of the report file to be sure.
        var fileWasWritten = yield fsPromise.exists(report);
        if (!fileWasWritten) {
          throw e;
        }
      }

      try {
        var json = yield fsPromise.readFile(report, { encoding: 'UTF-8' });
        if (!json) {
          throw Error('Report file ' + report + ' for ' + buildTargets + ' was opened, ' + 'but nothing was written.');
        }

        try {
          return JSON.parse(json);
        } catch (e) {
          throw Error('Failed to parse:\n' + json);
        }
      } finally {
        fsPromise.unlink(report);
      }
    })
  }, {
    key: 'buildWithOutput',
    value: function buildWithOutput(buildTargets) {
      return this._buildWithOutput(buildTargets, { install: false });
    }
  }, {
    key: 'installWithOutput',
    value: function installWithOutput(buildTargets, simulator, runOptions) {
      return this._buildWithOutput(buildTargets, { install: true, simulator: simulator, runOptions: runOptions });
    }

    /**
     * Does a build/install.
     * @return An Observable that returns output from buck, as described by the
     *   docblocks for `buildWithOutput` and `installWithOutput`.
     */
  }, {
    key: '_buildWithOutput',
    value: function _buildWithOutput(buildTargets, options) {
      var args = this._translateOptionsToBuckBuildArgs({
        baseOptions: _extends({}, options),
        buildTargets: buildTargets
      });

      var _getBuckCommandAndOptions3 = this._getBuckCommandAndOptions();

      var pathToBuck = _getBuckCommandAndOptions3.pathToBuck;
      var buckCommandOptions = _getBuckCommandAndOptions3.buckCommandOptions;

      return scriptSafeSpawnAndObserveOutput(pathToBuck, args, buckCommandOptions);
    }

    /**
     * @param options An object describing the desired buck build operation.
     * @return An array of strings that can be passed as `args` to spawn a
     *   process to run the `buck` command.
     */
  }, {
    key: '_translateOptionsToBuckBuildArgs',
    value: function _translateOptionsToBuckBuildArgs(options) {
      var baseOptions = options.baseOptions;
      var pathToBuildReport = options.pathToBuildReport;
      var buildTargets = options.buildTargets;
      var install = baseOptions.install;
      var simulator = baseOptions.simulator;

      var runOptions = baseOptions.runOptions || { run: false };

      var args = install ? ['install'] : ['build'];
      args = args.concat(buildTargets);

      args.push('--keep-going');
      if (pathToBuildReport) {
        args = args.concat(['--build-report', pathToBuildReport]);
      }
      if (install) {
        if (simulator) {
          args.push('--udid');
          args.push(simulator);
        }

        if (runOptions.run) {
          args.push('--run');
          if (runOptions.debug) {
            args.push('--wait-for-debugger');
          }
          if (runOptions.appArgs) {
            args.push('--');
            // $FlowIssue runOptions.run == true => appArgs must be set.
            args = args.concat(runOptions.appArgs);
          }
        }
      }
      return args;
    }
  }, {
    key: 'listAliases',
    value: _asyncToGenerator(function* () {
      var args = ['audit', 'alias', '--list'];
      var result = yield this._runBuckCommandFromProjectRoot(args);
      var stdout = result.stdout.trim();
      return stdout ? stdout.split('\n') : [];
    })

    /**
     * Currently, if `aliasOrTarget` contains a flavor, this will fail.
     */
  }, {
    key: 'resolveAlias',
    value: _asyncToGenerator(function* (aliasOrTarget) {
      var args = ['targets', '--resolve-alias', aliasOrTarget];
      var result = yield this._runBuckCommandFromProjectRoot(args);
      return result.stdout.trim();
    })

    /**
     * Currently, if `aliasOrTarget` contains a flavor, this will fail.
     *
     * @return Promise resolves to absolute path to output file
     */
  }, {
    key: 'outputFileFor',
    value: _asyncToGenerator(function* (aliasOrTarget) {
      var args = ['targets', '--show-output', aliasOrTarget];
      var result = yield this._runBuckCommandFromProjectRoot(args);
      var stdout = result.stdout.trim();
      if (stdout.indexOf(' ') !== -1) {
        var relativePath = stdout.split(' ')[1];
        return path.resolve(this._rootPath, relativePath);
      } else {
        return null;
      }
    })

    /**
     * Currently, if `aliasOrTarget` contains a flavor, this will fail.
     */
  }, {
    key: 'buildRuleTypeFor',
    value: _asyncToGenerator(function* (aliasOrTarget) {
      var args = ['query', aliasOrTarget, '--json', '--output-attributes', 'buck.type'];
      var result = yield this._runBuckCommandFromProjectRoot(args);
      var json = JSON.parse(result.stdout);
      // If aliasOrTarget is an alias, targets[0] will be the fully qualified build target.
      var targets = Object.keys(json);
      if (!targets || targets.length !== 1) {
        throw new Error('Error determining rule type of \'' + aliasOrTarget + '\'.');
      }
      return json[targets[0]]['buck.type'];
    })
  }, {
    key: 'getServerPort',
    value: _asyncToGenerator(function* () {
      var args = ['server', 'status', '--json', '--http-port'];
      var result = yield this._runBuckCommandFromProjectRoot(args);
      var json = JSON.parse(result.stdout);
      return json['http.port'];
    })
  }, {
    key: 'query',
    value: _asyncToGenerator(function* (_query) {
      var args = ['query', '--json', _query];
      var result = yield this._runBuckCommandFromProjectRoot(args);
      var json = JSON.parse(result.stdout);
      return json;
    })
  }, {
    key: 'queryWithArgs',
    value: _asyncToGenerator(function* (query, args) {
      var completeArgs = ['query', '--json', query].concat(args);
      var result = yield this._runBuckCommandFromProjectRoot(completeArgs);
      var json = JSON.parse(result.stdout);

      // `buck query` does not include entries in the JSON for params that did not match anything. We
      // massage the output to ensure that every argument has an entry in the output.
      for (var arg of args) {
        if (!json.hasOwnProperty(arg)) {
          json[arg] = [];
        }
      }
      return json;
    })
  }]);

  return BuckProject;
})();

exports.BuckProject = BuckProject;
//# sourceMappingURL=data:application/json;base64,
