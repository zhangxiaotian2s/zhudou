

/**
 * When called from a file in a spec/ directory that has a subdirectory named fixtures/, it copies
 * the specified subdirectory of fixtures into a temp directory. The temp directory will be deleted
 * automatically when the current process exits.
 *
 * @param fixtureName The name of the subdirectory of the fixtures/ directory that should be copied.
 * @param dirname The calling function should call `__dirname` as this argument. This should
 *   correspond to the spec/ directory with a fixtures/ subdirectory.
 */

var copyFixture = _asyncToGenerator(function* (fixtureName, dirname) {
  // Create a temp directory.
  var tempDir = yield new Promise(function (resolve, reject) {
    tempWithAutoCleanup.mkdir(fixtureName, function (err, dirPath) {
      if (err) {
        reject(err);
      } else {
        resolve(dirPath);
      }
    });
  });

  // Recursively copy the contents of the fixture to the temp directory.
  yield new Promise(function (resolve, reject) {
    var sourceDirectory = _path2['default'].join(dirname, 'fixtures', fixtureName);
    (0, _ncp2['default'])(sourceDirectory, tempDir, function (err) {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });

  return tempDir;
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _ncp = require('ncp');

var _ncp2 = _interopRequireDefault(_ncp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

// Automatically track and cleanup files at exit.
'use babel';
var tempWithAutoCleanup = _temp2['default'].track();

module.exports = {
  copyFixture: copyFixture
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXRlc3QtaGVscGVycy9saWIvZml4dHVyZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0lBMEJlLFdBQVcscUJBQTFCLFdBQTJCLFdBQW1CLEVBQUUsT0FBZSxFQUFtQjs7QUFFaEYsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUs7QUFDckQsdUJBQW1CLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxVQUFDLEdBQUcsRUFBVSxPQUFPLEVBQUs7QUFDL0QsVUFBSSxHQUFHLEVBQUU7QUFDUCxjQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDYixNQUFNO0FBQ0wsZUFBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO09BQ2xCO0tBQ0YsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOzs7QUFHSCxRQUFNLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBSztBQUNyQyxRQUFNLGVBQWUsR0FBRyxrQkFBSyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUNwRSwwQkFBSSxlQUFlLEVBQUUsT0FBTyxFQUFFLFVBQUMsR0FBRyxFQUFhO0FBQzdDLFVBQUksR0FBRyxFQUFFO0FBQ1AsY0FBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO09BQ2IsTUFBTTtBQUNMLGVBQU8sRUFBRSxDQUFDO09BQ1g7S0FDRixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7O0FBRUgsU0FBTyxPQUFPLENBQUM7Q0FDaEI7Ozs7Ozs7Ozs7Ozs7O21CQXpDZSxLQUFLOzs7O29CQUNKLE1BQU07Ozs7b0JBQ04sTUFBTTs7Ozs7QUFadkIsV0FBVyxDQUFDO0FBZVosSUFBTSxtQkFBbUIsR0FBRyxrQkFBSyxLQUFLLEVBQUUsQ0FBQzs7QUFzQ3pDLE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZixhQUFXLEVBQVgsV0FBVztDQUNaLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtdGVzdC1oZWxwZXJzL2xpYi9maXh0dXJlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgbmNwIGZyb20gJ25jcCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB0ZW1wIGZyb20gJ3RlbXAnO1xuXG4vLyBBdXRvbWF0aWNhbGx5IHRyYWNrIGFuZCBjbGVhbnVwIGZpbGVzIGF0IGV4aXQuXG5jb25zdCB0ZW1wV2l0aEF1dG9DbGVhbnVwID0gdGVtcC50cmFjaygpO1xuXG4vKipcbiAqIFdoZW4gY2FsbGVkIGZyb20gYSBmaWxlIGluIGEgc3BlYy8gZGlyZWN0b3J5IHRoYXQgaGFzIGEgc3ViZGlyZWN0b3J5IG5hbWVkIGZpeHR1cmVzLywgaXQgY29waWVzXG4gKiB0aGUgc3BlY2lmaWVkIHN1YmRpcmVjdG9yeSBvZiBmaXh0dXJlcyBpbnRvIGEgdGVtcCBkaXJlY3RvcnkuIFRoZSB0ZW1wIGRpcmVjdG9yeSB3aWxsIGJlIGRlbGV0ZWRcbiAqIGF1dG9tYXRpY2FsbHkgd2hlbiB0aGUgY3VycmVudCBwcm9jZXNzIGV4aXRzLlxuICpcbiAqIEBwYXJhbSBmaXh0dXJlTmFtZSBUaGUgbmFtZSBvZiB0aGUgc3ViZGlyZWN0b3J5IG9mIHRoZSBmaXh0dXJlcy8gZGlyZWN0b3J5IHRoYXQgc2hvdWxkIGJlIGNvcGllZC5cbiAqIEBwYXJhbSBkaXJuYW1lIFRoZSBjYWxsaW5nIGZ1bmN0aW9uIHNob3VsZCBjYWxsIGBfX2Rpcm5hbWVgIGFzIHRoaXMgYXJndW1lbnQuIFRoaXMgc2hvdWxkXG4gKiAgIGNvcnJlc3BvbmQgdG8gdGhlIHNwZWMvIGRpcmVjdG9yeSB3aXRoIGEgZml4dHVyZXMvIHN1YmRpcmVjdG9yeS5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gY29weUZpeHR1cmUoZml4dHVyZU5hbWU6IHN0cmluZywgZGlybmFtZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgLy8gQ3JlYXRlIGEgdGVtcCBkaXJlY3RvcnkuXG4gIGNvbnN0IHRlbXBEaXIgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdGVtcFdpdGhBdXRvQ2xlYW51cC5ta2RpcihmaXh0dXJlTmFtZSwgKGVycjogP0Vycm9yLCBkaXJQYXRoKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShkaXJQYXRoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gUmVjdXJzaXZlbHkgY29weSB0aGUgY29udGVudHMgb2YgdGhlIGZpeHR1cmUgdG8gdGhlIHRlbXAgZGlyZWN0b3J5LlxuICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3Qgc291cmNlRGlyZWN0b3J5ID0gcGF0aC5qb2luKGRpcm5hbWUsICdmaXh0dXJlcycsIGZpeHR1cmVOYW1lKTtcbiAgICBuY3Aoc291cmNlRGlyZWN0b3J5LCB0ZW1wRGlyLCAoZXJyOiA/RXJyb3IpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiB0ZW1wRGlyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29weUZpeHR1cmUsXG59O1xuIl19
