var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _nuclideServiceParser = require('nuclide-service-parser');

var _nuclideServerLibServiceframework = require('nuclide-server/lib/serviceframework');

var _nuclideServerLibServiceframework2 = _interopRequireDefault(_nuclideServerLibServiceframework);

var _ServiceLogger = require('./ServiceLogger');

var _ServiceLogger2 = _interopRequireDefault(_ServiceLogger);

'use babel';

var logger = require('nuclide-logging').getLogger();

var _require = require('nuclide-server/lib/config');

var loadConfigsOfServiceWithServiceFramework = _require.loadConfigsOfServiceWithServiceFramework;

var _require2 = require('nuclide-server/lib/service-manager');

var optionsToString = _require2.optionsToString;

var RemoteConnection = require('./RemoteConnection');

var _require3 = require('nuclide-remote-uri');

var isRemote = _require3.isRemote;
var getHostname = _require3.getHostname;

var serviceConfigs = loadConfigsOfServiceWithServiceFramework();
var newServices = _nuclideServerLibServiceframework2['default'].loadServicesConfig();

// A cache stores services in form of '$serviceName@$host:$options' => $serviceObject. A special
// case would be the local service, where the $host will be empty string.
var cachedServices = new Map();

RemoteConnection.onDidCloseRemoteConnection(function (connection) {
  for (var cacheEntry of cachedServices) {
    var _cacheEntry = _slicedToArray(cacheEntry, 2);

    var cacheKey = _cacheEntry[0];
    var serviceInstance = _cacheEntry[1];

    if (serviceInstance._connection === connection) {
      cachedServices['delete'](cacheKey);
    }
  }
});

/**
 * Get a remote v3 service by service name and remote connection.
 */
function getRemoteServiceByRemoteConnection(serviceName, connection) {
  var _newServices$filter = newServices.filter(function (config) {
    return config.name === serviceName;
  });

  var _newServices$filter2 = _slicedToArray(_newServices$filter, 1);

  var serviceConfig = _newServices$filter2[0];

  if (serviceConfig) {
    return (0, _nuclideServiceParser.getProxy)(serviceConfig.name, serviceConfig.definition, connection.getClient());
  } else {
    logger.error('Service %s undefined.', serviceName);
    return null;
  }
}

/**
 * Create or get a cached service with given serviceOptions.
 * @param nuclideUri It could either be either a local path or a remote path in form of
 *    `nuclide:$host:$port/$path`. The function will use the $host from remote path to
 *    create a remote service with given serviceOptions or create a local service if the
 *    uri is local path.
 */
function getServiceByNuclideUri(serviceName) {
  var nuclideUri = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  var serviceOptions = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

  var hostname = nuclideUri && isRemote(nuclideUri) ? getHostname(nuclideUri) : null;
  return getService(serviceName, hostname, serviceOptions);
}

/**
 * Create or get a cached service with given serviceOptions. If hostname is null or empty string,
 * it returns a local service, otherwise a remote service will be returned. For the same host
 * serviceOptions, the same service instance will be returned.
 */
function getService(serviceName, hostname, serviceOptions) {
  /** First, try to find a 3.0 service */

  var _newServices$filter3 = newServices.filter(function (config) {
    return config.name === serviceName;
  });

  var _newServices$filter32 = _slicedToArray(_newServices$filter3, 1);

  var serviceConfig = _newServices$filter32[0];

  if (serviceConfig) {
    if (hostname) {
      var remoteConnection = RemoteConnection.getByHostnameAndPath(hostname, null);
      return (0, _nuclideServiceParser.getProxy)(serviceConfig.name, serviceConfig.definition, remoteConnection.getClient());
    } else {
      return require(serviceConfig.implementation);
    }
  }

  /** Then try to find a legacy service */

  var _serviceConfigs$filter = serviceConfigs.filter(function (config) {
    return config.name === serviceName;
  });

  var _serviceConfigs$filter2 = _slicedToArray(_serviceConfigs$filter, 1);

  serviceConfig = _serviceConfigs$filter2[0];

  if (!serviceConfig) {
    logger.error('Service %s undefined.', serviceName);
    return null;
  }

  var cacheKey = serviceName + '@' + (hostname ? hostname : '') + ':' + optionsToString(serviceOptions);

  if (cachedServices.has(cacheKey)) {
    return cachedServices.get(cacheKey);
  }

  serviceOptions = serviceOptions || {};

  var serviceInstance = undefined;
  if (hostname) {
    serviceInstance = createRemoteService(serviceConfig, hostname, serviceOptions);
  } else {
    serviceInstance = createLocalService(serviceConfig, serviceOptions);
  }
  cachedServices.set(cacheKey, serviceInstance);

  return serviceInstance;
}

function createRemoteService(serviceConfig, hostname, serviceOptions) {
  var _require4 = require('nuclide-service-transformer');

  var requireRemoteServiceSync = _require4.requireRemoteServiceSync;

  var remoteServiceClass = requireRemoteServiceSync(serviceConfig.definition, serviceConfig.name,
  /* isDecorator */false);
  var remoteConnection = RemoteConnection.getByHostnameAndPath(hostname, null);
  return new remoteServiceClass(remoteConnection, serviceOptions);
}

function createLocalService(serviceConfig, serviceOptions) {
  var serviceClass = require(serviceConfig.implementation);
  var serviceImplementation = new serviceClass(serviceOptions);

  var _require5 = require('nuclide-service-transformer');

  var requireRemoteServiceSync = _require5.requireRemoteServiceSync;

  var decorator = requireRemoteServiceSync(serviceConfig.definition, serviceConfig.name,
  /* isDecorator */true);
  return new decorator(serviceImplementation, getServiceLogger());
}

var serviceLogger = undefined;
function getServiceLogger() {
  if (!serviceLogger) {
    serviceLogger = new _ServiceLogger2['default']();
    serviceLogger.onNewItem(function (item) {
      // TODO(t8579744): Log these to a separate file. Note that whatever file is used should also
      // be included in bug reports.
      logger.debug('Service call:', item.service, item.method, item.isLocal, item.argInfo);
    });
  }
  return serviceLogger;
}

module.exports = {
  getService: getService,
  getServiceByNuclideUri: getServiceByNuclideUri,
  getServiceLogger: getServiceLogger,
  getRemoteServiceByRemoteConnection: getRemoteServiceByRemoteConnection
};
//# sourceMappingURL=data:application/json;base64,
