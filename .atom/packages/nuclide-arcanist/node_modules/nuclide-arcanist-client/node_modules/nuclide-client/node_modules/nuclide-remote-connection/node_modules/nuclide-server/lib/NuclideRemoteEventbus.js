Object.defineProperty(exports, '__esModule', {
  value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _nuclideCommons = require('nuclide-commons');

var _serviceframework = require('./serviceframework');

var _serviceframework2 = _interopRequireDefault(_serviceframework);

'use babel';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _require = require('event-kit');

var Disposable = _require.Disposable;

var _require2 = require('./service-manager');

var getRemoteEventName = _require2.getRemoteEventName;

var _require3 = require('./utils');

var serializeArgs = _require3.serializeArgs;

var _require4 = require('events');

var EventEmitter = _require4.EventEmitter;

var NuclideSocket = require('./NuclideSocket');

var _require5 = require('./config');

var SERVICE_FRAMEWORK_EVENT_CHANNEL = _require5.SERVICE_FRAMEWORK_EVENT_CHANNEL;
var SERVICE_FRAMEWORK_RPC_CHANNEL = _require5.SERVICE_FRAMEWORK_RPC_CHANNEL;
var SERVICE_FRAMEWORK_RPC_TIMEOUT_MS = _require5.SERVICE_FRAMEWORK_RPC_TIMEOUT_MS;
var SERVICE_FRAMEWORK3_CHANNEL = _require5.SERVICE_FRAMEWORK3_CHANNEL;

var logger = require('nuclide-logging').getLogger();

var NuclideRemoteEventbus = (function () {
  function NuclideRemoteEventbus(serverUri) {
    var _this = this;

    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, NuclideRemoteEventbus);

    this.socket = new NuclideSocket(serverUri, options);
    this.socket.on('message', function (message) {
      return _this._handleSocketMessage(message);
    });
    this.serviceFrameworkEventEmitter = new EventEmitter();
    this._rpcRequestId = 1;
    this._serviceFrameworkRpcEmitter = new EventEmitter();
    this._serviceFramework3Emitter = new EventEmitter();

    this._clientComponent = new _serviceframework2['default'].ClientComponent(this._serviceFramework3Emitter, this.socket, function () {
      return _this._rpcRequestId++;
    });
  }

  // Resolves if the connection looks healthy.
  // Will reject quickly if the connection looks unhealthy.

  _createClass(NuclideRemoteEventbus, [{
    key: 'testConnection',
    value: function testConnection() {
      // Don't call this after socket is closed.
      (0, _assert2['default'])(this.socket != null);
      return this.socket.testConnection();
    }
  }, {
    key: '_handleSocketMessage',
    value: function _handleSocketMessage(message) {
      var channel = message.channel;
      var event = message.event;

      if (channel === SERVICE_FRAMEWORK_RPC_CHANNEL) {
        var requestId = message.requestId;
        var error = message.error;
        var result = message.result;

        this._serviceFrameworkRpcEmitter.emit(requestId.toString(), error, result);
        return;
      }

      if (channel === SERVICE_FRAMEWORK_EVENT_CHANNEL) {
        this.serviceFrameworkEventEmitter.emit.apply(this.serviceFrameworkEventEmitter, [event.name].concat(event.args));
        return;
      }

      if (channel === SERVICE_FRAMEWORK3_CHANNEL) {
        var requestId = message.requestId;
        var hadError = message.hadError;
        var error = message.error;
        var result = message.result;

        this._serviceFramework3Emitter.emit(requestId.toString(), hadError, error, result);
        return;
      }
    }
  }, {
    key: '_subscribeEventOnServer',
    value: function _subscribeEventOnServer(serviceName, methodName, serviceOptions) {
      return this.callServiceFrameworkMethod('serviceFramework', 'subscribeEvent',
      /*methodArgs*/[this.socket.id, serviceName, methodName], serviceOptions);
    }
  }, {
    key: '_unsubscribeEventFromServer',
    value: function _unsubscribeEventFromServer(serviceName, methodName, serviceOptions) {
      return this.callServiceFrameworkMethod('serviceFramework', 'unsubscribeEvent',
      /*methodArgs*/[this.socket.id, serviceName, methodName], serviceOptions);
    }
  }, {
    key: 'registerEventListener',
    value: function registerEventListener(localEventName, callback, serviceOptions) {
      var _this2 = this;

      var _localEventName$split = localEventName.split('/');

      var _localEventName$split2 = _slicedToArray(_localEventName$split, 2);

      var serviceName = _localEventName$split2[0];
      var eventMethodName = _localEventName$split2[1];

      var remoteEventName = getRemoteEventName(serviceName, eventMethodName, serviceOptions);
      this.serviceFrameworkEventEmitter.on(remoteEventName, callback);
      var subscribePromise = this._subscribeEventOnServer(serviceName, eventMethodName, serviceOptions);
      return new Disposable(function () {
        _this2.serviceFrameworkEventEmitter.removeListener(remoteEventName, callback);
        return subscribePromise.then(function () {
          return _this2._unsubscribeEventFromServer(serviceName, eventMethodName, serviceOptions);
        });
      });
    }
  }, {
    key: 'callMethod',
    value: _asyncToGenerator(function* (serviceName, methodName, methodArgs, extraOptions) {
      if (!this.socket) {
        logger.error('RemoteEventBus closed - callMethod:', serviceName, methodName);
        // Error condition that should never happen, return `undefined`.
        return;
      }

      var _serializeArgs = serializeArgs(methodArgs || []);

      var args = _serializeArgs.args;
      var argTypes = _serializeArgs.argTypes;

      try {
        return yield this.socket.xhrRequest(_nuclideCommons.object.assign({
          uri: serviceName + '/' + methodName,
          qs: {
            args: args,
            argTypes: argTypes
          },
          method: 'GET' }, // default request method is 'GET'.
        extraOptions || {}));
      } catch (err) {
        logger.error(err);
        throw err;
      }
    })
  }, {
    key: 'callServiceFrameworkMethod',
    value: _asyncToGenerator(function* (serviceName, methodName, methodArgs, serviceOptions) {
      var _this3 = this;

      var timeout = arguments.length <= 4 || arguments[4] === undefined ? SERVICE_FRAMEWORK_RPC_TIMEOUT_MS : arguments[4];

      var requestId = this._rpcRequestId++;

      this.socket.send({
        serviceName: serviceName,
        methodName: methodName,
        methodArgs: methodArgs,
        serviceOptions: serviceOptions,
        requestId: requestId
      });

      return new Promise(function (resolve, reject) {
        _this3._serviceFrameworkRpcEmitter.once(requestId.toString(), function (error, result) {
          error ? reject(error) : resolve(result);
        });

        setTimeout(function () {
          _this3._serviceFrameworkRpcEmitter.removeAllListeners(requestId.toString());
          reject('Timeout after ' + timeout + ' for ' + serviceName + '/' + methodName);
        }, timeout);
      });
    })

    // Delegate RPC functions to ServiceFramework.ClientComponent
  }, {
    key: 'callRemoteFunction',
    value: function callRemoteFunction() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return this._clientComponent.callRemoteFunction.apply(this._clientComponent, args);
    }
  }, {
    key: 'createRemoteObject',
    value: function createRemoteObject() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return this._clientComponent.createRemoteObject.apply(this._clientComponent, args);
    }
  }, {
    key: 'callRemoteMethod',
    value: function callRemoteMethod() {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return this._clientComponent.callRemoteMethod.apply(this._clientComponent, args);
    }
  }, {
    key: 'disposeRemoteObject',
    value: function disposeRemoteObject() {
      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return this._clientComponent.disposeRemoteObject.apply(this._clientComponent, args);
    }

    // Delegate marshalling to the ServiceFramework.ClientComponent class.
  }, {
    key: 'marshal',
    value: function marshal() {
      var _clientComponent;

      return (_clientComponent = this._clientComponent).marshal.apply(_clientComponent, arguments);
    }
  }, {
    key: 'unmarshal',
    value: function unmarshal() {
      var _clientComponent2;

      return (_clientComponent2 = this._clientComponent).unmarshal.apply(_clientComponent2, arguments);
    }
  }, {
    key: 'registerType',
    value: function registerType() {
      var _clientComponent3;

      return (_clientComponent3 = this._clientComponent).registerType.apply(_clientComponent3, arguments);
    }
  }, {
    key: 'close',
    value: function close() {
      this.socket.close();
      this.socket = null;
    }
  }]);

  return NuclideRemoteEventbus;
})();

module.exports = NuclideRemoteEventbus;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvTnVjbGlkZVJlbW90ZUV2ZW50YnVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O3NCQXFCc0IsUUFBUTs7Ozs4QkFFVCxpQkFBaUI7O2dDQUNULG9CQUFvQjs7OztBQXhCakQsV0FBVyxDQUFDOzs7Ozs7Ozs7O2VBV1MsT0FBTyxDQUFDLFdBQVcsQ0FBQzs7SUFBbEMsVUFBVSxZQUFWLFVBQVU7O2dCQUNZLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQzs7SUFBbEQsa0JBQWtCLGFBQWxCLGtCQUFrQjs7Z0JBQ0QsT0FBTyxDQUFDLFNBQVMsQ0FBQzs7SUFBbkMsYUFBYSxhQUFiLGFBQWE7O2dCQUNHLE9BQU8sQ0FBQyxRQUFRLENBQUM7O0lBQWpDLFlBQVksYUFBWixZQUFZOztBQUNuQixJQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs7Z0JBSWpCLE9BQU8sQ0FBQyxVQUFVLENBQUM7O0lBSDVDLCtCQUErQixhQUEvQiwrQkFBK0I7SUFDcEMsNkJBQTZCLGFBQTdCLDZCQUE2QjtJQUM3QixnQ0FBZ0MsYUFBaEMsZ0NBQWdDO0lBQ2hDLDBCQUEwQixhQUExQiwwQkFBMEI7O0FBQzVCLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDOztJQVloRCxxQkFBcUI7QUFVZCxXQVZQLHFCQUFxQixDQVViLFNBQWlCLEVBQStDOzs7UUFBN0MsT0FBc0MseURBQUcsRUFBRTs7MEJBVnRFLHFCQUFxQjs7QUFXdkIsUUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLGFBQWEsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDcEQsUUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FB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MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1zZXJ2ZXIvbGliL051Y2xpZGVSZW1vdGVFdmVudGJ1cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNvbnN0IHtEaXNwb3NhYmxlfSA9IHJlcXVpcmUoJ2V2ZW50LWtpdCcpO1xuY29uc3Qge2dldFJlbW90ZUV2ZW50TmFtZX0gPSByZXF1aXJlKCcuL3NlcnZpY2UtbWFuYWdlcicpO1xuY29uc3Qge3NlcmlhbGl6ZUFyZ3N9ID0gcmVxdWlyZSgnLi91dGlscycpO1xuY29uc3Qge0V2ZW50RW1pdHRlcn0gPSByZXF1aXJlKCdldmVudHMnKTtcbmNvbnN0IE51Y2xpZGVTb2NrZXQgPSByZXF1aXJlKCcuL051Y2xpZGVTb2NrZXQnKTtcbmNvbnN0IHtTRVJWSUNFX0ZSQU1FV09SS19FVkVOVF9DSEFOTkVMLFxuICBTRVJWSUNFX0ZSQU1FV09SS19SUENfQ0hBTk5FTCxcbiAgU0VSVklDRV9GUkFNRVdPUktfUlBDX1RJTUVPVVRfTVMsXG4gIFNFUlZJQ0VfRlJBTUVXT1JLM19DSEFOTkVMfSA9IHJlcXVpcmUoJy4vY29uZmlnJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCdudWNsaWRlLWxvZ2dpbmcnKS5nZXRMb2dnZXIoKTtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnYXNzZXJ0JztcblxuaW1wb3J0IHtvYmplY3R9IGZyb20gJ251Y2xpZGUtY29tbW9ucyc7XG5pbXBvcnQgU2VydmljZUZyYW1ld29yayBmcm9tICcuL3NlcnZpY2VmcmFtZXdvcmsnO1xuXG5leHBvcnQgdHlwZSBOdWNsaWRlUmVtb3RlRXZlbnRidXNPcHRpb25zID0ge1xuICBjZXJ0aWZpY2F0ZUF1dGhvcml0eUNlcnRpZmljYXRlPzogQnVmZmVyO1xuICBjbGllbnRDZXJ0aWZpY2F0ZT86IEJ1ZmZlcjtcbiAgY2xpZW50S2V5PzogQnVmZmVyO1xufTtcblxuY2xhc3MgTnVjbGlkZVJlbW90ZUV2ZW50YnVzIHtcbiAgc29ja2V0OiA/TnVjbGlkZVNvY2tldDtcblxuICBfcnBjUmVxdWVzdElkOiBudW1iZXI7XG4gIHNlcnZpY2VGcmFtZXdvcmtFdmVudEVtaXR0ZXI6IEV2ZW50RW1pdHRlcjtcbiAgX3NlcnZpY2VGcmFtZXdvcmtScGNFbWl0dGVyOiBFdmVudEVtaXR0ZXI7XG4gIF9zZXJ2aWNlRnJhbWV3b3JrM0VtaXR0ZXI6IEV2ZW50RW1pdHRlcjtcblxuICBfY2xpZW50Q29tcG9uZW50OiBTZXJ2aWNlRnJhbWV3b3JrLkNsaWVudENvbXBvbmVudDtcblxuICBjb25zdHJ1Y3RvcihzZXJ2ZXJVcmk6IHN0cmluZywgb3B0aW9uczogP051Y2xpZGVSZW1vdGVFdmVudGJ1c09wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuc29ja2V0ID0gbmV3IE51Y2xpZGVTb2NrZXQoc2VydmVyVXJpLCBvcHRpb25zKTtcbiAgICB0aGlzLnNvY2tldC5vbignbWVzc2FnZScsIChtZXNzYWdlKSA9PiB0aGlzLl9oYW5kbGVTb2NrZXRNZXNzYWdlKG1lc3NhZ2UpKTtcbiAgICB0aGlzLnNlcnZpY2VGcmFtZXdvcmtFdmVudEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgdGhpcy5fcnBjUmVxdWVzdElkID0gMTtcbiAgICB0aGlzLl9zZXJ2aWNlRnJhbWV3b3JrUnBjRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB0aGlzLl9zZXJ2aWNlRnJhbWV3b3JrM0VtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICB0aGlzLl9jbGllbnRDb21wb25lbnQgPSBuZXcgU2VydmljZUZyYW1ld29yay5DbGllbnRDb21wb25lbnQodGhpcy5fc2VydmljZUZyYW1ld29yazNFbWl0dGVyLFxuICAgICAgdGhpcy5zb2NrZXQsICgpID0+IHRoaXMuX3JwY1JlcXVlc3RJZCsrKTtcbiAgfVxuXG4gIC8vIFJlc29sdmVzIGlmIHRoZSBjb25uZWN0aW9uIGxvb2tzIGhlYWx0aHkuXG4gIC8vIFdpbGwgcmVqZWN0IHF1aWNrbHkgaWYgdGhlIGNvbm5lY3Rpb24gbG9va3MgdW5oZWFsdGh5LlxuICB0ZXN0Q29ubmVjdGlvbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBEb24ndCBjYWxsIHRoaXMgYWZ0ZXIgc29ja2V0IGlzIGNsb3NlZC5cbiAgICBpbnZhcmlhbnQodGhpcy5zb2NrZXQgIT0gbnVsbCk7XG4gICAgcmV0dXJuIHRoaXMuc29ja2V0LnRlc3RDb25uZWN0aW9uKCk7XG4gIH1cblxuICBfaGFuZGxlU29ja2V0TWVzc2FnZShtZXNzYWdlOiBhbnkpIHtcbiAgICBjb25zdCB7Y2hhbm5lbCwgZXZlbnR9ID0gbWVzc2FnZTtcblxuICAgIGlmIChjaGFubmVsID09PSBTRVJWSUNFX0ZSQU1FV09SS19SUENfQ0hBTk5FTCkge1xuICAgICAgY29uc3Qge3JlcXVlc3RJZCwgZXJyb3IsIHJlc3VsdH0gPSBtZXNzYWdlO1xuICAgICAgdGhpcy5fc2VydmljZUZyYW1ld29ya1JwY0VtaXR0ZXIuZW1pdChyZXF1ZXN0SWQudG9TdHJpbmcoKSwgZXJyb3IsIHJlc3VsdCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNoYW5uZWwgPT09IFNFUlZJQ0VfRlJBTUVXT1JLX0VWRU5UX0NIQU5ORUwpIHtcbiAgICAgIHRoaXMuc2VydmljZUZyYW1ld29ya0V2ZW50RW1pdHRlci5lbWl0LmFwcGx5KHRoaXMuc2VydmljZUZyYW1ld29ya0V2ZW50RW1pdHRlcixcbiAgICAgICAgICBbZXZlbnQubmFtZV0uY29uY2F0KGV2ZW50LmFyZ3MpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY2hhbm5lbCA9PT0gU0VSVklDRV9GUkFNRVdPUkszX0NIQU5ORUwpIHtcbiAgICAgIGNvbnN0IHtyZXF1ZXN0SWQsIGhhZEVycm9yLCBlcnJvciwgcmVzdWx0fSA9IG1lc3NhZ2U7XG4gICAgICB0aGlzLl9zZXJ2aWNlRnJhbWV3b3JrM0VtaXR0ZXIuZW1pdChyZXF1ZXN0SWQudG9TdHJpbmcoKSwgaGFkRXJyb3IsIGVycm9yLCByZXN1bHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIF9zdWJzY3JpYmVFdmVudE9uU2VydmVyKHNlcnZpY2VOYW1lOiBzdHJpbmcsIG1ldGhvZE5hbWU6IHN0cmluZywgc2VydmljZU9wdGlvbnM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbFNlcnZpY2VGcmFtZXdvcmtNZXRob2QoXG4gICAgICAnc2VydmljZUZyYW1ld29yaycsXG4gICAgICAnc3Vic2NyaWJlRXZlbnQnLFxuICAgICAgLyptZXRob2RBcmdzKi8gW3RoaXMuc29ja2V0LmlkLCBzZXJ2aWNlTmFtZSwgbWV0aG9kTmFtZV0sXG4gICAgICBzZXJ2aWNlT3B0aW9uc1xuICAgKTtcbiAgfVxuXG4gIF91bnN1YnNjcmliZUV2ZW50RnJvbVNlcnZlcihzZXJ2aWNlTmFtZTogc3RyaW5nLCBtZXRob2ROYW1lOiBzdHJpbmcsIHNlcnZpY2VPcHRpb25zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmNhbGxTZXJ2aWNlRnJhbWV3b3JrTWV0aG9kKFxuICAgICAgJ3NlcnZpY2VGcmFtZXdvcmsnLFxuICAgICAgJ3Vuc3Vic2NyaWJlRXZlbnQnLFxuICAgICAgLyptZXRob2RBcmdzKi8gW3RoaXMuc29ja2V0LmlkLCBzZXJ2aWNlTmFtZSwgbWV0aG9kTmFtZV0sXG4gICAgICBzZXJ2aWNlT3B0aW9uc1xuICAgKTtcbiAgfVxuXG4gIHJlZ2lzdGVyRXZlbnRMaXN0ZW5lcihcbiAgICBsb2NhbEV2ZW50TmFtZTogc3RyaW5nLFxuICAgIGNhbGxiYWNrOiAoLi4uYXJnczogQXJyYXk8YW55PikgPT4gdm9pZCxcbiAgICBzZXJ2aWNlT3B0aW9uczogYW55XG4gICk6IERpc3Bvc2FibGUge1xuICAgIGNvbnN0IFtzZXJ2aWNlTmFtZSwgZXZlbnRNZXRob2ROYW1lXSA9IGxvY2FsRXZlbnROYW1lLnNwbGl0KCcvJyk7XG4gICAgY29uc3QgcmVtb3RlRXZlbnROYW1lID0gZ2V0UmVtb3RlRXZlbnROYW1lKHNlcnZpY2VOYW1lLCBldmVudE1ldGhvZE5hbWUsIHNlcnZpY2VPcHRpb25zKTtcbiAgICB0aGlzLnNlcnZpY2VGcmFtZXdvcmtFdmVudEVtaXR0ZXIub24ocmVtb3RlRXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgY29uc3Qgc3Vic2NyaWJlUHJvbWlzZSA9IHRoaXMuX3N1YnNjcmliZUV2ZW50T25TZXJ2ZXIoc2VydmljZU5hbWUsIGV2ZW50TWV0aG9kTmFtZSwgc2VydmljZU9wdGlvbnMpO1xuICAgIHJldHVybiBuZXcgRGlzcG9zYWJsZSgoKSA9PiB7XG4gICAgICB0aGlzLnNlcnZpY2VGcmFtZXdvcmtFdmVudEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIocmVtb3RlRXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4gc3Vic2NyaWJlUHJvbWlzZS50aGVuKFxuICAgICAgICAgICgpID0+IHRoaXMuX3Vuc3Vic2NyaWJlRXZlbnRGcm9tU2VydmVyKHNlcnZpY2VOYW1lLCBldmVudE1ldGhvZE5hbWUsIHNlcnZpY2VPcHRpb25zKSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBjYWxsTWV0aG9kKFxuICAgICAgc2VydmljZU5hbWU6IHN0cmluZyxcbiAgICAgIG1ldGhvZE5hbWU6IHN0cmluZyxcbiAgICAgIG1ldGhvZEFyZ3M6ID9BcnJheTxhbnk+LFxuICAgICAgZXh0cmFPcHRpb25zOiA/YW55XG4gICAgKTogUHJvbWlzZTxhbnk+IHtcbiAgICBpZiAoIXRoaXMuc29ja2V0KSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ1JlbW90ZUV2ZW50QnVzIGNsb3NlZCAtIGNhbGxNZXRob2Q6Jywgc2VydmljZU5hbWUsIG1ldGhvZE5hbWUpO1xuICAgICAgLy8gRXJyb3IgY29uZGl0aW9uIHRoYXQgc2hvdWxkIG5ldmVyIGhhcHBlbiwgcmV0dXJuIGB1bmRlZmluZWRgLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7YXJncywgYXJnVHlwZXN9ID0gc2VyaWFsaXplQXJncyhtZXRob2RBcmdzIHx8IFtdKTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc29ja2V0LnhoclJlcXVlc3Qob2JqZWN0LmFzc2lnbih7XG4gICAgICAgIHVyaTogc2VydmljZU5hbWUgKyAnLycgKyBtZXRob2ROYW1lLFxuICAgICAgICBxczoge1xuICAgICAgICAgIGFyZ3MsXG4gICAgICAgICAgYXJnVHlwZXMsXG4gICAgICAgIH0sXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsIC8vIGRlZmF1bHQgcmVxdWVzdCBtZXRob2QgaXMgJ0dFVCcuXG4gICAgICB9LCBleHRyYU9wdGlvbnMgfHwge30pKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihlcnIpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNhbGxTZXJ2aWNlRnJhbWV3b3JrTWV0aG9kKFxuICAgICAgc2VydmljZU5hbWU6IHN0cmluZyxcbiAgICAgIG1ldGhvZE5hbWU6IHN0cmluZyxcbiAgICAgIG1ldGhvZEFyZ3M6IEFycmF5PGFueT4sXG4gICAgICBzZXJ2aWNlT3B0aW9uczogYW55LFxuICAgICAgdGltZW91dDogbnVtYmVyID1TRVJWSUNFX0ZSQU1FV09SS19SUENfVElNRU9VVF9NU1xuICAgICk6IFByb21pc2U8YW55PiB7XG5cbiAgICBjb25zdCByZXF1ZXN0SWQgPSB0aGlzLl9ycGNSZXF1ZXN0SWQgKys7XG5cbiAgICB0aGlzLnNvY2tldC5zZW5kKHtcbiAgICAgIHNlcnZpY2VOYW1lLFxuICAgICAgbWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZEFyZ3MsXG4gICAgICBzZXJ2aWNlT3B0aW9ucyxcbiAgICAgIHJlcXVlc3RJZCxcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLl9zZXJ2aWNlRnJhbWV3b3JrUnBjRW1pdHRlci5vbmNlKHJlcXVlc3RJZC50b1N0cmluZygpLCAoZXJyb3IsIHJlc3VsdCkgPT4ge1xuICAgICAgICBlcnJvciA/IHJlamVjdChlcnJvcikgOiByZXNvbHZlKHJlc3VsdCk7XG4gICAgICB9KTtcblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuX3NlcnZpY2VGcmFtZXdvcmtScGNFbWl0dGVyLnJlbW92ZUFsbExpc3RlbmVycyhyZXF1ZXN0SWQudG9TdHJpbmcoKSk7XG4gICAgICAgIHJlamVjdChgVGltZW91dCBhZnRlciAke3RpbWVvdXR9IGZvciAke3NlcnZpY2VOYW1lfS8ke21ldGhvZE5hbWV9YCk7XG4gICAgICB9LCB0aW1lb3V0KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIERlbGVnYXRlIFJQQyBmdW5jdGlvbnMgdG8gU2VydmljZUZyYW1ld29yay5DbGllbnRDb21wb25lbnRcbiAgY2FsbFJlbW90ZUZ1bmN0aW9uKC4uLmFyZ3M6IEFycmF5PGFueT4pOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnRDb21wb25lbnQuY2FsbFJlbW90ZUZ1bmN0aW9uLmFwcGx5KHRoaXMuX2NsaWVudENvbXBvbmVudCwgYXJncyk7XG4gIH1cbiAgY3JlYXRlUmVtb3RlT2JqZWN0KC4uLmFyZ3M6IEFycmF5PGFueT4pOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnRDb21wb25lbnQuY3JlYXRlUmVtb3RlT2JqZWN0LmFwcGx5KHRoaXMuX2NsaWVudENvbXBvbmVudCwgYXJncyk7XG4gIH1cbiAgY2FsbFJlbW90ZU1ldGhvZCguLi5hcmdzOiBBcnJheTxhbnk+KTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50Q29tcG9uZW50LmNhbGxSZW1vdGVNZXRob2QuYXBwbHkodGhpcy5fY2xpZW50Q29tcG9uZW50LCBhcmdzKTtcbiAgfVxuICBkaXNwb3NlUmVtb3RlT2JqZWN0KC4uLmFyZ3M6IEFycmF5PGFueT4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50Q29tcG9uZW50LmRpc3Bvc2VSZW1vdGVPYmplY3QuYXBwbHkodGhpcy5fY2xpZW50Q29tcG9uZW50LCBhcmdzKTtcbiAgfVxuXG4gIC8vIERlbGVnYXRlIG1hcnNoYWxsaW5nIHRvIHRoZSBTZXJ2aWNlRnJhbWV3b3JrLkNsaWVudENvbXBvbmVudCBjbGFzcy5cbiAgbWFyc2hhbCguLi5hcmdzKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50Q29tcG9uZW50Lm1hcnNoYWwoLi4uYXJncyk7XG4gIH1cbiAgdW5tYXJzaGFsKC4uLmFyZ3MpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnRDb21wb25lbnQudW5tYXJzaGFsKC4uLmFyZ3MpO1xuICB9XG4gIHJlZ2lzdGVyVHlwZSguLi5hcmdzKTogdm9pZCB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudENvbXBvbmVudC5yZWdpc3RlclR5cGUoLi4uYXJncyk7XG4gIH1cblxuICBjbG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNvY2tldC5jbG9zZSgpO1xuICAgIHRoaXMuc29ja2V0ID0gbnVsbDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE51Y2xpZGVSZW1vdGVFdmVudGJ1cztcbiJdfQ==
