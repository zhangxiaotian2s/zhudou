Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

'use babel';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _require = require('./utils');

var log = _require.log;
var logErrorAndThrow = _require.logErrorAndThrow;

var _require2 = require('./ObjectId');

var remoteObjectIdOfObjectId = _require2.remoteObjectIdOfObjectId;
var createContextObjectId = _require2.createContextObjectId;
var isContextObjectId = _require2.isContextObjectId;
var isPagedObjectId = _require2.isPagedObjectId;
var getWatchContextObjectId = _require2.getWatchContextObjectId;
var isWatchContextObjectId = _require2.isWatchContextObjectId;

var _require3 = require('./properties.js');

var convertProperties = _require3.convertProperties;
var getPagedProperties = _require3.getPagedProperties;

var _require4 = require('./values.js');

var convertValue = _require4.convertValue;

// TODO: Move these Chrome types to a shared package.

// description wins over value in display

// scope.object.description shows on RHS
// [ "catch" , "closure" , "global" , "local" , "with" ]

var _require5 = require('./DbgpSocket');

var STATUS_BREAK = _require5.STATUS_BREAK;

/**
 * Handles data value tracking between Chrome and Dbgp.
 *
 * Maps Dbgp properties to/from Chrome RemoteObjects.
 * RemoteObjects are only valid while the debuggee is paused.
 * Once the debuggee resumes, all RemoteObjects become invalid.
 */

var DataCache = (function () {
  function DataCache(socket) {
    _classCallCheck(this, DataCache);

    this._socket = socket;
    this._enableCount = 0;
    this._enabled = false;
    socket.onStatus(this._onStatusChanged.bind(this));
  }

  _createClass(DataCache, [{
    key: '_onStatusChanged',
    value: function _onStatusChanged(status) {
      switch (status) {
        case STATUS_BREAK:
          this._enable();
          break;
        default:
          this._disable();
          break;
      }
    }
  }, {
    key: '_disable',
    value: function _disable() {
      this._enabled = false;
    }
  }, {
    key: 'isEnabled',
    value: function isEnabled() {
      return this._enabled;
    }
  }, {
    key: '_enable',
    value: function _enable() {
      this._enableCount += 1;
      this._enabled = true;
    }
  }, {
    key: 'getScopesForFrame',
    value: _asyncToGenerator(function* (frameIndex) {
      var _this = this;

      if (!this.isEnabled()) {
        throw new Error('Must be enabled to get scopes.');
      }
      var contexts = yield this._socket.getContextsForFrame(frameIndex);
      return contexts.map(function (context) {
        return {
          object: _this._remoteObjectOfContext(frameIndex, context),
          type: contextNameToScopeType(context.name)
        };
      });
    })
  }, {
    key: 'evaluateOnCallFrame',
    value: _asyncToGenerator(function* (frameIndex, expression) {
      if (!this.isEnabled()) {
        throw new Error('Must be enabled to evaluate expression.');
      }

      var evaluatedResult = yield this._socket.evaluateOnCallFrame(frameIndex, expression);
      if (evaluatedResult.wasThrown) {
        return evaluatedResult;
      }
      var id = getWatchContextObjectId(this._enableCount, frameIndex);
      var result = convertValue(id, evaluatedResult.result);
      return {
        result: result,
        wasThrown: false
      };
    })
  }, {
    key: '_remoteObjectOfContext',
    value: function _remoteObjectOfContext(frameIndex, context) {
      return {
        description: context.name,
        type: 'object',
        objectId: remoteObjectIdOfObjectId(this._objectIdOfContext(frameIndex, context))
      };
    }
  }, {
    key: '_objectIdOfContext',
    value: function _objectIdOfContext(frameIndex, context) {
      return createContextObjectId(this._enableCount, frameIndex, context.id);
    }
  }, {
    key: 'getProperties',
    value: _asyncToGenerator(function* (remoteId) {
      var id = JSON.parse(remoteId);
      if (id.enableCount !== this._enableCount) {
        logErrorAndThrow('Got request for stale RemoteObjectId ' + remoteId);
      }

      // context and single paged ids require getting children from the debuggee and converting
      // them from dbgp to chrome format.
      if (isContextObjectId(id)) {
        return yield this._getContextProperties(id);
      } else if (isPagedObjectId(id)) {
        // Paged id's children are constructed directly in chrome format from the contents of the
        // object id. Does not require going to the debuggee.
        return getPagedProperties(id);
      } else {
        return yield this._getSinglePageOfProperties(id);
      }
    })
  }, {
    key: '_getSinglePageOfProperties',
    value: _asyncToGenerator(function* (id) {
      var properties = null;
      if (isWatchContextObjectId(id)) {
        properties = yield this._socket.getPropertiesByFullnameAllConexts(id.frameIndex, id.fullname, id.page);
      } else {
        properties = yield this._socket.getPropertiesByFullname(id.frameIndex, id.contextId, id.fullname, id.page);
      }
      return convertProperties(id, properties);
    })
  }, {
    key: '_getContextProperties',
    value: _asyncToGenerator(function* (id) {
      var properties = yield this._socket.getContextProperties(id.frameIndex, id.contextId);
      return convertProperties(id, properties);
    })
  }]);

  return DataCache;
})();

exports.DataCache = DataCache;

function contextNameToScopeType(name) {
  switch (name) {
    case 'Locals':
      return 'local';
    case 'Superglobals':
      return 'global';
    case 'User defined constants':
      return 'global';
    // TODO: Verify this ...
    default:
      log('Unexpected context name: ' + name);
      return 'closure';
  }
}
// [ "array" , "date" , "node" , "null" , "regexp" ]
// [ "boolean" , "function" , "number" , "object" , "string" , "undefined" ]
//# sourceMappingURL=data:application/json;base64,
