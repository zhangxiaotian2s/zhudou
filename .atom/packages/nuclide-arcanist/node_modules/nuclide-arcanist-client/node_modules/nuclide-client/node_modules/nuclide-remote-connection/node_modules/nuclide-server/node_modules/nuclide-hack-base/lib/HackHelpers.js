Object.defineProperty(exports, '__esModule', {
  value: true
});

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var getHackExecOptions = _asyncToGenerator(function* (localFile) {
  // $FlowFixMe incompatible type.

  var _ref = yield Promise.all([
  // `stdout` would be empty if there is no such command.
  (0, _nuclideCommons.checkOutput)('which', [PATH_TO_HH_CLIENT]), findHackConfigDir(localFile)]);

  var _ref2 = _slicedToArray(_ref, 2);

  var hhResult = _ref2[0];
  var hackRoot = _ref2[1];

  var hackCommand = hhResult.stdout.trim();
  if (hackRoot && hackCommand) {
    return { hackRoot: hackRoot, hackCommand: hackCommand };
  } else {
    return null;
  }
}

/**
 * Executes hh_client with proper arguments returning the result string or json object.
 */
);

exports.getHackExecOptions = getHackExecOptions;

var callHHClient = _asyncToGenerator(function* (args, errorStream, outputJson, processInput, filePath) {

  if (!hhPromiseQueue) {
    hhPromiseQueue = new _nuclideCommons.PromiseQueue();
  }

  var hackExecOptions = yield getHackExecOptions(filePath);
  if (!hackExecOptions) {
    return null;
  }
  var hackRoot = hackExecOptions.hackRoot;

  (0, _assert2['default'])(hhPromiseQueue);
  return hhPromiseQueue.submit(_asyncToGenerator(function* (resolve, reject) {
    // Append args on the end of our commands.
    var defaults = ['--retries', '0', '--retry-if-init', 'false', '--from', 'nuclide'];
    if (outputJson) {
      defaults.unshift('--json');
    }

    var allArgs = defaults.concat(args);
    allArgs.push(hackRoot);

    var execResult = null;
    try {
      execResult = yield (0, _nuclideCommons.checkOutput)(PATH_TO_HH_CLIENT, allArgs, { stdin: processInput });
    } catch (err) {
      reject(err);
      return;
    }
    var _execResult = execResult;
    var stdout = _execResult.stdout;
    var stderr = _execResult.stderr;

    if (stderr.indexOf(HH_SERVER_INIT_MESSAGE) !== -1) {
      reject(new Error(HH_SERVER_INIT_MESSAGE + ': try: `arc build` or try again later!'));
      return;
    } else if (stderr.startsWith(HH_SERVER_BUSY_MESSAGE)) {
      reject(new Error(HH_SERVER_BUSY_MESSAGE + ': try: `arc build` or try again later!'));
      return;
    }

    var output = errorStream ? stderr : stdout;
    if (!outputJson) {
      resolve({ result: output, hackRoot: hackRoot });
      return;
    }
    try {
      resolve({ result: JSON.parse(output), hackRoot: hackRoot });
    } catch (err) {
      var errorMessage = 'hh_client error, args: [' + args.join(',') + ']\nstdout: ' + stdout + ', stderr: ' + stderr;
      logger.error(errorMessage);
      reject(new Error(errorMessage));
    }
  }));
});

exports.callHHClient = callHHClient;

var getSearchResults = _asyncToGenerator(function* (filePath, search, filterTypes, searchPostfix) {
  if (!search) {
    return null;
  }

  // `pendingSearchPromises` is used to temporally cache search result promises.
  // So, when a matching search query is done in parallel, it will wait and resolve
  // with the original search call.
  var searchPromise = pendingSearchPromises.get(search);
  if (!searchPromise) {
    searchPromise = callHHClient(
    /*args*/['--search' + (searchPostfix || ''), search],
    /*errorStream*/false,
    /*outputJson*/true,
    /*processInput*/null,
    /*file*/filePath);
    pendingSearchPromises.set(search, searchPromise);
  }

  var searchResponse = null;
  try {
    searchResponse = yield searchPromise;
  } catch (error) {
    throw error;
  } finally {
    pendingSearchPromises['delete'](search);
  }

  if (!searchResponse) {
    return null;
  }

  var _searchResponse = searchResponse;
  var searchResult = _searchResponse.result;
  var hackRoot = _searchResponse.hackRoot;

  var result = [];
  for (var entry of searchResult) {
    var resultFile = entry.filename;
    if (!resultFile.startsWith(hackRoot)) {
      // Filter out files out of repo results, e.g. hh internal files.
      continue;
    }
    result.push({
      line: entry.line - 1,
      column: entry.char_start - 1,
      name: entry.name,
      path: resultFile,
      length: entry.char_end - entry.char_start + 1,
      scope: entry.scope,
      additionalInfo: entry.desc
    });
  }

  if (filterTypes) {
    result = filterSearchResults(result, filterTypes);
  }
  return { hackRoot: hackRoot, result: result };
}

// Eventually this will happen on the hack side, but for now, this will do.
);

exports.getSearchResults = getSearchResults;
exports.symbolTypeToSearchTypes = symbolTypeToSearchTypes;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _nuclideCommons = require('nuclide-commons');

var _nuclideHackCommonLibConstants = require('nuclide-hack-common/lib/constants');

'use babel';

var PATH_TO_HH_CLIENT = 'hh_client';
var HH_SERVER_INIT_MESSAGE = 'hh_server still initializing';
var HH_SERVER_BUSY_MESSAGE = 'hh_server is busy';
var logger = require('nuclide-logging').getLogger();

var hhPromiseQueue = null;
var pendingSearchPromises = new Map();

var SYMBOL_CLASS_SEARCH_TYPES = Object.freeze([_nuclideHackCommonLibConstants.SearchResultType.CLASS, _nuclideHackCommonLibConstants.SearchResultType.ABSTRACT_CLASS, _nuclideHackCommonLibConstants.SearchResultType.TRAIT, _nuclideHackCommonLibConstants.SearchResultType.TYPEDEF, _nuclideHackCommonLibConstants.SearchResultType.INTERFACE]);
var SYMBOL_METHOD_SEARCH_TYPES = Object.freeze([_nuclideHackCommonLibConstants.SearchResultType.METHOD]);
var SYMBOL_FUNCTION_SEARCH_TYPES = Object.freeze([_nuclideHackCommonLibConstants.SearchResultType.FUNCTION]);

/**
* If this returns null, then it is not safe to run hack.
*/
function findHackConfigDir(localFile) {
  return (0, _nuclideCommons.findNearestFile)('.hhconfig', localFile);
}

function filterSearchResults(results, filter) {
  return results.filter(function (result) {
    var info = result.additionalInfo;
    var searchType = getSearchType(info);
    return filter.indexOf(searchType) !== -1;
  });
}

function getSearchType(info) {
  switch (info) {
    case 'typedef':
      return _nuclideHackCommonLibConstants.SearchResultType.TYPEDEF;
    case 'function':
      return _nuclideHackCommonLibConstants.SearchResultType.FUNCTION;
    case 'constant':
      return _nuclideHackCommonLibConstants.SearchResultType.CONSTANT;
    case 'trait':
      return _nuclideHackCommonLibConstants.SearchResultType.TRAIT;
    case 'interface':
      return _nuclideHackCommonLibConstants.SearchResultType.INTERFACE;
    case 'abstract class':
      return _nuclideHackCommonLibConstants.SearchResultType.ABSTRACT_CLASS;
    default:
      {
        if (info.startsWith('method') || info.startsWith('static method')) {
          return _nuclideHackCommonLibConstants.SearchResultType.METHOD;
        }
        if (info.startsWith('class var') || info.startsWith('static class var')) {
          return _nuclideHackCommonLibConstants.SearchResultType.CLASS_VAR;
        }
        return _nuclideHackCommonLibConstants.SearchResultType.CLASS;
      }
  }
}

function symbolTypeToSearchTypes(symbolType) {
  switch (symbolType) {
    case _nuclideHackCommonLibConstants.SymbolType.CLASS:
      return SYMBOL_CLASS_SEARCH_TYPES;
    case _nuclideHackCommonLibConstants.SymbolType.METHOD:
      return SYMBOL_METHOD_SEARCH_TYPES;
    case _nuclideHackCommonLibConstants.SymbolType.FUNCTION:
      return SYMBOL_FUNCTION_SEARCH_TYPES;
    default:
      return null;
  }
}
//# sourceMappingURL=data:application/json;base64,
