Object.defineProperty(exports, '__esModule', {
  value: true
});

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */
/* @providesModule HgConstants */

var _StatusCodeIdToNumber;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

'use babel';

/**
 * These are status codes used by Mercurial's output.
 * Documented in http://selenic.com/hg/help/status.
 */

var StatusCodeId = {
  ADDED: 'A',
  CLEAN: 'C',
  IGNORED: 'I',
  MODIFIED: 'M',
  MISSING: '!', // (deleted by non-hg command, but still tracked)
  REMOVED: 'R',
  UNTRACKED: '?'
};

/**
 * Internally, the HgRepository uses the string StatusCodeId to do bookkeeping.
 * However, GitRepository uses numbers to represent its statuses, and returns
 * statuses as numbers. In order to keep our status 'types' the same, we map the
 * string StatusCodeId to numbers.
 * The numbers themselves should not matter; they are meant to be passed
 * to ::isStatusNew/::isStatusModified to be interpreted.
 */

var StatusCodeNumber = {
  ADDED: 1,
  CLEAN: 2,
  IGNORED: 3,
  MODIFIED: 4,
  MISSING: 5,
  REMOVED: 6,
  UNTRACKED: 7
};

var StatusCodeIdToNumber = (_StatusCodeIdToNumber = {}, _defineProperty(_StatusCodeIdToNumber, StatusCodeId.ADDED, StatusCodeNumber.ADDED), _defineProperty(_StatusCodeIdToNumber, StatusCodeId.CLEAN, StatusCodeNumber.CLEAN), _defineProperty(_StatusCodeIdToNumber, StatusCodeId.IGNORED, StatusCodeNumber.IGNORED), _defineProperty(_StatusCodeIdToNumber, StatusCodeId.MODIFIED, StatusCodeNumber.MODIFIED), _defineProperty(_StatusCodeIdToNumber, StatusCodeId.MISSING, StatusCodeNumber.MISSING), _defineProperty(_StatusCodeIdToNumber, StatusCodeId.REMOVED, StatusCodeNumber.REMOVED), _defineProperty(_StatusCodeIdToNumber, StatusCodeId.UNTRACKED, StatusCodeNumber.UNTRACKED), _StatusCodeIdToNumber);

var HgStatusOption = {
  ONLY_NON_IGNORED: 1, // only the output of `hg status`
  ONLY_IGNORED: 2, // only the output of `hg status --ignored`
  ALL_STATUSES: 3 };

// the output of `hg status --all`

module.exports = {
  HgStatusOption: HgStatusOption,
  StatusCodeId: StatusCodeId,
  StatusCodeIdToNumber: StatusCodeIdToNumber,
  StatusCodeNumber: StatusCodeNumber
};

/** The origin URL of this repository. */

/** The working directory of this repository. */

/** The root directory that is opened in Atom, which this Repository serves. **/

// $FlowIssue (t6187050)

// $FlowIssue (t6187050)

// $FlowIssue (t6187050)

// $FlowIssue (t6187050)

// $FlowIssue (t6187050)

// $FlowIssue (t6187050)

// $FlowIssue (t6187050)

// List of bookmarks at this revision.
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWhnLXJlcG9zaXRvcnktYmFzZS9saWIvaGctY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsV0FBVyxDQUFDOzs7Ozs7O0FBOEJaLElBQU0sWUFBZ0QsR0FBRztBQUN2RCxPQUFLLEVBQUUsR0FBRztBQUNWLE9BQUssRUFBRSxHQUFHO0FBQ1YsU0FBTyxFQUFFLEdBQUc7QUFDWixVQUFRLEVBQUUsR0FBRztBQUNiLFNBQU8sRUFBRSxHQUFHO0FBQ1osU0FBTyxFQUFFLEdBQUc7QUFDWixXQUFTLEVBQUUsR0FBRztDQUNmLENBQUM7Ozs7Ozs7Ozs7O0FBV0YsSUFBTSxnQkFBd0QsR0FBRztBQUMvRCxPQUFLLEVBQUUsQ0FBQztBQUNSLE9BQUssRUFBRSxDQUFDO0FBQ1IsU0FBTyxFQUFFLENBQUM7QUFDVixVQUFRLEVBQUUsQ0FBQztBQUNYLFNBQU8sRUFBRSxDQUFDO0FBQ1YsU0FBTyxFQUFFLENBQUM7QUFDVixXQUFTLEVBQUUsQ0FBQztDQUNiLENBQUM7O0FBRUYsSUFBTSxvQkFBdUUsdUVBRTFFLFlBQVksQ0FBQyxLQUFLLEVBQUcsZ0JBQWdCLENBQUMsS0FBSywwQ0FFM0MsWUFBWSxDQUFDLEtBQUssRUFBRyxnQkFBZ0IsQ0FBQyxLQUFLLDBDQUUzQyxZQUFZLENBQUMsT0FBTyxFQUFHLGdCQUFnQixDQUFDLE9BQU8sMENBRS9DLFlBQVksQ0FBQyxRQUFRLEVBQUcsZ0JBQWdCLENBQUMsUUFBUSwwQ0FFakQsWUFBWSxDQUFDLE9BQU8sRUFBRyxnQkFBZ0IsQ0FBQyxPQUFPLDBDQUUvQyxZQUFZLENBQUMsT0FBTyxFQUFHLGdCQUFnQixDQUFDLE9BQU8sMENBRS9DLFlBQVksQ0FBQyxTQUFTLEVBQUcsZ0JBQWdCLENBQUMsU0FBUyx5QkFDckQsQ0FBQzs7QUFHRixJQUFNLGNBQW9ELEdBQUc7QUFDM0Qsa0JBQWdCLEVBQUUsQ0FBQztBQUNuQixjQUFZLEVBQUUsQ0FBQztBQUNmLGNBQVksRUFBRSxDQUFDLEVBQ2hCLENBQUM7Ozs7QUFzQ0YsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLGdCQUFjLEVBQWQsY0FBYztBQUNkLGNBQVksRUFBWixZQUFZO0FBQ1osc0JBQW9CLEVBQXBCLG9CQUFvQjtBQUNwQixrQkFBZ0IsRUFBaEIsZ0JBQWdCO0NBQ2pCLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtaGctcmVwb3NpdG9yeS1iYXNlL2xpYi9oZy1jb25zdGFudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLyogQHByb3ZpZGVzTW9kdWxlIEhnQ29uc3RhbnRzICovXG5cbmltcG9ydCB0eXBlIHtOdWNsaWRlVXJpfSBmcm9tICdudWNsaWRlLXJlbW90ZS11cmknO1xuXG5leHBvcnQgdHlwZSBIZ1JlcG9zaXRvcnlPcHRpb25zID0ge1xuICAvKiogVGhlIG9yaWdpbiBVUkwgb2YgdGhpcyByZXBvc2l0b3J5LiAqL1xuICBvcmlnaW5VUkw6IHN0cmluZztcblxuICAvKiogVGhlIHdvcmtpbmcgZGlyZWN0b3J5IG9mIHRoaXMgcmVwb3NpdG9yeS4gKi9cbiAgd29ya2luZ0RpcmVjdG9yeTogYXRvbSREaXJlY3Rvcnk7XG5cbiAgLyoqIFRoZSByb290IGRpcmVjdG9yeSB0aGF0IGlzIG9wZW5lZCBpbiBBdG9tLCB3aGljaCB0aGlzIFJlcG9zaXRvcnkgc2VydmVzLiAqKi9cbiAgcHJvamVjdFJvb3REaXJlY3Rvcnk6IGF0b20kRGlyZWN0b3J5O1xufTtcblxuLyoqXG4gKiBUaGVzZSBhcmUgc3RhdHVzIGNvZGVzIHVzZWQgYnkgTWVyY3VyaWFsJ3Mgb3V0cHV0LlxuICogRG9jdW1lbnRlZCBpbiBodHRwOi8vc2VsZW5pYy5jb20vaGcvaGVscC9zdGF0dXMuXG4gKi9cbmV4cG9ydCB0eXBlIFN0YXR1c0NvZGVJZFZhbHVlID0gJ0EnIHwgJ0MnIHwgJ0knIHwgJ00nIHwgJyEnIHwgJ1InIHwgJz8nO1xuY29uc3QgU3RhdHVzQ29kZUlkOiB7W2tleTogc3RyaW5nXTogU3RhdHVzQ29kZUlkVmFsdWV9ID0ge1xuICBBRERFRDogJ0EnLFxuICBDTEVBTjogJ0MnLFxuICBJR05PUkVEOiAnSScsXG4gIE1PRElGSUVEOiAnTScsXG4gIE1JU1NJTkc6ICchJywgLy8gKGRlbGV0ZWQgYnkgbm9uLWhnIGNvbW1hbmQsIGJ1dCBzdGlsbCB0cmFja2VkKVxuICBSRU1PVkVEOiAnUicsXG4gIFVOVFJBQ0tFRDogJz8nLFxufTtcblxuLyoqXG4gKiBJbnRlcm5hbGx5LCB0aGUgSGdSZXBvc2l0b3J5IHVzZXMgdGhlIHN0cmluZyBTdGF0dXNDb2RlSWQgdG8gZG8gYm9va2tlZXBpbmcuXG4gKiBIb3dldmVyLCBHaXRSZXBvc2l0b3J5IHVzZXMgbnVtYmVycyB0byByZXByZXNlbnQgaXRzIHN0YXR1c2VzLCBhbmQgcmV0dXJuc1xuICogc3RhdHVzZXMgYXMgbnVtYmVycy4gSW4gb3JkZXIgdG8ga2VlcCBvdXIgc3RhdHVzICd0eXBlcycgdGhlIHNhbWUsIHdlIG1hcCB0aGVcbiAqIHN0cmluZyBTdGF0dXNDb2RlSWQgdG8gbnVtYmVycy5cbiAqIFRoZSBudW1iZXJzIHRoZW1zZWx2ZXMgc2hvdWxkIG5vdCBtYXR0ZXI7IHRoZXkgYXJlIG1lYW50IHRvIGJlIHBhc3NlZFxuICogdG8gOjppc1N0YXR1c05ldy86OmlzU3RhdHVzTW9kaWZpZWQgdG8gYmUgaW50ZXJwcmV0ZWQuXG4gKi9cbmV4cG9ydCB0eXBlIFN0YXR1c0NvZGVOdW1iZXJWYWx1ZSA9IDEgfCAyIHwgMyB8IDQgfCA1IHwgNiB8IDc7XG5jb25zdCBTdGF0dXNDb2RlTnVtYmVyOiB7W2tleTogc3RyaW5nXTogU3RhdHVzQ29kZU51bWJlclZhbHVlfSA9IHtcbiAgQURERUQ6IDEsXG4gIENMRUFOOiAyLFxuICBJR05PUkVEOiAzLFxuICBNT0RJRklFRDogNCxcbiAgTUlTU0lORzogNSxcbiAgUkVNT1ZFRDogNixcbiAgVU5UUkFDS0VEOiA3LFxufTtcblxuY29uc3QgU3RhdHVzQ29kZUlkVG9OdW1iZXI6IHtba2V5OiBTdGF0dXNDb2RlSWRWYWx1ZV06IFN0YXR1c0NvZGVOdW1iZXJWYWx1ZX0gPSB7XG4gIC8vICRGbG93SXNzdWUgKHQ2MTg3MDUwKVxuICBbU3RhdHVzQ29kZUlkLkFEREVEXTogU3RhdHVzQ29kZU51bWJlci5BRERFRCxcbiAgLy8gJEZsb3dJc3N1ZSAodDYxODcwNTApXG4gIFtTdGF0dXNDb2RlSWQuQ0xFQU5dOiBTdGF0dXNDb2RlTnVtYmVyLkNMRUFOLFxuICAvLyAkRmxvd0lzc3VlICh0NjE4NzA1MClcbiAgW1N0YXR1c0NvZGVJZC5JR05PUkVEXTogU3RhdHVzQ29kZU51bWJlci5JR05PUkVELFxuICAvLyAkRmxvd0lzc3VlICh0NjE4NzA1MClcbiAgW1N0YXR1c0NvZGVJZC5NT0RJRklFRF06IFN0YXR1c0NvZGVOdW1iZXIuTU9ESUZJRUQsXG4gIC8vICRGbG93SXNzdWUgKHQ2MTg3MDUwKVxuICBbU3RhdHVzQ29kZUlkLk1JU1NJTkddOiBTdGF0dXNDb2RlTnVtYmVyLk1JU1NJTkcsXG4gIC8vICRGbG93SXNzdWUgKHQ2MTg3MDUwKVxuICBbU3RhdHVzQ29kZUlkLlJFTU9WRURdOiBTdGF0dXNDb2RlTnVtYmVyLlJFTU9WRUQsXG4gIC8vICRGbG93SXNzdWUgKHQ2MTg3MDUwKVxuICBbU3RhdHVzQ29kZUlkLlVOVFJBQ0tFRF06IFN0YXR1c0NvZGVOdW1iZXIuVU5UUkFDS0VELFxufTtcblxuZXhwb3J0IHR5cGUgSGdTdGF0dXNPcHRpb25WYWx1ZSA9IDEgfCAyIHwgMztcbmNvbnN0IEhnU3RhdHVzT3B0aW9uOiB7W2tleTogc3RyaW5nXTogSGdTdGF0dXNPcHRpb25WYWx1ZX0gPSB7XG4gIE9OTFlfTk9OX0lHTk9SRUQ6IDEsICAvLyBvbmx5IHRoZSBvdXRwdXQgb2YgYGhnIHN0YXR1c2BcbiAgT05MWV9JR05PUkVEOiAyLCAgICAgIC8vIG9ubHkgdGhlIG91dHB1dCBvZiBgaGcgc3RhdHVzIC0taWdub3JlZGBcbiAgQUxMX1NUQVRVU0VTOiAzLCAgICAgIC8vIHRoZSBvdXRwdXQgb2YgYGhnIHN0YXR1cyAtLWFsbGBcbn07XG5cbmV4cG9ydCB0eXBlIExpbmVEaWZmID0ge1xuICBvbGRTdGFydDogbnVtYmVyO1xuICBvbGRMaW5lczogbnVtYmVyO1xuICBuZXdTdGFydDogbnVtYmVyO1xuICBuZXdMaW5lczogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgRGlmZkluZm8gPSB7XG4gIGFkZGVkOiBudW1iZXI7XG4gIGRlbGV0ZWQ6IG51bWJlcjtcbiAgbGluZURpZmZzOiBBcnJheTxMaW5lRGlmZj47XG59O1xuXG5leHBvcnQgdHlwZSBSZXZpc2lvbkluZm8gPSB7XG4gIGlkOiBudW1iZXI7XG4gIGhhc2g6IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgYXV0aG9yOiBzdHJpbmc7XG4gIGRhdGU6IERhdGU7XG4gIC8vIExpc3Qgb2YgYm9va21hcmtzIGF0IHRoaXMgcmV2aXNpb24uXG4gIGJvb2ttYXJrczogQXJyYXk8c3RyaW5nPjtcbn07XG5cbmV4cG9ydCB0eXBlIFJldmlzaW9uRmlsZUNvcHkgPSB7XG4gIGZyb206IE51Y2xpZGVVcmk7XG4gIHRvOiBOdWNsaWRlVXJpO1xufTtcblxuZXhwb3J0IHR5cGUgUmV2aXNpb25GaWxlQ2hhbmdlcyA9IHtcbiAgYWxsOiBBcnJheTxOdWNsaWRlVXJpPjtcbiAgYWRkZWQ6IEFycmF5PE51Y2xpZGVVcmk+O1xuICBkZWxldGVkOiBBcnJheTxOdWNsaWRlVXJpPjtcbiAgY29waWVkOiBBcnJheTxSZXZpc2lvbkZpbGVDb3B5PjtcbiAgbW9kaWZpZWQ6IEFycmF5PE51Y2xpZGVVcmk+O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEhnU3RhdHVzT3B0aW9uLFxuICBTdGF0dXNDb2RlSWQsXG4gIFN0YXR1c0NvZGVJZFRvTnVtYmVyLFxuICBTdGF0dXNDb2RlTnVtYmVyLFxufTtcbiJdfQ==
