
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */
var https = require('https');
var http = require('http');
var fs = require('fs');
var path = require('path');
var url = require('url');

var version = undefined;

function processArgs() {
  var args = process.argv.slice(2);
  var processedArgs = {};

  args.forEach(function (argument, index) {
    if (index % 2 !== 0) {
      processedArgs[args[index - 1].slice(2)] = argument;
    }
  });
  return processedArgs;
}

function startServer(args) {
  var _webServer = undefined;
  if (args.key && args.cert && args.ca) {
    var webServerOptions = {
      key: fs.readFileSync(args.key),
      cert: fs.readFileSync(args.cert),
      ca: fs.readFileSync(args.ca),
      requestCert: true,
      rejectUnauthorized: true
    };

    _webServer = https.createServer(webServerOptions, handleRequest);
    console.log('running in secure mode');
  } else {
    _webServer = http.createServer(handleRequest);
  }

  _webServer.on('listening', function () {
    console.log('listening on port ' + args.port);
  });

  _webServer.listen(args.port || 8084, '::');
}

function handleRequest(request, response) {
  var path = url.parse(request.url, false).pathname;

  switch (path) {
    case '/heartbeat':
      handleVersion(request, response);
      break;
    default:
      response.writeHead(500);
      response.write('This mock server does not understand that command');
      response.end();
      break;
  }
}

function handleVersion(request, response) {
  response.writeHead(200);
  response.write(version);
  response.end();
}

// Set the initial version by reading from the file.
try {
  var json = JSON.parse(fs.readFileSync(path.resolve(__dirname, 'version.json')));
  version = json.Version.toString();
} catch (e) {
  version = 'test-version';
}
startServer(processArgs());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9zY3JpcHRzL21vY2svbnVjbGlkZS1tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7O0FBVVosSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3QixJQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFM0IsSUFBSSxPQUFPLFlBQUEsQ0FBQzs7QUFFWixTQUFTLFdBQVcsR0FBRztBQUNyQixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQyxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUM7O0FBRXpCLE1BQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxRQUFRLEVBQUUsS0FBSyxFQUFFO0FBQ3RDLFFBQUksS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDbkIsbUJBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQztLQUNsRDtHQUNGLENBQUMsQ0FBQztBQUNILFNBQU8sYUFBYSxDQUFDO0NBQ3RCOztBQUVELFNBQVMsV0FBVyxDQUFDLElBQUksRUFBRTtBQUN6QixNQUFJLFVBQVUsWUFBQSxDQUFDO0FBQ2YsTUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRTtBQUNwQyxRQUFNLGdCQUFnQixHQUFHO0FBQ3ZCLFNBQUcsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDOUIsVUFBSSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztBQUNoQyxRQUFFLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQzVCLGlCQUFXLEVBQUUsSUFBSTtBQUNqQix3QkFBa0IsRUFBRSxJQUFJO0tBQ3pCLENBQUM7O0FBRUYsY0FBVSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDakUsV0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0dBQ3ZDLE1BQU07QUFDTCxjQUFVLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztHQUMvQzs7QUFFRCxZQUFVLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxZQUFZO0FBQ3JDLFdBQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQy9DLENBQUMsQ0FBQzs7QUFFSCxZQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQzVDOztBQUVELFNBQVMsYUFBYSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDeEMsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQzs7QUFFcEQsVUFBUSxJQUFJO0FBQ1YsU0FBSyxZQUFZO0FBQ2YsbUJBQWEsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDakMsWUFBTTtBQUFBLEFBQ1I7QUFDRSxjQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLGNBQVEsQ0FBQyxLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQztBQUNwRSxjQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDZixZQUFNO0FBQUEsR0FDVDtDQUNGOztBQUdELFNBQVMsYUFBYSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDeEMsVUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN4QixVQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3hCLFVBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUNoQjs7O0FBR0QsSUFBSTtBQUNGLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEYsU0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7Q0FDbkMsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNWLFNBQU8sR0FBRyxjQUFjLENBQUM7Q0FDMUI7QUFDRCxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1zZXJ2ZXIvc2NyaXB0cy9tb2NrL251Y2xpZGUtbWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5jb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5jb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHVybCA9IHJlcXVpcmUoJ3VybCcpO1xuXG5sZXQgdmVyc2lvbjtcblxuZnVuY3Rpb24gcHJvY2Vzc0FyZ3MoKSB7XG4gIGNvbnN0IGFyZ3MgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG4gIGNvbnN0IHByb2Nlc3NlZEFyZ3MgPSB7fTtcblxuICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGFyZ3VtZW50LCBpbmRleCkge1xuICAgIGlmIChpbmRleCAlIDIgIT09IDApIHtcbiAgICAgIHByb2Nlc3NlZEFyZ3NbYXJnc1tpbmRleC0xXS5zbGljZSgyKV0gPSBhcmd1bWVudDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcHJvY2Vzc2VkQXJncztcbn1cblxuZnVuY3Rpb24gc3RhcnRTZXJ2ZXIoYXJncykge1xuICBsZXQgX3dlYlNlcnZlcjtcbiAgaWYgKGFyZ3Mua2V5ICYmIGFyZ3MuY2VydCAmJiBhcmdzLmNhKSB7XG4gICAgY29uc3Qgd2ViU2VydmVyT3B0aW9ucyA9IHtcbiAgICAgIGtleTogZnMucmVhZEZpbGVTeW5jKGFyZ3Mua2V5KSxcbiAgICAgIGNlcnQ6IGZzLnJlYWRGaWxlU3luYyhhcmdzLmNlcnQpLFxuICAgICAgY2E6IGZzLnJlYWRGaWxlU3luYyhhcmdzLmNhKSxcbiAgICAgIHJlcXVlc3RDZXJ0OiB0cnVlLFxuICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiB0cnVlLFxuICAgIH07XG5cbiAgICBfd2ViU2VydmVyID0gaHR0cHMuY3JlYXRlU2VydmVyKHdlYlNlcnZlck9wdGlvbnMsIGhhbmRsZVJlcXVlc3QpO1xuICAgIGNvbnNvbGUubG9nKCdydW5uaW5nIGluIHNlY3VyZSBtb2RlJyk7XG4gIH0gZWxzZSB7XG4gICAgX3dlYlNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKGhhbmRsZVJlcXVlc3QpO1xuICB9XG5cbiAgX3dlYlNlcnZlci5vbignbGlzdGVuaW5nJywgZnVuY3Rpb24gKCkge1xuICAgIGNvbnNvbGUubG9nKCdsaXN0ZW5pbmcgb24gcG9ydCAnICsgYXJncy5wb3J0KTtcbiAgfSk7XG5cbiAgX3dlYlNlcnZlci5saXN0ZW4oYXJncy5wb3J0IHx8IDgwODQsICc6OicpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVSZXF1ZXN0KHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IHBhdGggPSB1cmwucGFyc2UocmVxdWVzdC51cmwsIGZhbHNlKS5wYXRobmFtZTtcblxuICBzd2l0Y2ggKHBhdGgpIHtcbiAgICBjYXNlICcvaGVhcnRiZWF0JzpcbiAgICAgIGhhbmRsZVZlcnNpb24ocmVxdWVzdCwgcmVzcG9uc2UpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlc3BvbnNlLndyaXRlSGVhZCg1MDApO1xuICAgICAgcmVzcG9uc2Uud3JpdGUoJ1RoaXMgbW9jayBzZXJ2ZXIgZG9lcyBub3QgdW5kZXJzdGFuZCB0aGF0IGNvbW1hbmQnKTtcbiAgICAgIHJlc3BvbnNlLmVuZCgpO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBoYW5kbGVWZXJzaW9uKHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHJlc3BvbnNlLndyaXRlSGVhZCgyMDApO1xuICByZXNwb25zZS53cml0ZSh2ZXJzaW9uKTtcbiAgcmVzcG9uc2UuZW5kKCk7XG59XG5cbi8vIFNldCB0aGUgaW5pdGlhbCB2ZXJzaW9uIGJ5IHJlYWRpbmcgZnJvbSB0aGUgZmlsZS5cbnRyeSB7XG4gIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAndmVyc2lvbi5qc29uJykpKTtcbiAgdmVyc2lvbiA9IGpzb24uVmVyc2lvbi50b1N0cmluZygpO1xufSBjYXRjaCAoZSkge1xuICB2ZXJzaW9uID0gJ3Rlc3QtdmVyc2lvbic7XG59XG5zdGFydFNlcnZlcihwcm9jZXNzQXJncygpKTtcbiJdfQ==
