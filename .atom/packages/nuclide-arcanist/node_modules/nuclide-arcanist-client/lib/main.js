var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var findDiagnostics = _asyncToGenerator(function* (fileNames) {
  var _ref4;

  var serviceToFileNames = new Map();
  for (var file of fileNames) {
    var service = getService(file);
    if (!serviceToFileNames.has(service)) {
      serviceToFileNames.set(service, []);
    }
    var files = serviceToFileNames.get(service);
    files.push(file);
  }
  var results = [];
  for (var _ref3 of serviceToFileNames) {
    var _ref2 = _slicedToArray(_ref3, 2);

    var service = _ref2[0];
    var files = _ref2[1];

    results.push(service.findDiagnostics(files));
  }

  return (_ref4 = []).concat.apply(_ref4, _toConsumableArray((yield Promise.all(results))));
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

'use babel';

function getService(fileName) {
  return require('nuclide-client').getServiceByNuclideUri('ArcanistBaseService', fileName);
}

function findArcConfigDirectory(fileName) {
  return getService(fileName).findArcConfigDirectory(fileName);
}

function readArcConfig(fileName) {
  return getService(fileName).readArcConfig(fileName);
}

function findArcProjectIdOfPath(fileName) {
  return getService(fileName).findArcProjectIdOfPath(fileName);
}

function getProjectRelativePath(fileName) {
  return getService(fileName).getProjectRelativePath(fileName);
}

module.exports = {
  findArcConfigDirectory: findArcConfigDirectory,
  readArcConfig: readArcConfig,
  findArcProjectIdOfPath: findArcProjectIdOfPath,
  getProjectRelativePath: getProjectRelativePath,
  findDiagnostics: findDiagnostics
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWFyY2FuaXN0LWNsaWVudC9saWIvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztJQWtDZSxlQUFlLHFCQUE5QixXQUErQixTQUErQixFQUEwQjs7O0FBQ3RGLE1BQU0sa0JBQStELEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNsRixPQUFLLElBQU0sSUFBSSxJQUFJLFNBQVMsRUFBRTtBQUM1QixRQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakMsUUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNwQyx3QkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ3JDO0FBQ0QsUUFBTSxLQUFLLEdBQUcsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzlDLFNBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDbEI7QUFDRCxNQUFNLE9BQXNDLEdBQUcsRUFBRSxDQUFDO0FBQ2xELG9CQUErQixrQkFBa0IsRUFBRTs7O1FBQXZDLE9BQU87UUFBRSxLQUFLOztBQUN4QixXQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztHQUM5Qzs7QUFFRCxTQUFPLFNBQUEsRUFBRSxFQUFDLE1BQU0sTUFBQSw0QkFBSyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUEsRUFBRSxDQUFDO0NBQ25EOzs7Ozs7Ozs7Ozs7OztBQWxERCxXQUFXLENBQUM7O0FBY1osU0FBUyxVQUFVLENBQUMsUUFBb0IsRUFBdUI7QUFDN0QsU0FBTyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxxQkFBcUIsRUFBRSxRQUFRLENBQUMsQ0FBQztDQUMxRjs7QUFFRCxTQUFTLHNCQUFzQixDQUFDLFFBQW9CLEVBQXdCO0FBQzFFLFNBQU8sVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQzlEOztBQUVELFNBQVMsYUFBYSxDQUFDLFFBQW9CLEVBQW9CO0FBQzdELFNBQU8sVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUNyRDs7QUFFRCxTQUFTLHNCQUFzQixDQUFDLFFBQW9CLEVBQW9CO0FBQ3RFLFNBQU8sVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQzlEOztBQUVELFNBQVMsc0JBQXNCLENBQUMsUUFBb0IsRUFBb0I7QUFDdEUsU0FBTyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDOUQ7O0FBb0JELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZix3QkFBc0IsRUFBdEIsc0JBQXNCO0FBQ3RCLGVBQWEsRUFBYixhQUFhO0FBQ2Isd0JBQXNCLEVBQXRCLHNCQUFzQjtBQUN0Qix3QkFBc0IsRUFBdEIsc0JBQXNCO0FBQ3RCLGlCQUFlLEVBQWYsZUFBZTtDQUNoQixDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWFyY2FuaXN0LWNsaWVudC9saWIvbWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB0eXBlIHtOdWNsaWRlVXJpfSBmcm9tICdudWNsaWRlLXJlbW90ZS11cmknO1xuaW1wb3J0IHR5cGUge0FyY2FuaXN0QmFzZVNlcnZpY2V9IGZyb20gJ251Y2xpZGUtYXJjYW5pc3QtYmFzZSc7XG5cbmZ1bmN0aW9uIGdldFNlcnZpY2UoZmlsZU5hbWU6IE51Y2xpZGVVcmkpOiBBcmNhbmlzdEJhc2VTZXJ2aWNlIHtcbiAgcmV0dXJuIHJlcXVpcmUoJ251Y2xpZGUtY2xpZW50JykuZ2V0U2VydmljZUJ5TnVjbGlkZVVyaSgnQXJjYW5pc3RCYXNlU2VydmljZScsIGZpbGVOYW1lKTtcbn1cblxuZnVuY3Rpb24gZmluZEFyY0NvbmZpZ0RpcmVjdG9yeShmaWxlTmFtZTogTnVjbGlkZVVyaSk6IFByb21pc2U8P051Y2xpZGVVcmk+IHtcbiAgcmV0dXJuIGdldFNlcnZpY2UoZmlsZU5hbWUpLmZpbmRBcmNDb25maWdEaXJlY3RvcnkoZmlsZU5hbWUpO1xufVxuXG5mdW5jdGlvbiByZWFkQXJjQ29uZmlnKGZpbGVOYW1lOiBOdWNsaWRlVXJpKTogUHJvbWlzZTw/T2JqZWN0PiB7XG4gIHJldHVybiBnZXRTZXJ2aWNlKGZpbGVOYW1lKS5yZWFkQXJjQ29uZmlnKGZpbGVOYW1lKTtcbn1cblxuZnVuY3Rpb24gZmluZEFyY1Byb2plY3RJZE9mUGF0aChmaWxlTmFtZTogTnVjbGlkZVVyaSk6IFByb21pc2U8P3N0cmluZz4ge1xuICByZXR1cm4gZ2V0U2VydmljZShmaWxlTmFtZSkuZmluZEFyY1Byb2plY3RJZE9mUGF0aChmaWxlTmFtZSk7XG59XG5cbmZ1bmN0aW9uIGdldFByb2plY3RSZWxhdGl2ZVBhdGgoZmlsZU5hbWU6IE51Y2xpZGVVcmkpOiBQcm9taXNlPD9zdHJpbmc+IHtcbiAgcmV0dXJuIGdldFNlcnZpY2UoZmlsZU5hbWUpLmdldFByb2plY3RSZWxhdGl2ZVBhdGgoZmlsZU5hbWUpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBmaW5kRGlhZ25vc3RpY3MoZmlsZU5hbWVzOiBJdGVyYWJsZTxOdWNsaWRlVXJpPik6IFByb21pc2U8QXJyYXk8T2JqZWN0Pj4ge1xuICBjb25zdCBzZXJ2aWNlVG9GaWxlTmFtZXM6IE1hcDxBcmNhbmlzdEJhc2VTZXJ2aWNlLCBBcnJheTxOdWNsaWRlVXJpPj4gPSBuZXcgTWFwKCk7XG4gIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlTmFtZXMpIHtcbiAgICBjb25zdCBzZXJ2aWNlID0gZ2V0U2VydmljZShmaWxlKTtcbiAgICBpZiAoIXNlcnZpY2VUb0ZpbGVOYW1lcy5oYXMoc2VydmljZSkpIHtcbiAgICAgIHNlcnZpY2VUb0ZpbGVOYW1lcy5zZXQoc2VydmljZSwgW10pO1xuICAgIH1cbiAgICBjb25zdCBmaWxlcyA9IHNlcnZpY2VUb0ZpbGVOYW1lcy5nZXQoc2VydmljZSk7XG4gICAgZmlsZXMucHVzaChmaWxlKTtcbiAgfVxuICBjb25zdCByZXN1bHRzOiBBcnJheTxQcm9taXNlPEFycmF5PE9iamVjdD4+PiA9IFtdO1xuICBmb3IgKGNvbnN0IFtzZXJ2aWNlLCBmaWxlc10gb2Ygc2VydmljZVRvRmlsZU5hbWVzKSB7XG4gICAgcmVzdWx0cy5wdXNoKHNlcnZpY2UuZmluZERpYWdub3N0aWNzKGZpbGVzKSk7XG4gIH1cblxuICByZXR1cm4gW10uY29uY2F0KC4uLihhd2FpdCBQcm9taXNlLmFsbChyZXN1bHRzKSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZmluZEFyY0NvbmZpZ0RpcmVjdG9yeSxcbiAgcmVhZEFyY0NvbmZpZyxcbiAgZmluZEFyY1Byb2plY3RJZE9mUGF0aCxcbiAgZ2V0UHJvamVjdFJlbGF0aXZlUGF0aCxcbiAgZmluZERpYWdub3N0aWNzLFxufTtcbiJdfQ==
