Object.defineProperty(exports, '__esModule', {
  value: true
});

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

'use babel';

// It's impactful to memoize our requires here since these commons are so often used.
var requireCache = {};
function requireFromCache(id) {
  if (!requireCache.hasOwnProperty(id)) {
    requireCache[id] = require(id);
  }
  return requireCache[id];
}

module.exports = Object.defineProperties({

  asyncFind: function asyncFind(items, test, thisArg) {
    return requireFromCache('./promises').asyncFind(items, test, thisArg);
  },

  asyncExecute: function asyncExecute(command, args, options) {
    return requireFromCache('./process').asyncExecute(command, args, options);
  },

  checkOutput: function checkOutput(command, args, options) {
    return requireFromCache('./process').checkOutput(command, args, options);
  },

  createArgsForScriptCommand: function createArgsForScriptCommand(command) {
    var args = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

    return requireFromCache('./process').createArgsForScriptCommand(command, args);
  },

  createExecEnvironment: function createExecEnvironment(originalEnv, commonBinaryPaths) {
    return requireFromCache('./process').createExecEnvironment(originalEnv, commonBinaryPaths);
  },

  denodeify: function denodeify(f) {
    return requireFromCache('./promises').denodeify(f);
  },

  safeSpawn: function safeSpawn(command, args) {
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    return requireFromCache('./process').safeSpawn(command, args, options);
  },

  scriptSafeSpawn: function scriptSafeSpawn(command) {
    var args = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    return requireFromCache('./process').scriptSafeSpawn(command, args, options);
  },

  scriptSafeSpawnAndObserveOutput: function scriptSafeSpawnAndObserveOutput(command) {
    var args = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    return requireFromCache('./process').scriptSafeSpawnAndObserveOutput(command, args, options);
  },

  observeStream: function observeStream(process) {
    return requireFromCache('./process').observeStream(process);
  },

  observeProcessExit: function observeProcessExit(createProcess) {
    return requireFromCache('./process').observeProcessExit(createProcess);
  },

  observeProcess: function observeProcess(createProcess) {
    return requireFromCache('./process').observeProcess(createProcess);
  },

  readFile: function readFile(filePath, options) {
    return requireFromCache('./filesystem').readFile(filePath, options);
  },

  toJsString: function toJsString(str) {
    return requireFromCache('./toJsString')(str);
  },

  findNearestFile: function findNearestFile(fileName, pathToDirectory) {
    return requireFromCache('./filesystem').findNearestFile(fileName, pathToDirectory);
  }

}, {
  array: {
    get: function get() {
      return requireFromCache('./array');
    },
    configurable: true,
    enumerable: true
  },
  set: {
    get: function get() {
      return requireFromCache('./set');
    },
    configurable: true,
    enumerable: true
  },
  map: {
    get: function get() {
      return requireFromCache('./map');
    },
    configurable: true,
    enumerable: true
  },
  object: {
    get: function get() {
      return requireFromCache('./object');
    },
    configurable: true,
    enumerable: true
  },
  fsPromise: {
    get: function get() {
      return requireFromCache('./filesystem');
    },
    configurable: true,
    enumerable: true
  },
  httpPromise: {
    get: function get() {
      return requireFromCache('./http');
    },
    configurable: true,
    enumerable: true
  },
  strings: {
    get: function get() {
      return requireFromCache('./strings');
    },
    configurable: true,
    enumerable: true
  },
  paths: {
    get: function get() {
      return requireFromCache('./paths');
    },
    configurable: true,
    enumerable: true
  },
  PromisePool: {
    get: function get() {
      return requireFromCache('./PromiseExecutors').PromisePool;
    },
    configurable: true,
    enumerable: true
  },
  PromiseQueue: {
    get: function get() {
      return requireFromCache('./PromiseExecutors').PromiseQueue;
    },
    configurable: true,
    enumerable: true
  },
  extend: {
    get: function get() {
      return requireFromCache('./extend');
    },
    configurable: true,
    enumerable: true
  },
  debounce: {
    get: function get() {
      return requireFromCache('./debounce');
    },
    configurable: true,
    enumerable: true
  },
  once: {
    get: function get() {
      return requireFromCache('./once');
    },
    configurable: true,
    enumerable: true
  },
  vcs: {
    get: function get() {
      return requireFromCache('./vcs');
    },
    configurable: true,
    enumerable: true
  },
  dnsUtils: {
    get: function get() {
      return requireFromCache('./dns_utils');
    },
    configurable: true,
    enumerable: true
  },
  env: {
    get: function get() {
      return requireFromCache('./environment');
    },
    configurable: true,
    enumerable: true
  },
  promises: {
    get: function get() {
      return requireFromCache('./promises');
    },
    configurable: true,
    enumerable: true
  },
  regexp: {
    get: function get() {
      return requireFromCache('./regexp');
    },
    configurable: true,
    enumerable: true
  },
  error: {
    get: function get() {
      return requireFromCache('./error');
    },
    configurable: true,
    enumerable: true
  },
  event: {
    get: function get() {
      return requireFromCache('./event');
    },
    configurable: true,
    enumerable: true
  },
  session: {
    get: function get() {
      return requireFromCache('./session');
    },
    configurable: true,
    enumerable: true
  },
  singleton: {
    get: function get() {
      return requireFromCache('./singleton');
    },
    configurable: true,
    enumerable: true
  },
  CircularBuffer: {
    get: function get() {
      return requireFromCache('./CircularBuffer');
    },
    configurable: true,
    enumerable: true
  },
  COMMON_BINARY_PATHS: {
    get: function get() {
      return requireFromCache('./process').COMMON_BINARY_PATHS;
    },
    configurable: true,
    enumerable: true
  },
  clientInfo: {
    get: function get() {
      return requireFromCache('./clientInfo');
    },
    configurable: true,
    enumerable: true
  },
  systemInfo: {
    get: function get() {
      return requireFromCache('./systemInfo');
    },
    configurable: true,
    enumerable: true
  },
  runtimeInfo: {
    get: function get() {
      return requireFromCache('./runtimeInfo');
    },
    configurable: true,
    enumerable: true
  },
  ScribeProcess: {
    get: function get() {
      return requireFromCache('./ScribeProcess').ScribeProcess;
    },
    configurable: true,
    enumerable: true
  },
  BatchProcessedQueue: {
    get: function get() {
      return requireFromCache('./BatchProcessedQueue').BatchProcessedQueue;
    },
    configurable: true,
    enumerable: true
  },
  ExtendableError: {
    get: function get() {
      return requireFromCache('./ExtendableError');
    },
    configurable: true,
    enumerable: true
  }
});
//# sourceMappingURL=data:application/json;base64,
