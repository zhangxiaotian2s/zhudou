Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _process = require('./process');

'use babel';

var SCRIBE_CAT_COMMAND = 'scribe_cat';

/**
 * A wrapper of `scribe_cat` (https://github.com/facebookarchive/scribe/blob/master/examples/scribe_cat)
 * command. User could call `new ScribeProcess($scribeCategoryName)` to create a process and then
 * call `scribeProcess.write($object)` to save an JSON schemaed Object into scribe category.
 * It will also recover from `scribe_cat` failure automatically.
 */

var ScribeProcess = (function () {
  function ScribeProcess(scribeCategory) {
    _classCallCheck(this, ScribeProcess);

    this._scribeCategory = scribeCategory;
    this._childProcessRunning = new WeakMap();
    this._getOrCreateChildProcess();
  }

  /**
   * Check if `scribe_cat` exists in PATH.
   */

  _createClass(ScribeProcess, [{
    key: 'write',

    /**
     * Write an Object to scribe category using JSON.stringify.
     *
     * @param message the object to write.
     * @param replacer optional replacer function which alters the behavior of the
     *        stringification process. refer
     *        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
     *        for more information.
     */
    value: _asyncToGenerator(function* (message, replacer) {
      var os = require('os');
      var child = yield this._getOrCreateChildProcess();
      return new Promise(function (resolve, reject) {
        child.stdin.write('' + JSON.stringify(message) + os.EOL, resolve);
      });
    })
  }, {
    key: 'dispose',
    value: _asyncToGenerator(function* () {
      if (this._childPromise) {
        var child = yield this._childPromise;
        if (this._childProcessRunning.get(child)) {
          child.kill();
        }
      }
    })
  }, {
    key: '_getOrCreateChildProcess',
    value: function _getOrCreateChildProcess() {
      var _this = this;

      if (this._childPromise) {
        return this._childPromise;
      }

      this._childPromise = (0, _process.safeSpawn)(SCRIBE_CAT_COMMAND, [this._scribeCategory]).then(function (child) {
        child.stdin.setDefaultEncoding('utf8');
        _this._childProcessRunning.set(child, true);
        child.on('error', function (error) {
          _this._childPromise = null;
          _this._childProcessRunning.set(child, false);
        });
        child.on('exit', function (e) {
          _this._childPromise = null;
          _this._childProcessRunning.set(child, false);
        });
        return child;
      });

      return this._childPromise;
    }
  }], [{
    key: 'isScribeCatOnPath',
    value: _asyncToGenerator(function* () {
      var _ref = yield (0, _process.checkOutput)('which', [SCRIBE_CAT_COMMAND]);

      var exitCode = _ref.exitCode;

      return exitCode === 0;
    })
  }]);

  return ScribeProcess;
})();

exports.ScribeProcess = ScribeProcess;
var __test__ = {
  setScribeCatCommand: function setScribeCatCommand(newCommand) {
    var originalCommand = SCRIBE_CAT_COMMAND;
    SCRIBE_CAT_COMMAND = newCommand;
    return originalCommand;
  }
};
exports.__test__ = __test__;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNvbW1vbnMvbGliL1NjcmliZVByb2Nlc3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VCQVdxQyxXQUFXOztBQVhoRCxXQUFXLENBQUM7O0FBYVosSUFBSSxrQkFBa0IsR0FBRyxZQUFZLENBQUM7Ozs7Ozs7OztJQVF6QixhQUFhO0FBS2IsV0FMQSxhQUFhLENBS1osY0FBc0IsRUFBRTswQkFMekIsYUFBYTs7QUFNdEIsUUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7QUFDdEMsUUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDMUMsUUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7R0FDakM7Ozs7OztlQVRVLGFBQWE7Ozs7Ozs7Ozs7Ozs2QkE0QmIsV0FBQyxPQUF3QixFQUFFLFFBQW9CLEVBQWlCO0FBQ3pFLFVBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixVQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0FBQ3BELGFBQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFLO0FBQ3RDLGFBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxNQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBSSxPQUFPLENBQUMsQ0FBQztPQUNuRSxDQUFDLENBQUM7S0FDSjs7OzZCQUVZLGFBQWtCO0FBQzdCLFVBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtBQUN0QixZQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUM7QUFDdkMsWUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3hDLGVBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNkO09BQ0Y7S0FDRjs7O1dBRXVCLG9DQUF3Qzs7O0FBQzlELFVBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtBQUN0QixlQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7T0FDM0I7O0FBRUQsVUFBSSxDQUFDLGFBQWEsR0FBRyxhQTVESixTQUFTLEVBNERLLGtCQUFrQixFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQ3JFLElBQUksQ0FBQyxVQUFBLEtBQUssRUFBSTtBQUNiLGFBQUssQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdkMsY0FBSyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNDLGFBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUEsS0FBSyxFQUFJO0FBQ3pCLGdCQUFLLGFBQWEsR0FBRyxJQUFJLENBQUM7QUFDMUIsZ0JBQUssb0JBQW9CLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM3QyxDQUFDLENBQUM7QUFDSCxhQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFBLENBQUMsRUFBSTtBQUNwQixnQkFBSyxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQzFCLGdCQUFLLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDN0MsQ0FBQyxDQUFDO0FBQ0gsZUFBTyxLQUFLLENBQUM7T0FDZCxDQUFDLENBQUM7O0FBRVAsYUFBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0tBQzNCOzs7NkJBcEQ2QixhQUFxQjtpQkFDOUIsTUFBTSxhQXpCckIsV0FBVyxFQXlCc0IsT0FBTyxFQUFFLENBQUMsa0JBQWtCLENBQUMsQ0FBQzs7VUFBNUQsUUFBUSxRQUFSLFFBQVE7O0FBQ2YsYUFBTyxRQUFRLEtBQUssQ0FBQyxDQUFDO0tBQ3ZCOzs7U0FqQlUsYUFBYTs7OztBQXFFbkIsSUFBTSxRQUFRLEdBQUc7QUFDdEIscUJBQW1CLEVBQUEsNkJBQUMsVUFBa0IsRUFBVTtBQUM5QyxRQUFNLGVBQWUsR0FBRyxrQkFBa0IsQ0FBQztBQUMzQyxzQkFBa0IsR0FBRyxVQUFVLENBQUM7QUFDaEMsV0FBTyxlQUFlLENBQUM7R0FDeEI7Q0FDRixDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNvbW1vbnMvbGliL1NjcmliZVByb2Nlc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQge2NoZWNrT3V0cHV0LCBzYWZlU3Bhd259IGZyb20gJy4vcHJvY2Vzcyc7XG5cbmxldCBTQ1JJQkVfQ0FUX0NPTU1BTkQgPSAnc2NyaWJlX2NhdCc7XG5cbi8qKlxuICogQSB3cmFwcGVyIG9mIGBzY3JpYmVfY2F0YCAoaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rYXJjaGl2ZS9zY3JpYmUvYmxvYi9tYXN0ZXIvZXhhbXBsZXMvc2NyaWJlX2NhdClcbiAqIGNvbW1hbmQuIFVzZXIgY291bGQgY2FsbCBgbmV3IFNjcmliZVByb2Nlc3MoJHNjcmliZUNhdGVnb3J5TmFtZSlgIHRvIGNyZWF0ZSBhIHByb2Nlc3MgYW5kIHRoZW5cbiAqIGNhbGwgYHNjcmliZVByb2Nlc3Mud3JpdGUoJG9iamVjdClgIHRvIHNhdmUgYW4gSlNPTiBzY2hlbWFlZCBPYmplY3QgaW50byBzY3JpYmUgY2F0ZWdvcnkuXG4gKiBJdCB3aWxsIGFsc28gcmVjb3ZlciBmcm9tIGBzY3JpYmVfY2F0YCBmYWlsdXJlIGF1dG9tYXRpY2FsbHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBTY3JpYmVQcm9jZXNzIHtcbiAgX3NjcmliZUNhdGVnb3J5OiBzdHJpbmc7XG4gIF9jaGlsZFByb21pc2U6ID9Qcm9taXNlPGNoaWxkX3Byb2Nlc3MkQ2hpbGRQcm9jZXNzPjtcbiAgX2NoaWxkUHJvY2Vzc1J1bm5pbmc6IFdlYWtNYXA8Y2hpbGRfcHJvY2VzcyRDaGlsZFByb2Nlc3MsIGJvb2xlYW4+O1xuXG4gIGNvbnN0cnVjdG9yKHNjcmliZUNhdGVnb3J5OiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zY3JpYmVDYXRlZ29yeSA9IHNjcmliZUNhdGVnb3J5O1xuICAgIHRoaXMuX2NoaWxkUHJvY2Vzc1J1bm5pbmcgPSBuZXcgV2Vha01hcCgpO1xuICAgIHRoaXMuX2dldE9yQ3JlYXRlQ2hpbGRQcm9jZXNzKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYHNjcmliZV9jYXRgIGV4aXN0cyBpbiBQQVRILlxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGlzU2NyaWJlQ2F0T25QYXRoKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHtleGl0Q29kZX0gPSBhd2FpdCBjaGVja091dHB1dCgnd2hpY2gnLCBbU0NSSUJFX0NBVF9DT01NQU5EXSk7XG4gICAgcmV0dXJuIGV4aXRDb2RlID09PSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIGFuIE9iamVjdCB0byBzY3JpYmUgY2F0ZWdvcnkgdXNpbmcgSlNPTi5zdHJpbmdpZnkuXG4gICAqXG4gICAqIEBwYXJhbSBtZXNzYWdlIHRoZSBvYmplY3QgdG8gd3JpdGUuXG4gICAqIEBwYXJhbSByZXBsYWNlciBvcHRpb25hbCByZXBsYWNlciBmdW5jdGlvbiB3aGljaCBhbHRlcnMgdGhlIGJlaGF2aW9yIG9mIHRoZVxuICAgKiAgICAgICAgc3RyaW5naWZpY2F0aW9uIHByb2Nlc3MuIHJlZmVyXG4gICAqICAgICAgICBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9KU09OL3N0cmluZ2lmeVxuICAgKiAgICAgICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqL1xuICBhc3luYyB3cml0ZShtZXNzYWdlOiBzdHJpbmcgfCBPYmplY3QsIHJlcGxhY2VyPzogKCk9Pm1peGVkKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpO1xuICAgIGNvbnN0IGNoaWxkID0gYXdhaXQgdGhpcy5fZ2V0T3JDcmVhdGVDaGlsZFByb2Nlc3MoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY2hpbGQuc3RkaW4ud3JpdGUoYCR7SlNPTi5zdHJpbmdpZnkobWVzc2FnZSl9JHtvcy5FT0x9YCwgcmVzb2x2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBkaXNwb3NlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLl9jaGlsZFByb21pc2UpIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gYXdhaXQgdGhpcy5fY2hpbGRQcm9taXNlO1xuICAgICAgaWYgKHRoaXMuX2NoaWxkUHJvY2Vzc1J1bm5pbmcuZ2V0KGNoaWxkKSkge1xuICAgICAgICBjaGlsZC5raWxsKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2dldE9yQ3JlYXRlQ2hpbGRQcm9jZXNzKCk6IFByb21pc2U8Y2hpbGRfcHJvY2VzcyRDaGlsZFByb2Nlc3M+IHtcbiAgICBpZiAodGhpcy5fY2hpbGRQcm9taXNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY2hpbGRQcm9taXNlO1xuICAgIH1cblxuICAgIHRoaXMuX2NoaWxkUHJvbWlzZSA9IHNhZmVTcGF3bihTQ1JJQkVfQ0FUX0NPTU1BTkQsIFt0aGlzLl9zY3JpYmVDYXRlZ29yeV0pXG4gICAgICAgIC50aGVuKGNoaWxkID0+IHtcbiAgICAgICAgICBjaGlsZC5zdGRpbi5zZXREZWZhdWx0RW5jb2RpbmcoJ3V0ZjgnKTtcbiAgICAgICAgICB0aGlzLl9jaGlsZFByb2Nlc3NSdW5uaW5nLnNldChjaGlsZCwgdHJ1ZSk7XG4gICAgICAgICAgY2hpbGQub24oJ2Vycm9yJywgZXJyb3IgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY2hpbGRQcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkUHJvY2Vzc1J1bm5pbmcuc2V0KGNoaWxkLCBmYWxzZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY2hpbGQub24oJ2V4aXQnLCBlID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkUHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9jaGlsZFByb2Nlc3NSdW5uaW5nLnNldChjaGlsZCwgZmFsc2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5fY2hpbGRQcm9taXNlO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBfX3Rlc3RfXyA9IHtcbiAgc2V0U2NyaWJlQ2F0Q29tbWFuZChuZXdDb21tYW5kOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IG9yaWdpbmFsQ29tbWFuZCA9IFNDUklCRV9DQVRfQ09NTUFORDtcbiAgICBTQ1JJQkVfQ0FUX0NPTU1BTkQgPSBuZXdDb21tYW5kO1xuICAgIHJldHVybiBvcmlnaW5hbENvbW1hbmQ7XG4gIH0sXG59O1xuIl19
