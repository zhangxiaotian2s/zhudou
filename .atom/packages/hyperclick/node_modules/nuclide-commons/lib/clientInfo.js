Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.isRunningInTest = isRunningInTest;
exports.isRunningInClient = isRunningInClient;
exports.getAtomVersion = getAtomVersion;
exports.isRunningInNuclide = isRunningInNuclide;
exports.getNuclideBuildNumber = getNuclideBuildNumber;
exports.getInstallerPackageBuildNumber = getInstallerPackageBuildNumber;
exports.setInstallerPackageBuildNumber = setInstallerPackageBuildNumber;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _singleton = require('./singleton');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

'use babel';

var SMALLEST_NUCLIDE_BUILD_NUMBER = 5394875;
var INSTALLER_BUILD_NUMBER_KEY = '_nuclide_installer_build_number_key';

function isRunningInTest() {
  return process.env.NODE_ENV === 'test';
}

function isRunningInClient() {
  return global.atom !== undefined;
}

function getAtomVersion() {
  if (!isRunningInClient()) {
    throw Error('Not running in Atom/Nuclide.');
  }
  return global.atom.getVersion();
}

/**
 * Determine whether the package is running in Atom.app or Nuclide.app.
 *
 * While building Nuclide release, we set the internal build number as part of version number.
 * So the version looks like 1.0.$buildNumber. Since the internal build number is really big,
 * whereas the counterpart in Atom' version string is realtively small or not a valid number,
 * it is a good way to identify if the running editer is Nuclide or Atom.
 */

function isRunningInNuclide() {
  if (!isRunningInClient()) {
    return false;
  }

  var version = getAtomVersion();
  var buildNumber = version.split('.')[2];
  // If the PATCH version (the third part of version string splitted by dot) is a number and larger
  // than SMALLEST_NUCLIDE_BUILD_NUMBER, then it's a build number.
  if (/^\d+$/.test(buildNumber) && parseInt(buildNumber, 10) >= SMALLEST_NUCLIDE_BUILD_NUMBER) {
    return true;
  }
  return false;
}

var atomConfig = isRunningInClient() ? require(_path2['default'].join(atom.getLoadSettings().resourcePath, 'package.json')) : {};

function getNuclideBuildNumber() {
  if (!isRunningInClient()) {
    throw Error('Not running in Atom/Nuclide.');
  }
  return atomConfig.buildNumber || 0;
}

function getInstallerPackageBuildNumber() {
  return (0, _singleton.get)(INSTALLER_BUILD_NUMBER_KEY, function () {
    return 0;
  });
}

function setInstallerPackageBuildNumber(buildNumber) {
  (0, _singleton.reset)(INSTALLER_BUILD_NUMBER_KEY, function () {
    return buildNumber;
  });
}

// TODO(chenshen) implement isDevelopment.

var __test__ = {
  SMALLEST_NUCLIDE_BUILD_NUMBER: SMALLEST_NUCLIDE_BUILD_NUMBER
};
exports.__test__ = __test__;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNvbW1vbnMvbGliL2NsaWVudEluZm8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lCQVd5QixhQUFhOztvQkFDckIsTUFBTTs7OztBQVp2QixXQUFXLENBQUM7O0FBY1osSUFBTSw2QkFBNkIsR0FBRyxPQUFPLENBQUM7QUFDOUMsSUFBTSwwQkFBMEIsR0FBRyxxQ0FBcUMsQ0FBQzs7QUFFbEUsU0FBUyxlQUFlLEdBQVk7QUFDekMsU0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxNQUFNLENBQUM7Q0FDeEM7O0FBRU0sU0FBUyxpQkFBaUIsR0FBWTtBQUMzQyxTQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDO0NBQ2xDOztBQUVNLFNBQVMsY0FBYyxHQUFXO0FBQ3ZDLE1BQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFO0FBQ3hCLFVBQU0sS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7R0FDN0M7QUFDRCxTQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7Q0FDakM7Ozs7Ozs7Ozs7O0FBVU0sU0FBUyxrQkFBa0IsR0FBWTtBQUM1QyxNQUFJLENBQUMsaUJBQWlCLEVBQUUsRUFBRTtBQUN4QixXQUFPLEtBQUssQ0FBQztHQUNkOztBQUVELE1BQU0sT0FBTyxHQUFHLGNBQWMsRUFBRSxDQUFDO0FBQ2pDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7OztBQUcxQyxNQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksUUFBUSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsSUFBSSw2QkFBNkIsRUFBRTtBQUMzRixXQUFPLElBQUksQ0FBQztHQUNiO0FBQ0QsU0FBTyxLQUFLLENBQUM7Q0FDZDs7QUFFRCxJQUFNLFVBQVUsR0FBRyxpQkFBaUIsRUFBRSxHQUNsQyxPQUFPLENBQUMsa0JBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUMsR0FDdkUsRUFBRSxDQUFDOztBQUVBLFNBQVMscUJBQXFCLEdBQVc7QUFDOUMsTUFBSSxDQUFDLGlCQUFpQixFQUFFLEVBQUU7QUFDeEIsVUFBTSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztHQUM3QztBQUNELFNBQU8sVUFBVSxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUM7Q0FDcEM7O0FBRU0sU0FBUyw4QkFBOEIsR0FBVztBQUN2RCxTQUFPLGVBeERELEdBQUcsRUF3REUsMEJBQTBCLEVBQUU7V0FBTSxDQUFDO0dBQUEsQ0FBQyxDQUFDO0NBQ2pEOztBQUVNLFNBQVMsOEJBQThCLENBQUMsV0FBbUIsRUFBUTtBQUN4RSxpQkE1RFcsS0FBSyxFQTREViwwQkFBMEIsRUFBRTtXQUFNLFdBQVc7R0FBQSxDQUFDLENBQUM7Q0FDdEQ7Ozs7QUFJTSxJQUFNLFFBQVEsR0FBRztBQUN0QiwrQkFBNkIsRUFBN0IsNkJBQTZCO0NBQzlCLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtY29tbW9ucy9saWIvY2xpZW50SW5mby5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB7Z2V0LCByZXNldH0gZnJvbSAnLi9zaW5nbGV0b24nO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmNvbnN0IFNNQUxMRVNUX05VQ0xJREVfQlVJTERfTlVNQkVSID0gNTM5NDg3NTtcbmNvbnN0IElOU1RBTExFUl9CVUlMRF9OVU1CRVJfS0VZID0gJ19udWNsaWRlX2luc3RhbGxlcl9idWlsZF9udW1iZXJfa2V5JztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzUnVubmluZ0luVGVzdCgpOiBib29sZWFuIHtcbiAgcmV0dXJuIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1J1bm5pbmdJbkNsaWVudCgpOiBib29sZWFuIHtcbiAgcmV0dXJuIGdsb2JhbC5hdG9tICE9PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdG9tVmVyc2lvbigpOiBzdHJpbmcge1xuICBpZiAoIWlzUnVubmluZ0luQ2xpZW50KCkpIHtcbiAgICB0aHJvdyBFcnJvcignTm90IHJ1bm5pbmcgaW4gQXRvbS9OdWNsaWRlLicpO1xuICB9XG4gIHJldHVybiBnbG9iYWwuYXRvbS5nZXRWZXJzaW9uKCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHBhY2thZ2UgaXMgcnVubmluZyBpbiBBdG9tLmFwcCBvciBOdWNsaWRlLmFwcC5cbiAqXG4gKiBXaGlsZSBidWlsZGluZyBOdWNsaWRlIHJlbGVhc2UsIHdlIHNldCB0aGUgaW50ZXJuYWwgYnVpbGQgbnVtYmVyIGFzIHBhcnQgb2YgdmVyc2lvbiBudW1iZXIuXG4gKiBTbyB0aGUgdmVyc2lvbiBsb29rcyBsaWtlIDEuMC4kYnVpbGROdW1iZXIuIFNpbmNlIHRoZSBpbnRlcm5hbCBidWlsZCBudW1iZXIgaXMgcmVhbGx5IGJpZyxcbiAqIHdoZXJlYXMgdGhlIGNvdW50ZXJwYXJ0IGluIEF0b20nIHZlcnNpb24gc3RyaW5nIGlzIHJlYWx0aXZlbHkgc21hbGwgb3Igbm90IGEgdmFsaWQgbnVtYmVyLFxuICogaXQgaXMgYSBnb29kIHdheSB0byBpZGVudGlmeSBpZiB0aGUgcnVubmluZyBlZGl0ZXIgaXMgTnVjbGlkZSBvciBBdG9tLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSdW5uaW5nSW5OdWNsaWRlKCk6IGJvb2xlYW4ge1xuICBpZiAoIWlzUnVubmluZ0luQ2xpZW50KCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCB2ZXJzaW9uID0gZ2V0QXRvbVZlcnNpb24oKTtcbiAgY29uc3QgYnVpbGROdW1iZXIgPSB2ZXJzaW9uLnNwbGl0KCcuJylbMl07XG4gIC8vIElmIHRoZSBQQVRDSCB2ZXJzaW9uICh0aGUgdGhpcmQgcGFydCBvZiB2ZXJzaW9uIHN0cmluZyBzcGxpdHRlZCBieSBkb3QpIGlzIGEgbnVtYmVyIGFuZCBsYXJnZXJcbiAgLy8gdGhhbiBTTUFMTEVTVF9OVUNMSURFX0JVSUxEX05VTUJFUiwgdGhlbiBpdCdzIGEgYnVpbGQgbnVtYmVyLlxuICBpZiAoL15cXGQrJC8udGVzdChidWlsZE51bWJlcikgJiYgcGFyc2VJbnQoYnVpbGROdW1iZXIsIDEwKSA+PSBTTUFMTEVTVF9OVUNMSURFX0JVSUxEX05VTUJFUikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuY29uc3QgYXRvbUNvbmZpZyA9IGlzUnVubmluZ0luQ2xpZW50KCkgP1xuICAgIHJlcXVpcmUocGF0aC5qb2luKGF0b20uZ2V0TG9hZFNldHRpbmdzKCkucmVzb3VyY2VQYXRoLCAncGFja2FnZS5qc29uJykpIDpcbiAgICB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE51Y2xpZGVCdWlsZE51bWJlcigpOiBudW1iZXIge1xuICBpZiAoIWlzUnVubmluZ0luQ2xpZW50KCkpIHtcbiAgICB0aHJvdyBFcnJvcignTm90IHJ1bm5pbmcgaW4gQXRvbS9OdWNsaWRlLicpO1xuICB9XG4gIHJldHVybiBhdG9tQ29uZmlnLmJ1aWxkTnVtYmVyIHx8IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnN0YWxsZXJQYWNrYWdlQnVpbGROdW1iZXIoKTogbnVtYmVyIHtcbiAgcmV0dXJuIGdldChJTlNUQUxMRVJfQlVJTERfTlVNQkVSX0tFWSwgKCkgPT4gMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRJbnN0YWxsZXJQYWNrYWdlQnVpbGROdW1iZXIoYnVpbGROdW1iZXI6IG51bWJlcik6IHZvaWQge1xuICByZXNldChJTlNUQUxMRVJfQlVJTERfTlVNQkVSX0tFWSwgKCkgPT4gYnVpbGROdW1iZXIpO1xufVxuXG4vLyBUT0RPKGNoZW5zaGVuKSBpbXBsZW1lbnQgaXNEZXZlbG9wbWVudC5cblxuZXhwb3J0IGNvbnN0IF9fdGVzdF9fID0ge1xuICBTTUFMTEVTVF9OVUNMSURFX0JVSUxEX05VTUJFUixcbn07XG4iXX0=
