
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * Static method as defined by
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from.
 * @param arrayLike An array-like or iterable object to convert to an array.
 * @param mapFn Map function to call on every element of the array.
 * @param thisArg Value to use as `this` when executing `mapFn`.
 */
// $FlowIssue
Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.from = from;
exports.find = find;
exports.findIndex = findIndex;
exports.remove = remove;
exports.equal = equal;

function from(_x, _x2, _x3) {
  var _again = true;

  _function: while (_again) {
    var arrayLike = _x,
        mapFn = _x2,
        thisArg = _x3;
    array = value = array = value = undefined;
    _again = false;

    if (mapFn === undefined) {
      mapFn = function (arg) {
        return arg;
      };
    }

    // Note that Symbol is not defined when running on Node 0.10.x.
    if (typeof Symbol !== 'undefined' && typeof arrayLike === 'object' && typeof arrayLike[Symbol.iterator] === 'function') {
      var array = [];
      // $FlowIssue: property @@iterator not found
      for (var value of arrayLike) {
        array.push(mapFn.call(thisArg, value));
      }
      return array;
    } else if (typeof arrayLike.next === 'function') {
      var array = [];
      for (var value of arrayLike) {
        array.push(mapFn.call(thisArg, value));
      }
      return array;
    } else if ('length' in arrayLike) {
      return Array.prototype.map.call(arrayLike, mapFn, thisArg);
    } else if (arrayLike instanceof Set) {
      // Backup logic to handle the es6-collections case.
      _x = arrayLike.values();
      _x2 = mapFn;
      _x3 = thisArg;
      _again = true;
      continue _function;
    } else if (arrayLike instanceof Map) {
      // Backup logic to handle the es6-collections case.
      _x = arrayLike.entries();
      _x2 = mapFn;
      _x3 = thisArg;
      _again = true;
      continue _function;
    } else {
      throw Error(arrayLike + ' must be an array-like or iterable object to convert to an array.');
    }
  }
}

/**
 * Instance method of Array as defined by
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find.
 * Because we do not want to add elements to Array.prototype, we make this a
 * static method that takes the Array (which would be the receiver if it were an
 * instance method) as the first argument.
 * @param array The array to search.
 * @param Function to execute on each value in the array.
 * @param Object to use as `this` when executing `callback`.
 */

function find(array, callback, thisArg) {
  var resultIndex = findIndex(array, callback, thisArg);
  return resultIndex >= 0 ? array[resultIndex] : undefined;
}

/**
 * Instance method of Array as defined by
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex.
 * Because we do not want to add elements to Array.prototype, we make this a
 * static method that takes the Array (which would be the receiver if it were an
 * instance method) as the first argument.
 * @param array The array to search.
 * @param Function to execute on each value in the array.
 * @param Object to use as `this` when executing `callback`.
 */

function findIndex(array, callback, thisArg) {
  var result = -1;
  array.some(function (element, index, arr) {
    if (callback.call(thisArg, element, index, arr)) {
      result = index;
      return true;
    } else {
      return false;
    }
  });
  return result;
}

function remove(array, element) {
  var index = array.indexOf(element);
  if (index >= 0) {
    array.splice(index, 1);
  }
}

function equal(array1, array2, equalComparator) {
  var equalFunction = equalComparator || function (a, b) {
    return a === b;
  };
  return array1.every(function (item1, i) {
    return equalFunction(item1, array2[i]);
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNvbW1vbnMvbGliL2FycmF5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJMLFNBQVMsSUFBSTs7OzRCQUlQO1FBSFgsU0FBc0M7UUFDdEMsS0FBMEI7UUFDMUIsT0FBZTtBQVVQLFNBQUssR0FFQSxLQUFLLEdBS1YsS0FBSyxHQUNBLEtBQUs7OztBQWhCbEIsUUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO0FBQ3ZCLFdBQUssR0FBRyxVQUFTLEdBQUcsRUFBRTtBQUFFLGVBQU8sR0FBRyxDQUFDO09BQUUsQ0FBQztLQUN2Qzs7O0FBR0QsUUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQzdCLE9BQU8sU0FBUyxLQUFLLFFBQVEsSUFDN0IsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLFVBQVUsRUFBRTtBQUNwRCxVQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7O0FBRWpCLFdBQUssSUFBTSxLQUFLLElBQUksU0FBUyxFQUFFO0FBQzdCLGFBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztPQUN4QztBQUNELGFBQU8sS0FBSyxDQUFDO0tBQ2QsTUFBTSxJQUFJLE9BQU8sU0FBUyxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7QUFDL0MsVUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLFdBQUssSUFBTSxLQUFLLElBQUksU0FBUyxFQUFFO0FBQzdCLGFBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztPQUN4QztBQUNELGFBQU8sS0FBSyxDQUFDO0tBQ2QsTUFBTSxJQUFJLFFBQVEsSUFBSSxTQUFTLEVBQUU7QUFDaEMsYUFBTyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztLQUM1RCxNQUFNLElBQUksU0FBUyxZQUFZLEdBQUcsRUFBRTs7V0FFdkIsU0FBUyxDQUFDLE1BQU0sRUFBRTtZQUFFLEtBQUs7WUFBRSxPQUFPOzs7S0FDL0MsTUFBTSxJQUFJLFNBQVMsWUFBWSxHQUFHLEVBQUU7O1dBRXZCLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFBRSxLQUFLO1lBQUUsT0FBTzs7O0tBQ2hELE1BQU07QUFDTCxZQUFNLEtBQUssQ0FBSSxTQUFTLHVFQUFvRSxDQUFDO0tBQzlGO0dBQ0Y7Q0FBQTs7Ozs7Ozs7Ozs7OztBQVlNLFNBQVMsSUFBSSxDQUNoQixLQUFlLEVBQ2YsUUFBK0QsRUFDL0QsT0FBZSxFQUFNO0FBQ3ZCLE1BQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3hELFNBQU8sV0FBVyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsU0FBUyxDQUFDO0NBQzFEOzs7Ozs7Ozs7Ozs7O0FBWU0sU0FBUyxTQUFTLENBQ3JCLEtBQWUsRUFDZixRQUErRCxFQUMvRCxPQUFlLEVBQVU7QUFDM0IsTUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDaEIsT0FBSyxDQUFDLElBQUksQ0FBQyxVQUFTLE9BQVUsRUFBRSxLQUFhLEVBQUUsR0FBYSxFQUFFO0FBQzVELFFBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsRUFBRTtBQUMvQyxZQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ2YsYUFBTyxJQUFJLENBQUM7S0FDYixNQUFNO0FBQ0wsYUFBTyxLQUFLLENBQUM7S0FDZDtHQUNGLENBQUMsQ0FBQztBQUNILFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRU0sU0FBUyxNQUFNLENBQUksS0FBZSxFQUFFLE9BQVUsRUFBUTtBQUMzRCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JDLE1BQUksS0FBSyxJQUFJLENBQUMsRUFBRTtBQUNkLFNBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ3hCO0NBQ0Y7O0FBRU0sU0FBUyxLQUFLLENBQ25CLE1BQWdCLEVBQ2hCLE1BQWdCLEVBQ2hCLGVBQXlDLEVBQ2hDO0FBQ1QsTUFBTSxhQUFhLEdBQUcsZUFBZSxJQUFLLFVBQUMsQ0FBQyxFQUFNLENBQUM7V0FBUSxDQUFDLEtBQUssQ0FBQztHQUFBLEFBQUMsQ0FBQztBQUNwRSxTQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBQyxLQUFLLEVBQUUsQ0FBQztXQUFLLGFBQWEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQUEsQ0FBQyxDQUFDO0NBQ3BFIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNvbW1vbnMvbGliL2FycmF5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLyoqXG4gKiBTdGF0aWMgbWV0aG9kIGFzIGRlZmluZWQgYnlcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2Zyb20uXG4gKiBAcGFyYW0gYXJyYXlMaWtlIEFuIGFycmF5LWxpa2Ugb3IgaXRlcmFibGUgb2JqZWN0IHRvIGNvbnZlcnQgdG8gYW4gYXJyYXkuXG4gKiBAcGFyYW0gbWFwRm4gTWFwIGZ1bmN0aW9uIHRvIGNhbGwgb24gZXZlcnkgZWxlbWVudCBvZiB0aGUgYXJyYXkuXG4gKiBAcGFyYW0gdGhpc0FyZyBWYWx1ZSB0byB1c2UgYXMgYHRoaXNgIHdoZW4gZXhlY3V0aW5nIGBtYXBGbmAuXG4gKi9cbi8vICRGbG93SXNzdWVcbmV4cG9ydCBmdW5jdGlvbiBmcm9tPFQsIFU+KFxuICBhcnJheUxpa2U6IEl0ZXJhYmxlIHwge2xlbmd0aDogbnVtYmVyfSxcbiAgbWFwRm4/OiAob3JpZ2luYWw6IFQpID0+IFUsXG4gIHRoaXNBcmc/OiBtaXhlZFxuKSA6IEFycmF5PFU+IHtcbiAgaWYgKG1hcEZuID09PSB1bmRlZmluZWQpIHtcbiAgICBtYXBGbiA9IGZ1bmN0aW9uKGFyZykgeyByZXR1cm4gYXJnOyB9O1xuICB9XG5cbiAgLy8gTm90ZSB0aGF0IFN5bWJvbCBpcyBub3QgZGVmaW5lZCB3aGVuIHJ1bm5pbmcgb24gTm9kZSAwLjEwLnguXG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgdHlwZW9mIGFycmF5TGlrZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIHR5cGVvZiBhcnJheUxpa2VbU3ltYm9sLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgLy8gJEZsb3dJc3N1ZTogcHJvcGVydHkgQEBpdGVyYXRvciBub3QgZm91bmRcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIGFycmF5TGlrZSkge1xuICAgICAgYXJyYXkucHVzaChtYXBGbi5jYWxsKHRoaXNBcmcsIHZhbHVlKSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJyYXlMaWtlLm5leHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgYXJyYXlMaWtlKSB7XG4gICAgICBhcnJheS5wdXNoKG1hcEZuLmNhbGwodGhpc0FyZywgdmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9IGVsc2UgaWYgKCdsZW5ndGgnIGluIGFycmF5TGlrZSkge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoYXJyYXlMaWtlLCBtYXBGbiwgdGhpc0FyZyk7XG4gIH0gZWxzZSBpZiAoYXJyYXlMaWtlIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgLy8gQmFja3VwIGxvZ2ljIHRvIGhhbmRsZSB0aGUgZXM2LWNvbGxlY3Rpb25zIGNhc2UuXG4gICAgcmV0dXJuIGZyb20oYXJyYXlMaWtlLnZhbHVlcygpLCBtYXBGbiwgdGhpc0FyZyk7XG4gIH0gZWxzZSBpZiAoYXJyYXlMaWtlIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgLy8gQmFja3VwIGxvZ2ljIHRvIGhhbmRsZSB0aGUgZXM2LWNvbGxlY3Rpb25zIGNhc2UuXG4gICAgcmV0dXJuIGZyb20oYXJyYXlMaWtlLmVudHJpZXMoKSwgbWFwRm4sIHRoaXNBcmcpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IEVycm9yKGAke2FycmF5TGlrZX0gbXVzdCBiZSBhbiBhcnJheS1saWtlIG9yIGl0ZXJhYmxlIG9iamVjdCB0byBjb252ZXJ0IHRvIGFuIGFycmF5LmApO1xuICB9XG59XG5cbi8qKlxuICogSW5zdGFuY2UgbWV0aG9kIG9mIEFycmF5IGFzIGRlZmluZWQgYnlcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2ZpbmQuXG4gKiBCZWNhdXNlIHdlIGRvIG5vdCB3YW50IHRvIGFkZCBlbGVtZW50cyB0byBBcnJheS5wcm90b3R5cGUsIHdlIG1ha2UgdGhpcyBhXG4gKiBzdGF0aWMgbWV0aG9kIHRoYXQgdGFrZXMgdGhlIEFycmF5ICh3aGljaCB3b3VsZCBiZSB0aGUgcmVjZWl2ZXIgaWYgaXQgd2VyZSBhblxuICogaW5zdGFuY2UgbWV0aG9kKSBhcyB0aGUgZmlyc3QgYXJndW1lbnQuXG4gKiBAcGFyYW0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaC5cbiAqIEBwYXJhbSBGdW5jdGlvbiB0byBleGVjdXRlIG9uIGVhY2ggdmFsdWUgaW4gdGhlIGFycmF5LlxuICogQHBhcmFtIE9iamVjdCB0byB1c2UgYXMgYHRoaXNgIHdoZW4gZXhlY3V0aW5nIGBjYWxsYmFja2AuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kPFQ+KFxuICAgIGFycmF5OiBBcnJheTxUPixcbiAgICBjYWxsYmFjazogKGVsZW1lbnQ6IFQsIGluZGV4OiBudW1iZXIsIGFycmF5OiBBcnJheTxUPikgPT4gbWl4ZWQsXG4gICAgdGhpc0FyZz86IG1peGVkKTogP1Qge1xuICBjb25zdCByZXN1bHRJbmRleCA9IGZpbmRJbmRleChhcnJheSwgY2FsbGJhY2ssIHRoaXNBcmcpO1xuICByZXR1cm4gcmVzdWx0SW5kZXggPj0gMCA/IGFycmF5W3Jlc3VsdEluZGV4XSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBJbnN0YW5jZSBtZXRob2Qgb2YgQXJyYXkgYXMgZGVmaW5lZCBieVxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmluZEluZGV4LlxuICogQmVjYXVzZSB3ZSBkbyBub3Qgd2FudCB0byBhZGQgZWxlbWVudHMgdG8gQXJyYXkucHJvdG90eXBlLCB3ZSBtYWtlIHRoaXMgYVxuICogc3RhdGljIG1ldGhvZCB0aGF0IHRha2VzIHRoZSBBcnJheSAod2hpY2ggd291bGQgYmUgdGhlIHJlY2VpdmVyIGlmIGl0IHdlcmUgYW5cbiAqIGluc3RhbmNlIG1ldGhvZCkgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LlxuICogQHBhcmFtIGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gKiBAcGFyYW0gRnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBlYWNoIHZhbHVlIGluIHRoZSBhcnJheS5cbiAqIEBwYXJhbSBPYmplY3QgdG8gdXNlIGFzIGB0aGlzYCB3aGVuIGV4ZWN1dGluZyBgY2FsbGJhY2tgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmluZEluZGV4PFQ+KFxuICAgIGFycmF5OiBBcnJheTxUPixcbiAgICBjYWxsYmFjazogKGVsZW1lbnQ6IFQsIGluZGV4OiBudW1iZXIsIGFycmF5OiBBcnJheTxUPikgPT4gbWl4ZWQsXG4gICAgdGhpc0FyZz86IG1peGVkKTogbnVtYmVyIHtcbiAgbGV0IHJlc3VsdCA9IC0xO1xuICBhcnJheS5zb21lKGZ1bmN0aW9uKGVsZW1lbnQ6IFQsIGluZGV4OiBudW1iZXIsIGFycjogQXJyYXk8VD4pIHtcbiAgICBpZiAoY2FsbGJhY2suY2FsbCh0aGlzQXJnLCBlbGVtZW50LCBpbmRleCwgYXJyKSkge1xuICAgICAgcmVzdWx0ID0gaW5kZXg7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmU8VD4oYXJyYXk6IEFycmF5PFQ+LCBlbGVtZW50OiBUKTogdm9pZCB7XG4gIGNvbnN0IGluZGV4ID0gYXJyYXkuaW5kZXhPZihlbGVtZW50KTtcbiAgaWYgKGluZGV4ID49IDApIHtcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbDxUPihcbiAgYXJyYXkxOiBBcnJheTxUPixcbiAgYXJyYXkyOiBBcnJheTxUPixcbiAgZXF1YWxDb21wYXJhdG9yPzogKGE6IFQsIGI6IFQpID0+IGJvb2xlYW4sXG4pOiBib29sZWFuIHtcbiAgY29uc3QgZXF1YWxGdW5jdGlvbiA9IGVxdWFsQ29tcGFyYXRvciB8fCAoKGE6IFQsICBiOiBUKSA9PiBhID09PSBiKTtcbiAgcmV0dXJuIGFycmF5MS5ldmVyeSgoaXRlbTEsIGkpID0+IGVxdWFsRnVuY3Rpb24oaXRlbTEsIGFycmF5MltpXSkpO1xufVxuIl19
