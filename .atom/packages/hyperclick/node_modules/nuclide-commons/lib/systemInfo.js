Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getOsType = getOsType;
exports.isRunningInWindows = isRunningInWindows;
exports.getOsVersion = getOsVersion;

var getFlowVersion = _asyncToGenerator(function* () {
  var flowPath = global.atom ? global.atom.config.get('nuclide-flow.pathToFlow') : 'flow';

  var _ref = yield (0, _process.asyncExecute)(flowPath, ['--version']);

  var stdout = _ref.stdout;

  return stdout.trim();
});

exports.getFlowVersion = getFlowVersion;

var getClangVersion = _asyncToGenerator(function* () {
  var _ref2 = yield (0, _process.asyncExecute)('clang', ['--version']);

  var stdout = _ref2.stdout;

  return stdout.trim();
});

exports.getClangVersion = getClangVersion;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _process = require('./process');

'use babel';
var OS_TYPE = {
  WIN32: 'win32',
  WIN64: 'win64',
  LINUX: 'linux',
  OSX: 'darwin'
};

exports.OS_TYPE = OS_TYPE;

function getOsType() {
  return _os2['default'].platform();
}

function isRunningInWindows() {
  return getOsType() === OS_TYPE.WIN32 || getOsType() === OS_TYPE.WIN64;
}

function getOsVersion() {
  return _os2['default'].release();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNvbW1vbnMvbGliL3N5c3RlbUluZm8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztJQWlDc0IsY0FBYyxxQkFBN0IsYUFBaUQ7QUFDdEQsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsR0FBRyxNQUFNLENBQUM7O2FBQ3pFLE1BQU0sYUF2QmpCLFlBQVksRUF1QmtCLFFBQVEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDOztNQUFyRCxNQUFNLFFBQU4sTUFBTTs7QUFDYixTQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztDQUN0Qjs7OztJQUVxQixlQUFlLHFCQUE5QixhQUFrRDtjQUN0QyxNQUFNLGFBNUJqQixZQUFZLEVBNEJrQixPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQzs7TUFBcEQsTUFBTSxTQUFOLE1BQU07O0FBQ2IsU0FBTyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDdEI7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBL0JjLElBQUk7Ozs7dUJBQ1EsV0FBVzs7QUFadEMsV0FBVyxDQUFDO0FBY0wsSUFBTSxPQUFPLEdBQUc7QUFDckIsT0FBSyxFQUFFLE9BQU87QUFDZCxPQUFLLEVBQUUsT0FBTztBQUNkLE9BQUssRUFBRSxPQUFPO0FBQ2QsS0FBRyxFQUFFLFFBQVE7Q0FDZCxDQUFDOzs7O0FBRUssU0FBUyxTQUFTLEdBQVc7QUFDbEMsU0FBTyxnQkFBRyxRQUFRLEVBQUUsQ0FBQztDQUN0Qjs7QUFFTSxTQUFTLGtCQUFrQixHQUFZO0FBQzVDLFNBQU8sU0FBUyxFQUFFLEtBQUssT0FBTyxDQUFDLEtBQUssSUFBSSxTQUFTLEVBQUUsS0FBSyxPQUFPLENBQUMsS0FBSyxDQUFDO0NBQ3ZFOztBQUVNLFNBQVMsWUFBWSxHQUFXO0FBQ3JDLFNBQU8sZ0JBQUcsT0FBTyxFQUFFLENBQUM7Q0FDckIiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtY29tbW9ucy9saWIvc3lzdGVtSW5mby5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBvcyBmcm9tICdvcyc7XG5pbXBvcnQge2FzeW5jRXhlY3V0ZX0gZnJvbSAnLi9wcm9jZXNzJztcblxuZXhwb3J0IGNvbnN0IE9TX1RZUEUgPSB7XG4gIFdJTjMyOiAnd2luMzInLFxuICBXSU42NDogJ3dpbjY0JyxcbiAgTElOVVg6ICdsaW51eCcsXG4gIE9TWDogJ2RhcndpbicsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3NUeXBlKCk6IHN0cmluZyB7XG4gIHJldHVybiBvcy5wbGF0Zm9ybSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNSdW5uaW5nSW5XaW5kb3dzKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gZ2V0T3NUeXBlKCkgPT09IE9TX1RZUEUuV0lOMzIgfHwgZ2V0T3NUeXBlKCkgPT09IE9TX1RZUEUuV0lONjQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPc1ZlcnNpb24oKTogc3RyaW5nIHtcbiAgcmV0dXJuIG9zLnJlbGVhc2UoKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEZsb3dWZXJzaW9uKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IGZsb3dQYXRoID0gZ2xvYmFsLmF0b20gPyBnbG9iYWwuYXRvbS5jb25maWcuZ2V0KCdudWNsaWRlLWZsb3cucGF0aFRvRmxvdycpIDogJ2Zsb3cnO1xuICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGFzeW5jRXhlY3V0ZShmbG93UGF0aCwgWyctLXZlcnNpb24nXSk7XG4gIHJldHVybiBzdGRvdXQudHJpbSgpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q2xhbmdWZXJzaW9uKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgYXN5bmNFeGVjdXRlKCdjbGFuZycsIFsnLS12ZXJzaW9uJ10pO1xuICByZXR1cm4gc3Rkb3V0LnRyaW0oKTtcbn1cbiJdfQ==
