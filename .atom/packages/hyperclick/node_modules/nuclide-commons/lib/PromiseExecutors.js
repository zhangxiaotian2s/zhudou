Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _dequeue = require('dequeue');

var _dequeue2 = _interopRequireDefault(_dequeue);

var _events = require('events');

'use babel';

/**
 * A pool that executes Promise executors in parallel given the poolSize, in order.
 *
 * The executor function passed to the constructor of a Promise is evaluated
 * immediately. This may not always be desirable. Use a PromisePool if you have
 * a sequence of async operations that need to be run in parallel and you also want
 * control the number of concurrent executions.
 */

var PromisePool = (function () {
  function PromisePool(poolSize) {
    _classCallCheck(this, PromisePool);

    this._fifo = new _dequeue2['default']();
    this._emitter = new _events.EventEmitter();
    this._numPromisesRunning = 0;
    this._poolSize = poolSize;
    this._nextRequestId = 1;
  }

  /**
   * FIFO queue that executes Promise executors one at a time, in order.
   *
   * The executor function passed to the constructor of a Promise is evaluated
   * immediately. This may not always be desirable. Use a PromiseQueue if you have
   * a sequence of async operations that need to use a shared resource serially.
   */

  /**
   * @param executor A function that takes resolve and reject callbacks, just
   *     like the Promise constructor.
   * @return A Promise that will be resolved/rejected in response to the
   *     execution of the executor.
   */

  _createClass(PromisePool, [{
    key: 'submit',
    value: function submit(executor) {
      var _this = this;

      var id = this._getNextRequestId();
      this._fifo.push({ id: id, executor: executor });
      var promise = new Promise(function (resolve, reject) {
        _this._emitter.once(id, function (result) {
          var isSuccess = result.isSuccess;
          var value = result.value;

          (isSuccess ? resolve : reject)(value);
        });
      });
      this._run();
      return promise;
    }
  }, {
    key: '_run',
    value: function _run() {
      var _this2 = this;

      if (this._numPromisesRunning === this._poolSize) {
        return;
      }

      if (this._fifo.length === 0) {
        return;
      }

      var _fifo$shift = this._fifo.shift();

      var id = _fifo$shift.id;
      var executor = _fifo$shift.executor;

      this._numPromisesRunning++;
      new Promise(executor).then(function (result) {
        _this2._emitter.emit(id, { isSuccess: true, value: result });
        _this2._numPromisesRunning--;
        _this2._run();
      }, function (error) {
        _this2._emitter.emit(id, { isSuccess: false, value: error });
        _this2._numPromisesRunning--;
        _this2._run();
      });
    }
  }, {
    key: '_getNextRequestId',
    value: function _getNextRequestId() {
      return (this._nextRequestId++).toString(16);
    }
  }]);

  return PromisePool;
})();

exports.PromisePool = PromisePool;

var PromiseQueue = (function () {
  function PromiseQueue() {
    _classCallCheck(this, PromiseQueue);

    this._promisePool = new PromisePool(1);
  }

  /**
   * @param executor A function that takes resolve and reject callbacks, just
   *     like the Promise constructor.
   * @return A Promise that will be resolved/rejected in response to the
   *     execution of the executor.
   */

  _createClass(PromiseQueue, [{
    key: 'submit',
    value: function submit(executor) {
      return this._promisePool.submit(executor);
    }
  }]);

  return PromiseQueue;
})();

exports.PromiseQueue = PromiseQueue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNvbW1vbnMvbGliL1Byb21pc2VFeGVjdXRvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VCQVVvQixTQUFTOzs7O3NCQUNGLFFBQVE7O0FBWG5DLFdBQVcsQ0FBQzs7Ozs7Ozs7Ozs7SUF1QkMsV0FBVztBQU9YLFdBUEEsV0FBVyxDQU9WLFFBQWdCLEVBQUU7MEJBUG5CLFdBQVc7O0FBUXBCLFFBQUksQ0FBQyxLQUFLLEdBQUcsMEJBQWEsQ0FBQztBQUMzQixRQUFJLENBQUMsUUFBUSxHQUFHLFlBckJaLFlBQVksRUFxQmtCLENBQUM7QUFDbkMsUUFBSSxDQUFDLG1CQUFtQixHQUFHLENBQUMsQ0FBQztBQUM3QixRQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztBQUMxQixRQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztHQUN6Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7ZUFiVSxXQUFXOztXQXFCaEIsZ0JBQUMsUUFBa0IsRUFBVzs7O0FBQ2xDLFVBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQ3BDLFVBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQztBQUM5QyxVQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUs7QUFDL0MsY0FBSyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxVQUFDLE1BQU0sRUFBSztjQUMxQixTQUFTLEdBQVcsTUFBTSxDQUExQixTQUFTO2NBQUUsS0FBSyxHQUFJLE1BQU0sQ0FBZixLQUFLOztBQUN2QixXQUFDLFNBQVMsR0FBRyxPQUFPLEdBQUcsTUFBTSxDQUFBLENBQUUsS0FBSyxDQUFDLENBQUM7U0FDdkMsQ0FBQyxDQUFDO09BQ0osQ0FBQyxDQUFDO0FBQ0gsVUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osYUFBTyxPQUFPLENBQUM7S0FDaEI7OztXQUVHLGdCQUFHOzs7QUFDTCxVQUFJLElBQUksQ0FBQyxtQkFBbUIsS0FBSyxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQy9DLGVBQU87T0FDUjs7QUFFRCxVQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUMzQixlQUFPO09BQ1I7O3dCQUVzQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRTs7VUFBbEMsRUFBRSxlQUFGLEVBQUU7VUFBRSxRQUFRLGVBQVIsUUFBUTs7QUFDbkIsVUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7QUFDM0IsVUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsTUFBTSxFQUFLO0FBQ3JDLGVBQUssUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDO0FBQ3pELGVBQUssbUJBQW1CLEVBQUUsQ0FBQztBQUMzQixlQUFLLElBQUksRUFBRSxDQUFDO09BQ2IsRUFBRSxVQUFDLEtBQUssRUFBSztBQUNaLGVBQUssUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO0FBQ3pELGVBQUssbUJBQW1CLEVBQUUsQ0FBQztBQUMzQixlQUFLLElBQUksRUFBRSxDQUFDO09BQ2IsQ0FBQyxDQUFDO0tBQ0o7OztXQUVnQiw2QkFBVztBQUMxQixhQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsR0FBRSxDQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUM3Qzs7O1NBMURVLFdBQVc7Ozs7O0lBb0VYLFlBQVk7QUFHWixXQUhBLFlBQVksR0FHVDswQkFISCxZQUFZOztBQUlyQixRQUFJLENBQUMsWUFBWSxHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ3hDOzs7Ozs7Ozs7ZUFMVSxZQUFZOztXQWFqQixnQkFBQyxRQUFrQixFQUFXO0FBQ2xDLGFBQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDM0M7OztTQWZVLFlBQVkiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtY29tbW9ucy9saWIvUHJvbWlzZUV4ZWN1dG9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgRGVxdWV1ZSBmcm9tICdkZXF1ZXVlJztcbmltcG9ydCB7RXZlbnRFbWl0dGVyfSBmcm9tICdldmVudHMnO1xuXG50eXBlIEV4ZWN1dG9yID0gKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpID0+IGFueTtcblxuLyoqXG4gKiBBIHBvb2wgdGhhdCBleGVjdXRlcyBQcm9taXNlIGV4ZWN1dG9ycyBpbiBwYXJhbGxlbCBnaXZlbiB0aGUgcG9vbFNpemUsIGluIG9yZGVyLlxuICpcbiAqIFRoZSBleGVjdXRvciBmdW5jdGlvbiBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yIG9mIGEgUHJvbWlzZSBpcyBldmFsdWF0ZWRcbiAqIGltbWVkaWF0ZWx5LiBUaGlzIG1heSBub3QgYWx3YXlzIGJlIGRlc2lyYWJsZS4gVXNlIGEgUHJvbWlzZVBvb2wgaWYgeW91IGhhdmVcbiAqIGEgc2VxdWVuY2Ugb2YgYXN5bmMgb3BlcmF0aW9ucyB0aGF0IG5lZWQgdG8gYmUgcnVuIGluIHBhcmFsbGVsIGFuZCB5b3UgYWxzbyB3YW50XG4gKiBjb250cm9sIHRoZSBudW1iZXIgb2YgY29uY3VycmVudCBleGVjdXRpb25zLlxuICovXG5leHBvcnQgY2xhc3MgUHJvbWlzZVBvb2wge1xuICBfZmlmbzogRGVxdWV1ZTtcbiAgX2VtaXR0ZXI6IEV2ZW50RW1pdHRlcjtcbiAgX251bVByb21pc2VzUnVubmluZzogbnVtYmVyO1xuICBfcG9vbFNpemU6IG51bWJlcjtcbiAgX25leHRSZXF1ZXN0SWQ6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihwb29sU2l6ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fZmlmbyA9IG5ldyBEZXF1ZXVlKCk7XG4gICAgdGhpcy5fZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB0aGlzLl9udW1Qcm9taXNlc1J1bm5pbmcgPSAwO1xuICAgIHRoaXMuX3Bvb2xTaXplID0gcG9vbFNpemU7XG4gICAgdGhpcy5fbmV4dFJlcXVlc3RJZCA9IDE7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIGV4ZWN1dG9yIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyByZXNvbHZlIGFuZCByZWplY3QgY2FsbGJhY2tzLCBqdXN0XG4gICAqICAgICBsaWtlIHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yLlxuICAgKiBAcmV0dXJuIEEgUHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQvcmVqZWN0ZWQgaW4gcmVzcG9uc2UgdG8gdGhlXG4gICAqICAgICBleGVjdXRpb24gb2YgdGhlIGV4ZWN1dG9yLlxuICAgKi9cbiAgc3VibWl0KGV4ZWN1dG9yOiBFeGVjdXRvcik6IFByb21pc2Uge1xuICAgIGNvbnN0IGlkID0gdGhpcy5fZ2V0TmV4dFJlcXVlc3RJZCgpO1xuICAgIHRoaXMuX2ZpZm8ucHVzaCh7aWQ6IGlkLCBleGVjdXRvcjogZXhlY3V0b3J9KTtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5fZW1pdHRlci5vbmNlKGlkLCAocmVzdWx0KSA9PiB7XG4gICAgICAgIGNvbnN0IHtpc1N1Y2Nlc3MsIHZhbHVlfSA9IHJlc3VsdDtcbiAgICAgICAgKGlzU3VjY2VzcyA/IHJlc29sdmUgOiByZWplY3QpKHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuX3J1bigpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgX3J1bigpIHtcbiAgICBpZiAodGhpcy5fbnVtUHJvbWlzZXNSdW5uaW5nID09PSB0aGlzLl9wb29sU2l6ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9maWZvLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHtpZCwgZXhlY3V0b3J9ID0gdGhpcy5fZmlmby5zaGlmdCgpO1xuICAgIHRoaXMuX251bVByb21pc2VzUnVubmluZysrO1xuICAgIG5ldyBQcm9taXNlKGV4ZWN1dG9yKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChpZCwge2lzU3VjY2VzczogdHJ1ZSwgdmFsdWU6IHJlc3VsdH0pO1xuICAgICAgdGhpcy5fbnVtUHJvbWlzZXNSdW5uaW5nLS07XG4gICAgICB0aGlzLl9ydW4oKTtcbiAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChpZCwge2lzU3VjY2VzczogZmFsc2UsIHZhbHVlOiBlcnJvcn0pO1xuICAgICAgdGhpcy5fbnVtUHJvbWlzZXNSdW5uaW5nLS07XG4gICAgICB0aGlzLl9ydW4oKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9nZXROZXh0UmVxdWVzdElkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICh0aGlzLl9uZXh0UmVxdWVzdElkKyspLnRvU3RyaW5nKDE2KTtcbiAgfVxufVxuXG4vKipcbiAqIEZJRk8gcXVldWUgdGhhdCBleGVjdXRlcyBQcm9taXNlIGV4ZWN1dG9ycyBvbmUgYXQgYSB0aW1lLCBpbiBvcmRlci5cbiAqXG4gKiBUaGUgZXhlY3V0b3IgZnVuY3Rpb24gcGFzc2VkIHRvIHRoZSBjb25zdHJ1Y3RvciBvZiBhIFByb21pc2UgaXMgZXZhbHVhdGVkXG4gKiBpbW1lZGlhdGVseS4gVGhpcyBtYXkgbm90IGFsd2F5cyBiZSBkZXNpcmFibGUuIFVzZSBhIFByb21pc2VRdWV1ZSBpZiB5b3UgaGF2ZVxuICogYSBzZXF1ZW5jZSBvZiBhc3luYyBvcGVyYXRpb25zIHRoYXQgbmVlZCB0byB1c2UgYSBzaGFyZWQgcmVzb3VyY2Ugc2VyaWFsbHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9taXNlUXVldWUge1xuICBfcHJvbWlzZVBvb2w6IFByb21pc2VQb29sO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3Byb21pc2VQb29sID0gbmV3IFByb21pc2VQb29sKDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBleGVjdXRvciBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgcmVzb2x2ZSBhbmQgcmVqZWN0IGNhbGxiYWNrcywganVzdFxuICAgKiAgICAgbGlrZSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3Rvci5cbiAgICogQHJldHVybiBBIFByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkL3JlamVjdGVkIGluIHJlc3BvbnNlIHRvIHRoZVxuICAgKiAgICAgZXhlY3V0aW9uIG9mIHRoZSBleGVjdXRvci5cbiAgICovXG4gIHN1Ym1pdChleGVjdXRvcjogRXhlY3V0b3IpOiBQcm9taXNlIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvbWlzZVBvb2wuc3VibWl0KGV4ZWN1dG9yKTtcbiAgfVxufVxuIl19
