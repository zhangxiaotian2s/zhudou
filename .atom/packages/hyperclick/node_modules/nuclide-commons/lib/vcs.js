
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var findVcsHelper = _asyncToGenerator(function* (src) {
  var options = {
    'cwd': path.dirname(src)
  };
  var hgResult = undefined;
  try {
    hgResult = yield asyncExecute('hg', ['root'], options);
  } catch (e) {
    hgResult = e;
  }

  if (hgResult.exitCode === 0) {
    return {
      vcs: 'hg',
      root: hgResult.stdout.trim()
    };
  }

  var gitResult = undefined;
  try {
    gitResult = yield asyncExecute('git', ['rev-parse', '--show-toplevel'], options);
  } catch (e) {
    gitResult = e;
  }

  if (gitResult.exitCode === 0) {
    return {
      vcs: 'git',
      root: gitResult.stdout.trim()
    };
  }

  throw new Error('Could not find VCS for: ' + src);
}

/**
 * For the given source file, find the type of vcs that is managing it as well
 * as the root directory for the VCS.
 */
);

var findVcs = _asyncToGenerator(function* (src) {
  var vcsInfo = vcsInfoCache[src];
  if (vcsInfo) {
    return vcsInfo;
  }

  vcsInfo = yield findVcsHelper(src);
  vcsInfoCache[src] = vcsInfo;
  return vcsInfo;
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _require = require('./process');

var asyncExecute = _require.asyncExecute;

var path = require('path');

var vcsInfoCache = {};

module.exports = {
  findVcs: findVcs
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNvbW1vbnMvbGliL3Zjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7SUFvQkcsYUFBYSxxQkFBNUIsV0FBNkIsR0FBVyxFQUFvQjtBQUMxRCxNQUFNLE9BQU8sR0FBRztBQUNkLFNBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztHQUN6QixDQUFDO0FBQ0YsTUFBSSxRQUFRLFlBQUEsQ0FBQztBQUNiLE1BQUk7QUFDRixZQUFRLEdBQUcsTUFBTSxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDeEQsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNWLFlBQVEsR0FBRyxDQUFDLENBQUM7R0FDZDs7QUFFRCxNQUFJLFFBQVEsQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFO0FBQzNCLFdBQU87QUFDTCxTQUFHLEVBQUUsSUFBSTtBQUNULFVBQUksRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtLQUM3QixDQUFDO0dBQ0g7O0FBRUQsTUFBSSxTQUFTLFlBQUEsQ0FBQztBQUNkLE1BQUk7QUFDRixhQUFTLEdBQUcsTUFBTSxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUMsV0FBVyxFQUFFLGlCQUFpQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDbEYsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNWLGFBQVMsR0FBRyxDQUFDLENBQUM7R0FDZjs7QUFFRCxNQUFJLFNBQVMsQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFO0FBQzVCLFdBQU87QUFDTCxTQUFHLEVBQUUsS0FBSztBQUNWLFVBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtLQUM5QixDQUFDO0dBQ0g7O0FBRUQsUUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsR0FBRyxHQUFHLENBQUMsQ0FBQztDQUNuRDs7Ozs7Ozs7SUFNYyxPQUFPLHFCQUF0QixXQUF1QixHQUFXLEVBQW9CO0FBQ3BELE1BQUksT0FBTyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxNQUFJLE9BQU8sRUFBRTtBQUNYLFdBQU8sT0FBTyxDQUFDO0dBQ2hCOztBQUVELFNBQU8sR0FBRyxNQUFNLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuQyxjQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQzVCLFNBQU8sT0FBTyxDQUFDO0NBQ2hCOzs7O2VBMURzQixPQUFPLENBQUMsV0FBVyxDQUFDOztJQUFwQyxZQUFZLFlBQVosWUFBWTs7QUFDbkIsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQU83QixJQUFNLFlBQXNDLEdBQUcsRUFBRSxDQUFDOztBQW9EbEQsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLFNBQU8sRUFBUCxPQUFPO0NBQ1IsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1jb21tb25zL2xpYi92Y3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuY29uc3Qge2FzeW5jRXhlY3V0ZX0gPSByZXF1aXJlKCcuL3Byb2Nlc3MnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbnR5cGUgVmNzSW5mbyA9IHtcbiAgdmNzOiBzdHJpbmc7XG4gIHJvb3Q6IHN0cmluZztcbn1cblxuY29uc3QgdmNzSW5mb0NhY2hlOiB7W3NyYzogc3RyaW5nXTogVmNzSW5mb30gPSB7fTtcblxuYXN5bmMgZnVuY3Rpb24gZmluZFZjc0hlbHBlcihzcmM6IHN0cmluZyk6IFByb21pc2U8VmNzSW5mbz4ge1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgICdjd2QnOiBwYXRoLmRpcm5hbWUoc3JjKSxcbiAgfTtcbiAgbGV0IGhnUmVzdWx0O1xuICB0cnkge1xuICAgIGhnUmVzdWx0ID0gYXdhaXQgYXN5bmNFeGVjdXRlKCdoZycsIFsncm9vdCddLCBvcHRpb25zKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhnUmVzdWx0ID0gZTtcbiAgfVxuXG4gIGlmIChoZ1Jlc3VsdC5leGl0Q29kZSA9PT0gMCkge1xuICAgIHJldHVybiB7XG4gICAgICB2Y3M6ICdoZycsXG4gICAgICByb290OiBoZ1Jlc3VsdC5zdGRvdXQudHJpbSgpLFxuICAgIH07XG4gIH1cblxuICBsZXQgZ2l0UmVzdWx0O1xuICB0cnkge1xuICAgIGdpdFJlc3VsdCA9IGF3YWl0IGFzeW5jRXhlY3V0ZSgnZ2l0JywgWydyZXYtcGFyc2UnLCAnLS1zaG93LXRvcGxldmVsJ10sIG9wdGlvbnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZ2l0UmVzdWx0ID0gZTtcbiAgfVxuXG4gIGlmIChnaXRSZXN1bHQuZXhpdENvZGUgPT09IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmNzOiAnZ2l0JyxcbiAgICAgIHJvb3Q6IGdpdFJlc3VsdC5zdGRvdXQudHJpbSgpLFxuICAgIH07XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIFZDUyBmb3I6ICcgKyBzcmMpO1xufVxuXG4vKipcbiAqIEZvciB0aGUgZ2l2ZW4gc291cmNlIGZpbGUsIGZpbmQgdGhlIHR5cGUgb2YgdmNzIHRoYXQgaXMgbWFuYWdpbmcgaXQgYXMgd2VsbFxuICogYXMgdGhlIHJvb3QgZGlyZWN0b3J5IGZvciB0aGUgVkNTLlxuICovXG5hc3luYyBmdW5jdGlvbiBmaW5kVmNzKHNyYzogc3RyaW5nKTogUHJvbWlzZTxWY3NJbmZvPiB7XG4gIGxldCB2Y3NJbmZvID0gdmNzSW5mb0NhY2hlW3NyY107XG4gIGlmICh2Y3NJbmZvKSB7XG4gICAgcmV0dXJuIHZjc0luZm87XG4gIH1cblxuICB2Y3NJbmZvID0gYXdhaXQgZmluZFZjc0hlbHBlcihzcmMpO1xuICB2Y3NJbmZvQ2FjaGVbc3JjXSA9IHZjc0luZm87XG4gIHJldHVybiB2Y3NJbmZvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZmluZFZjcyxcbn07XG4iXX0=
