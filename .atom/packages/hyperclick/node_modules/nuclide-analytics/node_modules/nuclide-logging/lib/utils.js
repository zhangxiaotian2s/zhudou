Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.patchErrorsOfLoggingEvent = patchErrorsOfLoggingEvent;
exports.serializeLoggingEvent = serializeLoggingEvent;
exports.deserializeLoggingEvent = deserializeLoggingEvent;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _log4js = require('log4js');

var _log4js2 = _interopRequireDefault(_log4js);

/**
 * JSON.stringify can't stringify instance of Error. To solve this problem, we
 * patch the errors in loggingEvent.data and convert it to an Object with 'name', 'message',
 * 'stack' and 'stackTrace' as fields.
 * If there is no error attached to loggingEvent.data, we create a new error and append it to
 * loggingEvent.data, so that we could get stack information which helps categorization in
 * logview.
 */
'use babel';

function patchErrorsOfLoggingEvent(loggingEvent) {
  var loggingEventCopy = _extends({}, loggingEvent);
  loggingEventCopy.data = (loggingEventCopy.data || []).slice();

  if (!loggingEventCopy.data.some(function (item) {
    return item instanceof Error;
  })) {
    loggingEventCopy.data.push(new Error('Auto generated Error'));
  }

  loggingEventCopy.data = loggingEventCopy.data.map(function (item) {
    if (item instanceof Error) {
      return {
        name: item.name,
        message: item.message,
        stack: item.stack,
        stackTrace: item.stackTrace
      };
    }
    return item;
  });

  return loggingEventCopy;
}

/**
 * Takes a loggingEvent object, returns string representation of it.
 */

function serializeLoggingEvent(loggingEvent) {
  return JSON.stringify(loggingEvent);
}

/**
 * Takes a string, returns an object with the correct log properties.
 *
 * This method has been "borrowed" from the `multiprocess` appender
 * by `nomiddlename` (https://github.com/nomiddlename/log4js-node/blob/master/lib/appenders/multiprocess.js)
 *
 * Apparently, node.js serializes everything to strings when using `process.send()`,
 * so we need smart deserialization that will recreate log date and level for further processing by
 * log4js internals.
 */

function deserializeLoggingEvent(loggingEventString) {
  var loggingEvent = undefined;
  try {
    loggingEvent = JSON.parse(loggingEventString);
    loggingEvent.startTime = new Date(loggingEvent.startTime);
    loggingEvent.level = _log4js2['default'].levels.toLevel(loggingEvent.level.levelStr);
  } catch (e) {
    // JSON.parse failed, just log the contents probably a naughty.
    loggingEvent = {
      startTime: new Date(),
      categoryName: 'log4js',
      level: _log4js2['default'].levels.ERROR,
      data: ['Unable to parse log:', loggingEventString]
    };
  }
  return loggingEvent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWxvZ2dpbmcvbGliL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NCQVdtQixRQUFROzs7Ozs7Ozs7Ozs7QUFYM0IsV0FBVyxDQUFDOztBQXVCTCxTQUFTLHlCQUF5QixDQUFDLFlBQTBCLEVBQWdCO0FBQ2xGLE1BQU0sZ0JBQWdCLGdCQUFPLFlBQVksQ0FBQyxDQUFDO0FBQzNDLGtCQUFnQixDQUFDLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLElBQUksSUFBSSxFQUFFLENBQUEsQ0FBRSxLQUFLLEVBQUUsQ0FBQzs7QUFFOUQsTUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBQSxJQUFJO1dBQUksSUFBSSxZQUFZLEtBQUs7R0FBQSxDQUFDLEVBQUU7QUFDOUQsb0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7R0FDL0Q7O0FBRUQsa0JBQWdCLENBQUMsSUFBSSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQSxJQUFJLEVBQUk7QUFDeEQsUUFBSSxJQUFJLFlBQVksS0FBSyxFQUFFO0FBQ3pCLGFBQU87QUFDTCxZQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7QUFDZixlQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87QUFDckIsYUFBSyxFQUFFLElBQUksQ0FBQyxLQUFLO0FBQ2pCLGtCQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7T0FDNUIsQ0FBQztLQUNIO0FBQ0QsV0FBTyxJQUFJLENBQUM7R0FDYixDQUFDLENBQUM7O0FBRUgsU0FBTyxnQkFBZ0IsQ0FBQztDQUN6Qjs7Ozs7O0FBS00sU0FBUyxxQkFBcUIsQ0FBQyxZQUFtQixFQUFVO0FBQ2pFLFNBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztDQUNyQzs7Ozs7Ozs7Ozs7OztBQVlNLFNBQVMsdUJBQXVCLENBQUMsa0JBQTBCLEVBQWdCO0FBQ2hGLE1BQUksWUFBWSxZQUFBLENBQUM7QUFDakIsTUFBSTtBQUNGLGdCQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzlDLGdCQUFZLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMxRCxnQkFBWSxDQUFDLEtBQUssR0FBRyxvQkFBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7R0FDekUsQ0FBQyxPQUFPLENBQUMsRUFBRTs7QUFFVixnQkFBWSxHQUFHO0FBQ2IsZUFBUyxFQUFFLElBQUksSUFBSSxFQUFFO0FBQ3JCLGtCQUFZLEVBQUUsUUFBUTtBQUN0QixXQUFLLEVBQUUsb0JBQU8sTUFBTSxDQUFDLEtBQUs7QUFDMUIsVUFBSSxFQUFFLENBQUMsc0JBQXNCLEVBQUUsa0JBQWtCLENBQUM7S0FDbkQsQ0FBQztHQUNIO0FBQ0QsU0FBTyxZQUFZLENBQUM7Q0FDckIiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtbG9nZ2luZy9saWIvdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgbG9nNGpzIGZyb20gJ2xvZzRqcyc7XG5cbmltcG9ydCB0eXBlIHtMb2dnaW5nRXZlbnR9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIEpTT04uc3RyaW5naWZ5IGNhbid0IHN0cmluZ2lmeSBpbnN0YW5jZSBvZiBFcnJvci4gVG8gc29sdmUgdGhpcyBwcm9ibGVtLCB3ZVxuICogcGF0Y2ggdGhlIGVycm9ycyBpbiBsb2dnaW5nRXZlbnQuZGF0YSBhbmQgY29udmVydCBpdCB0byBhbiBPYmplY3Qgd2l0aCAnbmFtZScsICdtZXNzYWdlJyxcbiAqICdzdGFjaycgYW5kICdzdGFja1RyYWNlJyBhcyBmaWVsZHMuXG4gKiBJZiB0aGVyZSBpcyBubyBlcnJvciBhdHRhY2hlZCB0byBsb2dnaW5nRXZlbnQuZGF0YSwgd2UgY3JlYXRlIGEgbmV3IGVycm9yIGFuZCBhcHBlbmQgaXQgdG9cbiAqIGxvZ2dpbmdFdmVudC5kYXRhLCBzbyB0aGF0IHdlIGNvdWxkIGdldCBzdGFjayBpbmZvcm1hdGlvbiB3aGljaCBoZWxwcyBjYXRlZ29yaXphdGlvbiBpblxuICogbG9ndmlldy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhdGNoRXJyb3JzT2ZMb2dnaW5nRXZlbnQobG9nZ2luZ0V2ZW50OiBMb2dnaW5nRXZlbnQpOiBMb2dnaW5nRXZlbnQge1xuICBjb25zdCBsb2dnaW5nRXZlbnRDb3B5ID0gey4uLmxvZ2dpbmdFdmVudH07XG4gIGxvZ2dpbmdFdmVudENvcHkuZGF0YSA9IChsb2dnaW5nRXZlbnRDb3B5LmRhdGEgfHwgW10pLnNsaWNlKCk7XG5cbiAgaWYgKCFsb2dnaW5nRXZlbnRDb3B5LmRhdGEuc29tZShpdGVtID0+IGl0ZW0gaW5zdGFuY2VvZiBFcnJvcikpIHtcbiAgICBsb2dnaW5nRXZlbnRDb3B5LmRhdGEucHVzaChuZXcgRXJyb3IoJ0F1dG8gZ2VuZXJhdGVkIEVycm9yJykpO1xuICB9XG5cbiAgbG9nZ2luZ0V2ZW50Q29weS5kYXRhID0gbG9nZ2luZ0V2ZW50Q29weS5kYXRhLm1hcChpdGVtID0+IHtcbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXG4gICAgICAgIG1lc3NhZ2U6IGl0ZW0ubWVzc2FnZSxcbiAgICAgICAgc3RhY2s6IGl0ZW0uc3RhY2ssXG4gICAgICAgIHN0YWNrVHJhY2U6IGl0ZW0uc3RhY2tUcmFjZSxcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xuICB9KTtcblxuICByZXR1cm4gbG9nZ2luZ0V2ZW50Q29weTtcbn1cblxuLyoqXG4gKiBUYWtlcyBhIGxvZ2dpbmdFdmVudCBvYmplY3QsIHJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGl0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplTG9nZ2luZ0V2ZW50KGxvZ2dpbmdFdmVudDogbWl4ZWQpOiBzdHJpbmcge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobG9nZ2luZ0V2ZW50KTtcbn1cblxuLyoqXG4gKiBUYWtlcyBhIHN0cmluZywgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgY29ycmVjdCBsb2cgcHJvcGVydGllcy5cbiAqXG4gKiBUaGlzIG1ldGhvZCBoYXMgYmVlbiBcImJvcnJvd2VkXCIgZnJvbSB0aGUgYG11bHRpcHJvY2Vzc2AgYXBwZW5kZXJcbiAqIGJ5IGBub21pZGRsZW5hbWVgIChodHRwczovL2dpdGh1Yi5jb20vbm9taWRkbGVuYW1lL2xvZzRqcy1ub2RlL2Jsb2IvbWFzdGVyL2xpYi9hcHBlbmRlcnMvbXVsdGlwcm9jZXNzLmpzKVxuICpcbiAqIEFwcGFyZW50bHksIG5vZGUuanMgc2VyaWFsaXplcyBldmVyeXRoaW5nIHRvIHN0cmluZ3Mgd2hlbiB1c2luZyBgcHJvY2Vzcy5zZW5kKClgLFxuICogc28gd2UgbmVlZCBzbWFydCBkZXNlcmlhbGl6YXRpb24gdGhhdCB3aWxsIHJlY3JlYXRlIGxvZyBkYXRlIGFuZCBsZXZlbCBmb3IgZnVydGhlciBwcm9jZXNzaW5nIGJ5XG4gKiBsb2c0anMgaW50ZXJuYWxzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemVMb2dnaW5nRXZlbnQobG9nZ2luZ0V2ZW50U3RyaW5nOiBzdHJpbmcpOiBMb2dnaW5nRXZlbnQge1xuICBsZXQgbG9nZ2luZ0V2ZW50O1xuICB0cnkge1xuICAgIGxvZ2dpbmdFdmVudCA9IEpTT04ucGFyc2UobG9nZ2luZ0V2ZW50U3RyaW5nKTtcbiAgICBsb2dnaW5nRXZlbnQuc3RhcnRUaW1lID0gbmV3IERhdGUobG9nZ2luZ0V2ZW50LnN0YXJ0VGltZSk7XG4gICAgbG9nZ2luZ0V2ZW50LmxldmVsID0gbG9nNGpzLmxldmVscy50b0xldmVsKGxvZ2dpbmdFdmVudC5sZXZlbC5sZXZlbFN0cik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBKU09OLnBhcnNlIGZhaWxlZCwganVzdCBsb2cgdGhlIGNvbnRlbnRzIHByb2JhYmx5IGEgbmF1Z2h0eS5cbiAgICBsb2dnaW5nRXZlbnQgPSB7XG4gICAgICBzdGFydFRpbWU6IG5ldyBEYXRlKCksXG4gICAgICBjYXRlZ29yeU5hbWU6ICdsb2c0anMnLFxuICAgICAgbGV2ZWw6IGxvZzRqcy5sZXZlbHMuRVJST1IsXG4gICAgICBkYXRhOiBbJ1VuYWJsZSB0byBwYXJzZSBsb2c6JywgbG9nZ2luZ0V2ZW50U3RyaW5nXSxcbiAgICB9O1xuICB9XG4gIHJldHVybiBsb2dnaW5nRXZlbnQ7XG59XG4iXX0=
