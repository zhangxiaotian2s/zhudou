Object.defineProperty(exports, '__esModule', {
  value: true
});

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var getInstance = _asyncToGenerator(function* (file) {
  var root = yield (0, _FlowHelpers.findFlowConfigDir)(file);
  if (root == null) {
    return null;
  }

  var instance = flowRoots.get(root);
  if (!instance) {
    var _require = require('./FlowRoot');

    var FlowRoot = _require.FlowRoot;

    instance = new FlowRoot(root);
    flowRoots.set(root, instance);
  }
  return instance;
});

var runWithInstance = _asyncToGenerator(function* (file, f) {
  var instance = yield getInstance(file);
  if (instance == null) {
    return null;
  }

  return yield f(instance);
});

exports.dispose = dispose;
exports.flowFindDefinition = flowFindDefinition;
exports.flowFindDiagnostics = flowFindDiagnostics;
exports.flowGetAutocompleteSuggestions = flowGetAutocompleteSuggestions;

var flowGetType = _asyncToGenerator(function* (file, currentContents, line, column, includeRawType) {
  return runWithInstance(file, function (instance) {
    return instance.flowGetType(file, currentContents, line, column, includeRawType);
  });
});

exports.flowGetType = flowGetType;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

// Diagnostic information, returned from findDiagnostics.

var _FlowHelpers = require('./FlowHelpers');

// string rather than NuclideUri because this module will always execute at the location of the
// file, so it will always be a real path and cannot be prefixed with nuclide://
'use babel';

/*
 * Each error or warning can consist of any number of different messages from
 * Flow to help explain the problem and point to different locations that may be
 * of interest.
 */

// If types are added here, make sure to also add them to FlowConstants.js. This needs to be the
// canonical type definition so that we can use these in the service framework.
var flowRoots = new Map();

function dispose() {
  flowRoots.forEach(function (instance) {
    return instance.dispose();
  });
  flowRoots.clear();
}

function flowFindDefinition(file, currentContents, line, column) {
  return runWithInstance(file, function (instance) {
    return instance.flowFindDefinition(file, currentContents, line, column);
  });
}

function flowFindDiagnostics(file, currentContents) {
  return runWithInstance(file, function (instance) {
    return instance.flowFindDiagnostics(file, currentContents);
  });
}

function flowGetAutocompleteSuggestions(file, currentContents, line, column, prefix, activatedManually) {
  return runWithInstance(file, function (instance) {
    return instance.flowGetAutocompleteSuggestions(file, currentContents, line, column, prefix, activatedManually);
  });
}

// The location of the .flowconfig where these messages came from.
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy96aGFuZ3hpYW90aWFuLy5hdG9tL3BhY2thZ2VzL251Y2xpZGUtZnV6enktZmlsZW5hbWUtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL251Y2xpZGUtY2xpZW50L25vZGVfbW9kdWxlcy9udWNsaWRlLXJlbW90ZS1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy9udWNsaWRlLXNlcnZlci9ub2RlX21vZHVsZXMvbnVjbGlkZS1mbG93LWJhc2UvbGliL0Zsb3dTZXJ2aWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztJQTZEZSxXQUFXLHFCQUExQixXQUEyQixJQUFZLEVBQXVCO0FBQzVELE1BQU0sSUFBSSxHQUFHLE1BQU0sb0NBQWtCLElBQUksQ0FBQyxDQUFDO0FBQzNDLE1BQUksSUFBSSxJQUFJLElBQUksRUFBRTtBQUNoQixXQUFPLElBQUksQ0FBQztHQUNiOztBQUVELE1BQUksUUFBUSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkMsTUFBSSxDQUFDLFFBQVEsRUFBRTttQkFDTSxPQUFPLENBQUMsWUFBWSxDQUFDOztRQUFqQyxRQUFRLFlBQVIsUUFBUTs7QUFDZixZQUFRLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsYUFBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7R0FDL0I7QUFDRCxTQUFPLFFBQVEsQ0FBQztDQUNqQjs7SUFFYyxlQUFlLHFCQUE5QixXQUNFLElBQVksRUFDWixDQUFzQyxFQUN6QjtBQUNiLE1BQU0sUUFBUSxHQUFHLE1BQU0sV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pDLE1BQUksUUFBUSxJQUFJLElBQUksRUFBRTtBQUNwQixXQUFPLElBQUksQ0FBQztHQUNiOztBQUVELFNBQU8sTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDMUI7Ozs7Ozs7SUEwRHFCLFdBQVcscUJBQTFCLFdBQ0wsSUFBZ0IsRUFDaEIsZUFBdUIsRUFDdkIsSUFBWSxFQUNaLE1BQWMsRUFDZCxjQUF1QixFQUNxQjtBQUM1QyxTQUFPLGVBQWUsQ0FDcEIsSUFBSSxFQUNKLFVBQUEsUUFBUTtXQUFJLFFBQVEsQ0FBQyxXQUFXLENBQzlCLElBQUksRUFDSixlQUFlLEVBQ2YsSUFBSSxFQUNKLE1BQU0sRUFDTixjQUFjLENBQ2Y7R0FBQSxDQUNGLENBQUM7Q0FDSDs7Ozs7Ozs7MkJBMUcrQixlQUFlOzs7O0FBdkQvQyxXQUFXLENBQUM7Ozs7Ozs7Ozs7QUEyRFosSUFBTSxTQUFpQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7O0FBNkI3QyxTQUFTLE9BQU8sR0FBUztBQUM5QixXQUFTLENBQUMsT0FBTyxDQUFDLFVBQUEsUUFBUTtXQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUU7R0FBQSxDQUFDLENBQUM7QUFDbEQsV0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ25COztBQUVNLFNBQVMsa0JBQWtCLENBQ2hDLElBQWdCLEVBQ2hCLGVBQXVCLEVBQ3ZCLElBQVksRUFDWixNQUFjLEVBQ0M7QUFDZixTQUFPLGVBQWUsQ0FDcEIsSUFBSSxFQUNKLFVBQUEsUUFBUTtXQUFJLFFBQVEsQ0FBQyxrQkFBa0IsQ0FDckMsSUFBSSxFQUNKLGVBQWUsRUFDZixJQUFJLEVBQ0osTUFBTSxDQUNQO0dBQUEsQ0FDRixDQUFDO0NBQ0g7O0FBRU0sU0FBUyxtQkFBbUIsQ0FDakMsSUFBZ0IsRUFDaEIsZUFBd0IsRUFDRDtBQUN2QixTQUFPLGVBQWUsQ0FDcEIsSUFBSSxFQUNKLFVBQUEsUUFBUTtXQUFJLFFBQVEsQ0FBQyxtQkFBbUIsQ0FDdEMsSUFBSSxFQUNKLGVBQWUsQ0FDaEI7R0FBQSxDQUNGLENBQUM7Q0FDSDs7QUFFTSxTQUFTLDhCQUE4QixDQUM1QyxJQUFnQixFQUNoQixlQUF1QixFQUN2QixJQUFZLEVBQ1osTUFBYyxFQUNkLE1BQWMsRUFDZCxpQkFBMEIsRUFDWjtBQUNkLFNBQU8sZUFBZSxDQUNwQixJQUFJLEVBQ0osVUFBQSxRQUFRO1dBQUksUUFBUSxDQUFDLDhCQUE4QixDQUNqRCxJQUFJLEVBQ0osZUFBZSxFQUNmLElBQUksRUFDSixNQUFNLEVBQ04sTUFBTSxFQUNOLGlCQUFpQixDQUNsQjtHQUFBLENBQ0YsQ0FBQztDQUNIIiwiZmlsZSI6Ii9Vc2Vycy96aGFuZ3hpYW90aWFuLy5hdG9tL3BhY2thZ2VzL251Y2xpZGUtZnV6enktZmlsZW5hbWUtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL251Y2xpZGUtY2xpZW50L25vZGVfbW9kdWxlcy9udWNsaWRlLXJlbW90ZS1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy9udWNsaWRlLXNlcnZlci9ub2RlX21vZHVsZXMvbnVjbGlkZS1mbG93LWJhc2UvbGliL0Zsb3dTZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IHR5cGUge051Y2xpZGVVcml9IGZyb20gJ251Y2xpZGUtcmVtb3RlLXVyaSc7XG5cbmltcG9ydCB0eXBlIHtGbG93Um9vdCBhcyBGbG93Um9vdFR9IGZyb20gJy4vRmxvd1Jvb3QnO1xuXG4vLyBEaWFnbm9zdGljIGluZm9ybWF0aW9uLCByZXR1cm5lZCBmcm9tIGZpbmREaWFnbm9zdGljcy5cbmV4cG9ydCB0eXBlIERpYWdub3N0aWNzID0ge1xuICAvLyBUaGUgbG9jYXRpb24gb2YgdGhlIC5mbG93Y29uZmlnIHdoZXJlIHRoZXNlIG1lc3NhZ2VzIGNhbWUgZnJvbS5cbiAgZmxvd1Jvb3Q6IE51Y2xpZGVVcmksXG4gIG1lc3NhZ2VzOiBBcnJheTxEaWFnbm9zdGljPixcbn07XG5cbi8qXG4gKiBFYWNoIGVycm9yIG9yIHdhcm5pbmcgY2FuIGNvbnNpc3Qgb2YgYW55IG51bWJlciBvZiBkaWZmZXJlbnQgbWVzc2FnZXMgZnJvbVxuICogRmxvdyB0byBoZWxwIGV4cGxhaW4gdGhlIHByb2JsZW0gYW5kIHBvaW50IHRvIGRpZmZlcmVudCBsb2NhdGlvbnMgdGhhdCBtYXkgYmVcbiAqIG9mIGludGVyZXN0LlxuICovXG5leHBvcnQgdHlwZSBEaWFnbm9zdGljID0gQXJyYXk8U2luZ2xlTWVzc2FnZT47XG5cbmV4cG9ydCB0eXBlIFNpbmdsZU1lc3NhZ2UgPSB7XG4gIHBhdGg6ID9OdWNsaWRlVXJpO1xuICBkZXNjcjogc3RyaW5nO1xuICBsaW5lOiBudW1iZXI7XG4gIGVuZGxpbmU6IG51bWJlcjtcbiAgc3RhcnQ6IG51bWJlcjtcbiAgZW5kOiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIExvYyA9IHtcbiAgZmlsZTogTnVjbGlkZVVyaTtcbiAgbGluZTogbnVtYmVyO1xuICBjb2x1bW46IG51bWJlcjtcbn1cblxuLy8gSWYgdHlwZXMgYXJlIGFkZGVkIGhlcmUsIG1ha2Ugc3VyZSB0byBhbHNvIGFkZCB0aGVtIHRvIEZsb3dDb25zdGFudHMuanMuIFRoaXMgbmVlZHMgdG8gYmUgdGhlXG4vLyBjYW5vbmljYWwgdHlwZSBkZWZpbml0aW9uIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVzZSBpbiB0aGUgc2VydmljZSBmcmFtZXdvcmsuXG5leHBvcnQgdHlwZSBTZXJ2ZXJTdGF0dXNUeXBlID1cbiAgJ2ZhaWxlZCcgfFxuICAndW5rbm93bicgfFxuICAnbm90IHJ1bm5pbmcnIHxcbiAgJ25vdCBpbnN0YWxsZWQnIHxcbiAgJ2J1c3knIHxcbiAgJ2luaXQnIHxcbiAgJ3JlYWR5JztcblxuaW1wb3J0IHtmaW5kRmxvd0NvbmZpZ0Rpcn0gZnJvbSAnLi9GbG93SGVscGVycyc7XG5cbi8vIHN0cmluZyByYXRoZXIgdGhhbiBOdWNsaWRlVXJpIGJlY2F1c2UgdGhpcyBtb2R1bGUgd2lsbCBhbHdheXMgZXhlY3V0ZSBhdCB0aGUgbG9jYXRpb24gb2YgdGhlXG4vLyBmaWxlLCBzbyBpdCB3aWxsIGFsd2F5cyBiZSBhIHJlYWwgcGF0aCBhbmQgY2Fubm90IGJlIHByZWZpeGVkIHdpdGggbnVjbGlkZTovL1xuY29uc3QgZmxvd1Jvb3RzOiBNYXA8c3RyaW5nLCBGbG93Um9vdFQ+ID0gbmV3IE1hcCgpO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRJbnN0YW5jZShmaWxlOiBzdHJpbmcpOiBQcm9taXNlPD9GbG93Um9vdFQ+IHtcbiAgY29uc3Qgcm9vdCA9IGF3YWl0IGZpbmRGbG93Q29uZmlnRGlyKGZpbGUpO1xuICBpZiAocm9vdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgaW5zdGFuY2UgPSBmbG93Um9vdHMuZ2V0KHJvb3QpO1xuICBpZiAoIWluc3RhbmNlKSB7XG4gICAgY29uc3Qge0Zsb3dSb290fSA9IHJlcXVpcmUoJy4vRmxvd1Jvb3QnKTtcbiAgICBpbnN0YW5jZSA9IG5ldyBGbG93Um9vdChyb290KTtcbiAgICBmbG93Um9vdHMuc2V0KHJvb3QsIGluc3RhbmNlKTtcbiAgfVxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bldpdGhJbnN0YW5jZTxUPihcbiAgZmlsZTogc3RyaW5nLFxuICBmOiAoaW5zdGFuY2U6IEZsb3dSb290VCkgPT4gUHJvbWlzZTxUPlxuKTogUHJvbWlzZTw/VD4ge1xuICBjb25zdCBpbnN0YW5jZSA9IGF3YWl0IGdldEluc3RhbmNlKGZpbGUpO1xuICBpZiAoaW5zdGFuY2UgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGF3YWl0IGYoaW5zdGFuY2UpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzcG9zZSgpOiB2b2lkIHtcbiAgZmxvd1Jvb3RzLmZvckVhY2goaW5zdGFuY2UgPT4gaW5zdGFuY2UuZGlzcG9zZSgpKTtcbiAgZmxvd1Jvb3RzLmNsZWFyKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbG93RmluZERlZmluaXRpb24oXG4gIGZpbGU6IE51Y2xpZGVVcmksXG4gIGN1cnJlbnRDb250ZW50czogc3RyaW5nLFxuICBsaW5lOiBudW1iZXIsXG4gIGNvbHVtbjogbnVtYmVyXG4pOiBQcm9taXNlPD9Mb2M+IHtcbiAgcmV0dXJuIHJ1bldpdGhJbnN0YW5jZShcbiAgICBmaWxlLFxuICAgIGluc3RhbmNlID0+IGluc3RhbmNlLmZsb3dGaW5kRGVmaW5pdGlvbihcbiAgICAgIGZpbGUsXG4gICAgICBjdXJyZW50Q29udGVudHMsXG4gICAgICBsaW5lLFxuICAgICAgY29sdW1uLFxuICAgIClcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZsb3dGaW5kRGlhZ25vc3RpY3MoXG4gIGZpbGU6IE51Y2xpZGVVcmksXG4gIGN1cnJlbnRDb250ZW50czogP3N0cmluZ1xuKTogUHJvbWlzZTw/RGlhZ25vc3RpY3M+IHtcbiAgcmV0dXJuIHJ1bldpdGhJbnN0YW5jZShcbiAgICBmaWxlLFxuICAgIGluc3RhbmNlID0+IGluc3RhbmNlLmZsb3dGaW5kRGlhZ25vc3RpY3MoXG4gICAgICBmaWxlLFxuICAgICAgY3VycmVudENvbnRlbnRzLFxuICAgIClcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZsb3dHZXRBdXRvY29tcGxldGVTdWdnZXN0aW9ucyhcbiAgZmlsZTogTnVjbGlkZVVyaSxcbiAgY3VycmVudENvbnRlbnRzOiBzdHJpbmcsXG4gIGxpbmU6IG51bWJlcixcbiAgY29sdW1uOiBudW1iZXIsXG4gIHByZWZpeDogc3RyaW5nLFxuICBhY3RpdmF0ZWRNYW51YWxseTogYm9vbGVhbixcbik6IFByb21pc2U8YW55PiB7XG4gIHJldHVybiBydW5XaXRoSW5zdGFuY2UoXG4gICAgZmlsZSxcbiAgICBpbnN0YW5jZSA9PiBpbnN0YW5jZS5mbG93R2V0QXV0b2NvbXBsZXRlU3VnZ2VzdGlvbnMoXG4gICAgICBmaWxlLFxuICAgICAgY3VycmVudENvbnRlbnRzLFxuICAgICAgbGluZSxcbiAgICAgIGNvbHVtbixcbiAgICAgIHByZWZpeCxcbiAgICAgIGFjdGl2YXRlZE1hbnVhbGx5LFxuICAgIClcbiAgKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZsb3dHZXRUeXBlKFxuICBmaWxlOiBOdWNsaWRlVXJpLFxuICBjdXJyZW50Q29udGVudHM6IHN0cmluZyxcbiAgbGluZTogbnVtYmVyLFxuICBjb2x1bW46IG51bWJlcixcbiAgaW5jbHVkZVJhd1R5cGU6IGJvb2xlYW4sXG4pOiBQcm9taXNlPD97dHlwZTogc3RyaW5nLCByYXdUeXBlOiA/c3RyaW5nfT4ge1xuICByZXR1cm4gcnVuV2l0aEluc3RhbmNlKFxuICAgIGZpbGUsXG4gICAgaW5zdGFuY2UgPT4gaW5zdGFuY2UuZmxvd0dldFR5cGUoXG4gICAgICBmaWxlLFxuICAgICAgY3VycmVudENvbnRlbnRzLFxuICAgICAgbGluZSxcbiAgICAgIGNvbHVtbixcbiAgICAgIGluY2x1ZGVSYXdUeXBlLFxuICAgIClcbiAgKTtcbn1cbiJdfQ==
//# sourceURL=/Users/zhangxiaotian/.atom/packages/nuclide-fuzzy-filename-provider/node_modules/nuclide-client/node_modules/nuclide-remote-connection/node_modules/nuclide-server/node_modules/nuclide-flow-base/lib/FlowService.js
