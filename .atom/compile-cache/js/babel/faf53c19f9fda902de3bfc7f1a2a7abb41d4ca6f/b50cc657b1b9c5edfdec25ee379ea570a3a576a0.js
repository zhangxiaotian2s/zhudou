'use babel';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _require = require('atom');

var Range = _require.Range;

var findWholeRangeOfSymbol = require('../lib/findWholeRangeOfSymbol');

var _require$jasmineMatchers = require('nuclide-atom-test-helpers').jasmineMatchers;

var toEqualAtomRange = _require$jasmineMatchers.toEqualAtomRange;
var toEqualAtomRanges = _require$jasmineMatchers.toEqualAtomRanges;

describe('findWholeRangeOfSymbol', function () {
  var editor = undefined;

  beforeEach(function () {
    var rangeMatchers = { toEqualAtomRange: toEqualAtomRange, toEqualAtomRanges: toEqualAtomRanges };
    this.addMatchers(rangeMatchers);
    waitsForPromise(_asyncToGenerator(function* () {
      editor = yield atom.workspace.open('sampleObjC.m');
    }));
  });

  it('finds the range of a non-selector symbol.', function () {
    var text = 'name';
    var spelling = 'name';
    var textRangeInSample = new Range([8, 31], [8, 35]);
    var extent = { start: { line: 8, column: 31 }, end: { line: 8, column: 35 } };
    var ranges = findWholeRangeOfSymbol(editor, text, textRangeInSample, spelling, extent);
    // The range returned should just be the range of the original text.
    expect(ranges).toEqualAtomRanges([textRangeInSample]);
  });

  it('finds the range of a selector with one argument.', function () {
    var text = 'cStringUsingEncoding';
    var spelling = 'cStringUsingEncoding:';
    var textRangeInSample = new Range([12, 39], [12, 59]);
    var extent = { start: { line: 12, column: 35 }, end: { line: 12, column: 83 } };
    var ranges = findWholeRangeOfSymbol(editor, text, textRangeInSample, spelling, extent);
    // The range returned should just be the range of the original text + 1 for the colon.
    var expectedRange = new Range(textRangeInSample.start, [12, 60]);
    expect(ranges).toEqualAtomRanges([expectedRange]);
  });

  it('finds the range of a selector with multiple arguments, when any of the segments is the selected "text".', function () {
    var spelling = 'createDirectoryAtPath:withIntermediateDirectories:attributes:error:';
    // The ranges returned should be all the ranges of all the segments, including the colons.
    var expectedRange1 = new Range([17, 20], [17, 42]); // location of textRangeInSample1 + 1 colon
    var expectedRange2 = new Range([18, 14], [18, 42]); // location of textRangeInSample2 + 1 colon
    var expectedRange3 = new Range([19, 31], [19, 42]); // location of textRangeInSample3 + 1 colon
    var expectedRange4 = new Range([19, 46], [19, 52]); // location of textRangeInSample4 + 1 colon
    var expectedRanges = [expectedRange1, expectedRange2, expectedRange3, expectedRange4];
    var extent = { start: { line: 17, column: 6 }, end: { line: 19, column: 56 } };

    var text1 = 'createDirectoryAtPath';
    var textRangeInSample1 = new Range([17, 20], [17, 41]);
    var ranges1 = findWholeRangeOfSymbol(editor, text1, textRangeInSample1, spelling, extent);
    expect(ranges1).toEqualAtomRanges(expectedRanges);

    var text2 = 'withIntermediateDirectories';
    var textRangeInSample2 = new Range([18, 14], [18, 41]);
    var ranges2 = findWholeRangeOfSymbol(editor, text2, textRangeInSample2, spelling, extent);
    expect(ranges2).toEqualAtomRanges(expectedRanges);

    var text3 = 'attributes';
    var textRangeInSample3 = new Range([19, 31], [19, 41]);
    var ranges3 = findWholeRangeOfSymbol(editor, text3, textRangeInSample3, spelling, extent);
    expect(ranges3).toEqualAtomRanges(expectedRanges);

    var text4 = 'createDirectoryAtPath';
    var textRangeInSample4 = new Range([19, 46], [19, 51]);
    var ranges4 = findWholeRangeOfSymbol(editor, text4, textRangeInSample4, spelling, extent);
    expect(ranges4).toEqualAtomRanges(expectedRanges);
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/zhangxiaotian/.atom/packages/nuclide-clang-atom/spec/findWholeRangeOfSymbol-spec.js
