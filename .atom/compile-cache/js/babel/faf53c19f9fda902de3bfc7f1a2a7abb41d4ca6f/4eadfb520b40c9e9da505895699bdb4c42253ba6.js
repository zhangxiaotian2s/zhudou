

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _libEditorUtils = require('../lib/editor-utils');

'use babel';

describe('editor-utils', function () {

  describe('buildLineRangesWithOffsets()', function () {
    it('returns adjusted regions and screen lines when offsets are in the middle of the lines', function () {
      var _buildLineRangesWithOffsets = (0, _libEditorUtils.buildLineRangesWithOffsets)([1, 2, 3, 4], new Map([[2, 2]]), 0, 4, function () {
        return 0;
      });

      var regions = _buildLineRangesWithOffsets.regions;
      var screenLines = _buildLineRangesWithOffsets.screenLines;

      expect(regions).toEqual([{ bufferRows: 1, screenRows: 1 }, { bufferRows: 1, screenRows: 3 }, { bufferRows: 2, screenRows: 2 }]);
      expect(screenLines).toEqual([1, 2, 0, 0, 3, 4]);
    });

    it('returns adjusted regions and screen lines when an offset is set to the second line', function () {
      var _buildLineRangesWithOffsets2 = (0, _libEditorUtils.buildLineRangesWithOffsets)([1, 2, 3, 4], new Map([[1, 2]]), 0, 4, function () {
        return 0;
      });

      var regions = _buildLineRangesWithOffsets2.regions;
      var screenLines = _buildLineRangesWithOffsets2.screenLines;

      expect(regions).toEqual([{ bufferRows: 1, screenRows: 3 }, { bufferRows: 3, screenRows: 3 }]);
      expect(screenLines).toEqual([1, 0, 0, 2, 3, 4]);
    });

    it('returns adjusted regions and screen lines when an offset is set to the first line', function () {
      var _buildLineRangesWithOffsets3 = (0, _libEditorUtils.buildLineRangesWithOffsets)([1, 2, 3, 4], new Map([[0, 2]]), 0, 4, function () {
        return 0;
      });

      var regions = _buildLineRangesWithOffsets3.regions;
      var screenLines = _buildLineRangesWithOffsets3.screenLines;

      expect(regions).toEqual([{ bufferRows: 1, screenRows: 3 }, { bufferRows: 3, screenRows: 3 }]);
      expect(screenLines).toEqual([0, 0, 1, 2, 3, 4]);
    });

    it('returns the same regions and screen lines when start row is after all offsets', function () {
      var _buildLineRangesWithOffsets4 = (0, _libEditorUtils.buildLineRangesWithOffsets)([1, 2, 3, 4], new Map([[0, 2]]), 3, 7, function () {
        return 0;
      });

      var regions = _buildLineRangesWithOffsets4.regions;
      var screenLines = _buildLineRangesWithOffsets4.screenLines;

      expect(regions).toEqual([{ bufferRows: 4, screenRows: 4 }]);
      expect(screenLines).toEqual([1, 2, 3, 4]);
    });

    it('returns the same regions and screen lines when end row is before all offsets', function () {
      var _buildLineRangesWithOffsets5 = (0, _libEditorUtils.buildLineRangesWithOffsets)([1, 2, 3, 4], new Map([[9, 2]]), 3, 7, function () {
        return 0;
      });

      var regions = _buildLineRangesWithOffsets5.regions;
      var screenLines = _buildLineRangesWithOffsets5.screenLines;

      expect(regions).toEqual([{ bufferRows: 4, screenRows: 4 }]);
      expect(screenLines).toEqual([1, 2, 3, 4]);
    });

    it('returns adjusted regions and screen lines when start row is > 0', function () {
      var _buildLineRangesWithOffsets6 = (0, _libEditorUtils.buildLineRangesWithOffsets)([1, 2, 3, 4], new Map([[5, 2]]), 3, 7, function () {
        return 0;
      });

      var regions = _buildLineRangesWithOffsets6.regions;
      var screenLines = _buildLineRangesWithOffsets6.screenLines;

      expect(regions).toEqual([{ bufferRows: 1, screenRows: 1 }, { bufferRows: 1, screenRows: 3 }, { bufferRows: 2, screenRows: 2 }]);
      expect(screenLines).toEqual([1, 2, 0, 0, 3, 4]);
    });

    it('returns adjusted regions and screen lines when start row equals the first offset', function () {
      var _buildLineRangesWithOffsets7 = (0, _libEditorUtils.buildLineRangesWithOffsets)([1, 2, 3, 4], new Map([[3, 1], [8, 1]]), 3, 7, function () {
        return 0;
      });

      var regions = _buildLineRangesWithOffsets7.regions;
      var screenLines = _buildLineRangesWithOffsets7.screenLines;

      expect(regions).toEqual([{ bufferRows: 1, screenRows: 2 }, { bufferRows: 3, screenRows: 3 }]);
      expect(screenLines).toEqual([0, 1, 2, 3, 4]);
    });

    it('returns adjusted regions and screen lines the last offset is just before the last line requested', function () {
      var _buildLineRangesWithOffsets8 = (0, _libEditorUtils.buildLineRangesWithOffsets)([1, 2, 3, 4], new Map([[1, 1], [6, 1]]), 3, 7, function () {
        return 0;
      });

      var regions = _buildLineRangesWithOffsets8.regions;
      var screenLines = _buildLineRangesWithOffsets8.screenLines;

      expect(regions).toEqual([{ bufferRows: 2, screenRows: 2 }, { bufferRows: 1, screenRows: 2 }, { bufferRows: 1, screenRows: 1 }]);
      expect(screenLines).toEqual([1, 2, 3, 0, 4]);
    });

    it('returns adjusted regions and screen lines the last offset is the last line requested', function () {
      var _buildLineRangesWithOffsets9 = (0, _libEditorUtils.buildLineRangesWithOffsets)([1, 2, 3, 4], new Map([[1, 1], [7, 1]]), 3, 7, function () {
        return 0;
      });

      var regions = _buildLineRangesWithOffsets9.regions;
      var screenLines = _buildLineRangesWithOffsets9.screenLines;

      expect(regions).toEqual([{ bufferRows: 4, screenRows: 4 }]);
      expect(screenLines).toEqual([1, 2, 3, 4]);

      var _buildLineRangesWithOffsets10 = (0, _libEditorUtils.buildLineRangesWithOffsets)([5, 6, 7, 8], new Map([[1, 1], [7, 1]]), 7, 11, function () {
        return 0;
      });

      var followingRegions = _buildLineRangesWithOffsets10.regions;
      var followingScreenLines = _buildLineRangesWithOffsets10.screenLines;

      expect(followingRegions).toEqual([{ bufferRows: 1, screenRows: 2 }, { bufferRows: 3, screenRows: 3 }]);
      expect(followingScreenLines).toEqual([0, 5, 6, 7, 8]);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/zhangxiaotian/.atom/packages/nuclide-diff-view/spec/editor-utils-spec.js
