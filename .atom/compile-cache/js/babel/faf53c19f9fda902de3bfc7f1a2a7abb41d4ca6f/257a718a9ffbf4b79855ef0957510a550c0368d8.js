

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _libConstantsJs = require('../lib/constants.js');

'use babel';

describe('JAVASCRIPT_WORD_REGEX', function () {
  function getAllMatches(r, s) {
    // Reset the state of the RegExp.
    r.lastIndex = 0;
    var results = [];
    var currentResult = undefined;
    while ((currentResult = r.exec(s)) != null) {
      results.push(currentResult[0]);
    }
    return results;
  }

  // For brevity in specs.
  function matches(s) {
    return getAllMatches(_libConstantsJs.JAVASCRIPT_WORD_REGEX, s);
  }

  it('should match numbers', function () {
    expect(matches('454     1231')).toEqual(['454', '1231']);
  });

  it('should match identifiers', function () {
    expect(matches('hello these are $_words___A (mostly)')).toEqual(['hello', 'these', 'are', '$_words___A', 'mostly']);
  });

  ['`', "'", '"'].forEach(function (delimiter) {
    describe('matching strings delimited by ' + delimiter + '.', function () {
      // For brevity.
      var d = delimiter;
      it('should match a simple string', function () {
        expect(matches(d + 'asdf asdf' + d + ' identifier ' + d + 'another string' + d)).toEqual([d + 'asdf asdf' + d, 'identifier', d + 'another string' + d]);
      });

      it('should handle escaped delimiters', function () {
        expect(matches('id ' + d + 'foo \\' + d + ' bar' + d + ' another id')).toEqual(['id', d + 'foo \\' + d + ' bar' + d, 'another', 'id']);
        expect(matches(d + '\\' + d + d)).toEqual([d + '\\' + d + d]);
      });

      it('should handle backslashes in front of other characters', function () {
        expect(matches(d + '\\4asdf foo' + d)).toEqual([d + '\\4asdf foo' + d]);
        expect(matches(d + '\\\\' + d)).toEqual([d + '\\\\' + d]);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy96aGFuZ3hpYW90aWFuLy5hdG9tL3BhY2thZ2VzL251Y2xpZGUtZmxvdy9zcGVjL2NvbnN0YW50cy1zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OEJBV29DLHFCQUFxQjs7QUFYekQsV0FBVyxDQUFDOztBQWFaLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxZQUFNO0FBQ3RDLFdBQVMsYUFBYSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQWlCOztBQUUxRCxLQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztBQUNoQixRQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7QUFDbkIsUUFBSSxhQUFhLFlBQUEsQ0FBQztBQUNsQixXQUFPLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUEsSUFBSyxJQUFJLEVBQUU7QUFDMUMsYUFBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNoQztBQUNELFdBQU8sT0FBTyxDQUFDO0dBQ2hCOzs7QUFHRCxXQUFTLE9BQU8sQ0FBQyxDQUFDLEVBQUU7QUFDbEIsV0FBTyxhQUFhLHdDQUF3QixDQUFDLENBQUMsQ0FBQztHQUNoRDs7QUFFRCxJQUFFLENBQUMsc0JBQXNCLEVBQUUsWUFBTTtBQUMvQixVQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7R0FDMUQsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQywwQkFBMEIsRUFBRSxZQUFNO0FBQ25DLFVBQU0sQ0FBQyxPQUFPLENBQUMsc0NBQXNDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUM5RCxPQUFPLEVBQ1AsT0FBTyxFQUNQLEtBQUssRUFDTCxhQUFhLEVBQ2IsUUFBUSxDQUNULENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxHQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsU0FBUyxFQUFJO0FBQ25DLFlBQVEsb0NBQWtDLFNBQVMsUUFBSyxZQUFNOztBQUU1RCxVQUFNLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDcEIsUUFBRSxDQUFDLDhCQUE4QixFQUFFLFlBQU07QUFDdkMsY0FBTSxDQUFDLE9BQU8sQ0FBSSxDQUFDLGlCQUFZLENBQUMsb0JBQWUsQ0FBQyxzQkFBaUIsQ0FBQyxDQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FDMUUsQ0FBQyxpQkFBWSxDQUFDLEVBQ2pCLFlBQVksRUFDVCxDQUFDLHNCQUFpQixDQUFDLENBQ3ZCLENBQUMsQ0FBQztPQUNKLENBQUMsQ0FBQzs7QUFFSCxRQUFFLENBQUMsa0NBQWtDLEVBQUUsWUFBTTtBQUMzQyxjQUFNLENBQUMsT0FBTyxTQUFPLENBQUMsY0FBUyxDQUFDLFlBQU8sQ0FBQyxpQkFBYyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQzlELElBQUksRUFDRCxDQUFDLGNBQVMsQ0FBQyxZQUFPLENBQUMsRUFDdEIsU0FBUyxFQUNULElBQUksQ0FDTCxDQUFDLENBQUM7QUFDSCxjQUFNLENBQUMsT0FBTyxDQUFJLENBQUMsVUFBSyxDQUFDLEdBQUcsQ0FBQyxDQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBSSxDQUFDLFVBQUssQ0FBQyxHQUFHLENBQUMsQ0FBRyxDQUFDLENBQUM7T0FDL0QsQ0FBQyxDQUFDOztBQUVILFFBQUUsQ0FBQyx3REFBd0QsRUFBRSxZQUFNO0FBQ2pFLGNBQU0sQ0FBQyxPQUFPLENBQUksQ0FBQyxtQkFBYyxDQUFDLENBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFJLENBQUMsbUJBQWMsQ0FBQyxDQUFHLENBQUMsQ0FBQztBQUN4RSxjQUFNLENBQUMsT0FBTyxDQUFJLENBQUMsWUFBTyxDQUFDLENBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFJLENBQUMsWUFBTyxDQUFDLENBQUcsQ0FBQyxDQUFDO09BQzNELENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiIvVXNlcnMvemhhbmd4aWFvdGlhbi8uYXRvbS9wYWNrYWdlcy9udWNsaWRlLWZsb3cvc3BlYy9jb25zdGFudHMtc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB7SkFWQVNDUklQVF9XT1JEX1JFR0VYfSBmcm9tICcuLi9saWIvY29uc3RhbnRzLmpzJztcblxuZGVzY3JpYmUoJ0pBVkFTQ1JJUFRfV09SRF9SRUdFWCcsICgpID0+IHtcbiAgZnVuY3Rpb24gZ2V0QWxsTWF0Y2hlcyhyOiBSZWdFeHAsIHM6IHN0cmluZyk6IEFycmF5PHN0cmluZz4ge1xuICAgIC8vIFJlc2V0IHRoZSBzdGF0ZSBvZiB0aGUgUmVnRXhwLlxuICAgIHIubGFzdEluZGV4ID0gMDtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgbGV0IGN1cnJlbnRSZXN1bHQ7XG4gICAgd2hpbGUgKChjdXJyZW50UmVzdWx0ID0gci5leGVjKHMpKSAhPSBudWxsKSB7XG4gICAgICByZXN1bHRzLnB1c2goY3VycmVudFJlc3VsdFswXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG5cbiAgLy8gRm9yIGJyZXZpdHkgaW4gc3BlY3MuXG4gIGZ1bmN0aW9uIG1hdGNoZXMocykge1xuICAgIHJldHVybiBnZXRBbGxNYXRjaGVzKEpBVkFTQ1JJUFRfV09SRF9SRUdFWCwgcyk7XG4gIH1cblxuICBpdCgnc2hvdWxkIG1hdGNoIG51bWJlcnMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KG1hdGNoZXMoJzQ1NCAgICAgMTIzMScpKS50b0VxdWFsKFsnNDU0JywgJzEyMzEnXSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbWF0Y2ggaWRlbnRpZmllcnMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KG1hdGNoZXMoJ2hlbGxvIHRoZXNlIGFyZSAkX3dvcmRzX19fQSAobW9zdGx5KScpKS50b0VxdWFsKFtcbiAgICAgICdoZWxsbycsXG4gICAgICAndGhlc2UnLFxuICAgICAgJ2FyZScsXG4gICAgICAnJF93b3Jkc19fX0EnLFxuICAgICAgJ21vc3RseScsXG4gICAgXSk7XG4gIH0pO1xuXG4gIFsnYCcsIFwiJ1wiLCAnXCInXS5mb3JFYWNoKGRlbGltaXRlciA9PiB7XG4gICAgZGVzY3JpYmUoYG1hdGNoaW5nIHN0cmluZ3MgZGVsaW1pdGVkIGJ5ICR7ZGVsaW1pdGVyfS5gLCAoKSA9PiB7XG4gICAgICAvLyBGb3IgYnJldml0eS5cbiAgICAgIGNvbnN0IGQgPSBkZWxpbWl0ZXI7XG4gICAgICBpdCgnc2hvdWxkIG1hdGNoIGEgc2ltcGxlIHN0cmluZycsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KG1hdGNoZXMoYCR7ZH1hc2RmIGFzZGYke2R9IGlkZW50aWZpZXIgJHtkfWFub3RoZXIgc3RyaW5nJHtkfWApKS50b0VxdWFsKFtcbiAgICAgICAgICBgJHtkfWFzZGYgYXNkZiR7ZH1gLFxuICAgICAgICAgICdpZGVudGlmaWVyJyxcbiAgICAgICAgICBgJHtkfWFub3RoZXIgc3RyaW5nJHtkfWAsXG4gICAgICAgIF0pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgaGFuZGxlIGVzY2FwZWQgZGVsaW1pdGVycycsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KG1hdGNoZXMoYGlkICR7ZH1mb28gXFxcXCR7ZH0gYmFyJHtkfSBhbm90aGVyIGlkYCkpLnRvRXF1YWwoW1xuICAgICAgICAgICdpZCcsXG4gICAgICAgICAgYCR7ZH1mb28gXFxcXCR7ZH0gYmFyJHtkfWAsXG4gICAgICAgICAgJ2Fub3RoZXInLFxuICAgICAgICAgICdpZCcsXG4gICAgICAgIF0pO1xuICAgICAgICBleHBlY3QobWF0Y2hlcyhgJHtkfVxcXFwke2R9JHtkfWApKS50b0VxdWFsKFtgJHtkfVxcXFwke2R9JHtkfWBdKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGhhbmRsZSBiYWNrc2xhc2hlcyBpbiBmcm9udCBvZiBvdGhlciBjaGFyYWN0ZXJzJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QobWF0Y2hlcyhgJHtkfVxcXFw0YXNkZiBmb28ke2R9YCkpLnRvRXF1YWwoW2Ake2R9XFxcXDRhc2RmIGZvbyR7ZH1gXSk7XG4gICAgICAgIGV4cGVjdChtYXRjaGVzKGAke2R9XFxcXFxcXFwke2R9YCkpLnRvRXF1YWwoW2Ake2R9XFxcXFxcXFwke2R9YF0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=
//# sourceURL=/Users/zhangxiaotian/.atom/packages/nuclide-flow/spec/constants-spec.js
