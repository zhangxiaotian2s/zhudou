function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _libHackSymbolProvider = require('../lib/HackSymbolProvider');

var _libHackSymbolProvider2 = _interopRequireDefault(_libHackSymbolProvider);

var _reactForAtom = require('react-for-atom');

var _reactForAtom2 = _interopRequireDefault(_reactForAtom);

var _nuclideTestHelpers = require('nuclide-test-helpers');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

'use babel';
var TestUtils = _reactForAtom2['default'].addons.TestUtils;

describe('HackSymbolProvider', function () {
  // These tests are set up so that calls to getHackSearchService() will delegate to this
  // function, so make sure to define this function at the start of your test to mock out this

  var getHackSearchService = undefined;

  beforeEach(function () {
    getHackSearchService = null;
    spyOn(require('../lib/getHackSearchService'), 'getHackSearchService').andCallFake(function (directory) {
      (0, _assert2['default'])(getHackSearchService);
      return getHackSearchService(directory);
    });
    (0, _nuclideTestHelpers.uncachedRequire)(require, '../lib/HackSymbolProvider');
  });

  afterEach(function () {
    jasmine.unspy(require('../lib/getHackSearchService'), 'getHackSearchService');
    (0, _nuclideTestHelpers.clearRequireCache)(require, '../lib/HackSymbolProvider');
  });

  describe('isEligibleForDirectory()', function () {
    var mockDirectory = {
      getPath: function getPath() {
        return '/some/local/path';
      }
    };

    it('isEligibleForDirectory() should return true when getHackSearchService() returns ' + 'an instance of HackSearchService', function () {
      var hackSearchService = createDummyHackSearchService();
      getHackSearchService = jasmine.createSpy('getHackSearchService').andReturn(hackSearchService);

      waitsForPromise(_asyncToGenerator(function* () {
        var isEligible = yield _libHackSymbolProvider2['default'].isEligibleForDirectory(mockDirectory);
        expect(isEligible).toBe(true);
        expect(getHackSearchService).toHaveBeenCalledWith(mockDirectory);
      }));
    });

    it('isEligibleForDirectory() should return false when getHackSearchService() returns ' + 'null', function () {
      getHackSearchService = jasmine.createSpy('getHackSearchService').andReturn(null);

      waitsForPromise(_asyncToGenerator(function* () {
        var isEligible = yield _libHackSymbolProvider2['default'].isEligibleForDirectory(mockDirectory);
        expect(isEligible).toBe(false);
        expect(getHackSearchService).toHaveBeenCalledWith(mockDirectory);
      }));
    });
  });

  describe('executeQuery()', function () {
    var mockLocalDirectory = {
      getPath: function getPath() {
        return '/some/local/path';
      }
    };

    it('returns an empty array for an empty query', function () {
      waitsForPromise(_asyncToGenerator(function* () {
        var results = yield _libHackSymbolProvider2['default'].executeQuery('', mockLocalDirectory);
        expect(results).toEqual([]);
      }));
    });

    it('local search returns local paths when searching local directories', function () {
      waitsForPromise(_asyncToGenerator(function* () {
        // Set up the HackSearchService to return some canned results.
        var cannedResults = [{ path: '/some/local/path/asdf.txt', line: 1, column: 42, context: 'aha' }];
        var hackSearchService = createDummyHackSearchService();
        var queryMethod = spyOn(hackSearchService, 'queryHack').andReturn(cannedResults);
        getHackSearchService = jasmine.createSpy('getHackSearchService').andReturn(hackSearchService);

        var query = 'asdf';
        var results = yield _libHackSymbolProvider2['default'].executeQuery(query, mockLocalDirectory);

        // Verify the expected results were returned by delegating to the HackSearchService.
        expect(results).toEqual(cannedResults);
        expect(queryMethod.callCount).toBe(1);
        expect(queryMethod.argsForCall[0]).toEqual([mockLocalDirectory.getPath(), query]);
      }));
    });

    it('remote search returns remote paths when searching remote directories', function () {
      waitsForPromise(_asyncToGenerator(function* () {
        // Set up the HackSearchService to return some canned results.
        var mockRemoteDirectory = {
          getPath: function getPath() {
            return 'nuclide://some.host:1234/some/remote/path';
          }
        };
        var cannedResults = [{
          path: 'nuclide://some.host:1234/some/local/path/asdf.txt',
          line: 1,
          column: 42,
          context: 'aha'
        }];
        var hackSearchService = createDummyHackSearchService();
        var queryMethod = spyOn(hackSearchService, 'queryHack').andReturn(cannedResults);
        getHackSearchService = jasmine.createSpy('getHackSearchService').andReturn(hackSearchService);

        var query = 'asdf';
        var results = yield _libHackSymbolProvider2['default'].executeQuery(query, mockRemoteDirectory);

        // Verify the expected results were returned by delegating to the HackSearchService,
        // and that local file paths are converted to NuclideUris.
        expect(results).toEqual(cannedResults);
        expect(queryMethod.callCount).toBe(1);
        expect(queryMethod.argsForCall[0]).toEqual([mockRemoteDirectory.getPath(), query]);
      }));
    });
  });

  describe('Result rendering', function () {
    it('should work', function () {
      var mockResult = {
        path: '/some/arbitrary/path',
        name: 'IExampleSymbolInterface',
        additionalInfo: 'interface'
      };
      var reactElement = _libHackSymbolProvider2['default'].getComponentForItem(mockResult);
      expect(reactElement.props.title).toBe('interface');
      var renderedComponent = TestUtils.renderIntoDocument(reactElement);
      var renderedNode = _reactForAtom2['default'].findDOMNode(renderedComponent);

      expect(renderedNode.querySelectorAll('.omnisearch-symbol-result-filename').length).toBe(1);
      expect(renderedNode.querySelectorAll('.icon-puzzle').length).toBe(1);
    });
  });
});

function createDummyHackSearchService() {
  return {
    queryHack: function queryHack(rootDirectory, queryString) {
      throw new Error('replace with implementation for testing');
    },

    isAvailableForDirectoryHack: function isAvailableForDirectoryHack(rootDirectory) {
      throw new Error('replace with implementation for testing');
    }
  };
}
// behavior.
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/zhangxiaotian/.atom/packages/nuclide-hack-symbol-provider/spec/HackSymbolProvider-spec.js
