function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _libRecentFilesService = require('../lib/RecentFilesService');

var _libRecentFilesService2 = _interopRequireDefault(_libRecentFilesService);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

'use babel';

var ON_DID_CHANGE_ACTIVE_PANE_ITEM_DEBOUNCE_MS = 101;
var FILE_PATH_1 = 'foo/bar/foo.js';
var FILE_PATH_2 = 'foo/bar/bar.js';
var FILE_PATH_3 = 'foo/bar/baz.js';

describe('RecentFilesService', function () {
  var recentFilesService = undefined;
  var origDateNow = undefined;

  beforeEach(function () {
    origDateNow = Date.now;
    /*
     * `RecentFileService` listens for `onWorkspaceDidStopChangingActivePaneItem`, which debounces
     * calls to `onDidChangeActivePaneItem`. `debounce` calls `Date.now` to determine whether to
     * call callbacks.
     *
     * Mock `Date.now` to use the fake Jasmine clock so `advanceClock` can be called synchronously
     * and call appropriate callbacks deterministically.
     */
    // $FlowFixMe
    Date.now = function () {
      return window.now;
    };
    recentFilesService = new _libRecentFilesService2['default']();
  });

  afterEach(function () {
    // $FlowFixMe
    Date.now = origDateNow;
  });

  describe('getRecentFiles', function () {
    it('returns a reverse-chronological list of recently opened files', function () {
      waitsForPromise(_asyncToGenerator(function* () {
        var mostRecentFiles = undefined;
        var previousTimestamp = 0;
        expect(recentFilesService.getRecentFiles().length).toEqual(0);

        yield atom.workspace.open(FILE_PATH_1);
        advanceClock(ON_DID_CHANGE_ACTIVE_PANE_ITEM_DEBOUNCE_MS);
        mostRecentFiles = recentFilesService.getRecentFiles();
        expect(mostRecentFiles.length).toEqual(1);
        expect(mostRecentFiles[0].path.endsWith(FILE_PATH_1)).toBe(true);
        expect(mostRecentFiles[0].timestamp).toBeGreaterThan(previousTimestamp);
        previousTimestamp = mostRecentFiles[0].timestamp;

        yield atom.workspace.open(FILE_PATH_2);
        advanceClock(ON_DID_CHANGE_ACTIVE_PANE_ITEM_DEBOUNCE_MS);
        mostRecentFiles = recentFilesService.getRecentFiles();
        expect(mostRecentFiles.length).toEqual(2);
        expect(mostRecentFiles[0].path.endsWith(FILE_PATH_2)).toBe(true);
        expect(mostRecentFiles[0].timestamp).toBeGreaterThan(previousTimestamp);

        previousTimestamp = mostRecentFiles[0].timestamp;
        yield atom.workspace.open(FILE_PATH_3);
        advanceClock(ON_DID_CHANGE_ACTIVE_PANE_ITEM_DEBOUNCE_MS);
        mostRecentFiles = recentFilesService.getRecentFiles();
        expect(mostRecentFiles.length).toEqual(3);
        expect(mostRecentFiles[0].path.endsWith(FILE_PATH_3)).toBe(true);
        expect(mostRecentFiles[0].timestamp).toBeGreaterThan(previousTimestamp);
      }));
    });

    it('returns paths and timestamps of recently opened files', function () {
      waitsForPromise(_asyncToGenerator(function* () {
        yield atom.workspace.open(FILE_PATH_1);
        advanceClock(ON_DID_CHANGE_ACTIVE_PANE_ITEM_DEBOUNCE_MS);
        var recentFiles = recentFilesService.getRecentFiles();
        var mostRecentFile = recentFiles[0];
        expect(Object.keys(mostRecentFile).length).toEqual(2);
        expect(typeof mostRecentFile.timestamp === 'number').toBe(true);
        expect(mostRecentFile.path.endsWith(FILE_PATH_1)).toBe(true);
      }));
    });

    it('resets the order of previously tracked files when they are touched', function () {
      waitsForPromise(_asyncToGenerator(function* () {
        var mostRecentFiles = undefined;
        expect(recentFilesService.getRecentFiles().length).toEqual(0);

        yield atom.workspace.open(FILE_PATH_1);
        advanceClock(ON_DID_CHANGE_ACTIVE_PANE_ITEM_DEBOUNCE_MS);
        mostRecentFiles = recentFilesService.getRecentFiles();
        expect(mostRecentFiles.length).toEqual(1);
        expect(mostRecentFiles[0].path.endsWith(FILE_PATH_1)).toBe(true);

        yield atom.workspace.open(FILE_PATH_2);
        advanceClock(ON_DID_CHANGE_ACTIVE_PANE_ITEM_DEBOUNCE_MS);
        mostRecentFiles = recentFilesService.getRecentFiles();
        expect(mostRecentFiles.length).toEqual(2);
        expect(mostRecentFiles[0].path.endsWith(FILE_PATH_2)).toBe(true);

        yield atom.workspace.open(FILE_PATH_1);
        advanceClock(ON_DID_CHANGE_ACTIVE_PANE_ITEM_DEBOUNCE_MS);
        mostRecentFiles = recentFilesService.getRecentFiles();
        expect(mostRecentFiles.length).toEqual(2);
        expect(mostRecentFiles[0].path.endsWith(FILE_PATH_1)).toBe(true);
        expect(mostRecentFiles[1].path.endsWith(FILE_PATH_2)).toBe(true);

        yield atom.workspace.open(FILE_PATH_2);
        advanceClock(ON_DID_CHANGE_ACTIVE_PANE_ITEM_DEBOUNCE_MS);
        mostRecentFiles = recentFilesService.getRecentFiles();
        expect(mostRecentFiles.length).toEqual(2);
        expect(mostRecentFiles[0].path.endsWith(FILE_PATH_2)).toBe(true);
        expect(mostRecentFiles[1].path.endsWith(FILE_PATH_1)).toBe(true);
      }));
    });
  });

  describe('initialization and de-serialization', function () {
    it('correctly restores itself from serialized state', function () {
      var serializedState = { filelist: [{ path: FILE_PATH_1, timestamp: 100 }, { path: FILE_PATH_2, timestamp: 200 }, { path: FILE_PATH_3, timestamp: 300 }] };
      var restoredRecentFilesService = new _libRecentFilesService2['default'](serializedState);
      var mostRecentFiles = restoredRecentFilesService.getRecentFiles();
      expect(mostRecentFiles).toEqual(serializedState.filelist);
    });

    it('starts out empty if no serialized state is passed to the constructor', function () {
      (0, _assert2['default'])(recentFilesService);
      expect(recentFilesService.getRecentFiles().length).toEqual(0);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/zhangxiaotian/.atom/packages/nuclide-recent-files-service/spec/RecentFilesService-spec.js
