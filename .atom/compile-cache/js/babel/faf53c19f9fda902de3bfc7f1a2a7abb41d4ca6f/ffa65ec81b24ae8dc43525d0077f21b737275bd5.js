'use babel';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var nuclideClient = require('nuclide-client');

// convenience location creator
function loc(line, column) {
  return { line: line, column: column };
}

describe('FindReferencesModel', function () {
  var FindReferencesModel = undefined;
  var fakeGrammar = {};

  beforeEach(function () {
    spyOn(atom.grammars, 'selectGrammar').andReturn(fakeGrammar);
    // Create fake file contents.
    spyOn(nuclideClient, 'getFileSystemServiceByNuclideUri').andReturn({
      readFile: _asyncToGenerator(function* (fileName) {
        if (fileName === 'bad') {
          throw 'bad file';
        }
        var file = '';
        for (var i = 1; i <= 9; i++) {
          file += i + '\n';
        }
        return file;
      })
    });
    // Have to install the spy before loading this.
    FindReferencesModel = require('../lib/FindReferencesModel');
  });

  it('should group references by file', function () {
    waitsForPromise(_asyncToGenerator(function* () {
      var refs = [
      // These should be sorted in the final output.
      { uri: '/test/1', name: 'test1', start: loc(9, 1), end: loc(10, 1) }, { uri: '/test/1', name: 'test1', start: loc(1, 1), end: loc(1, 1) }, { uri: '/test/2', name: 'test2', start: loc(2, 1), end: loc(2, 1) }];
      var model = new FindReferencesModel('/test', 'testFunction', refs);
      expect(model.getReferenceCount()).toEqual(3);
      expect(model.getFileCount()).toEqual(2);

      var result = yield model.getFileReferences(0, 100);
      // Note the 1 line of context in the previews (but make sure it doesn't overflow)
      var expectedResult = [{
        uri: '/test/1',
        grammar: fakeGrammar,
        previewText: ['1\n2', '8\n9'],
        refGroups: [{ references: [refs[1]], startLine: 1, endLine: 2 }, { references: [refs[0]], startLine: 8, endLine: 9 }]
      }, {
        uri: '/test/2',
        grammar: fakeGrammar,
        previewText: ['1\n2\n3'],
        refGroups: [{ references: [refs[2]], startLine: 1, endLine: 3 }]
      }];
      expect(result).toEqual(expectedResult);

      // It should also work if we fetch each one separately.
      var res1 = yield model.getFileReferences(0, 1);
      var res2 = yield model.getFileReferences(1, 1);
      expect(res1.concat(res2)).toEqual(expectedResult);
    }));
  });

  it('should group overlapping references', function () {
    waitsForPromise(_asyncToGenerator(function* () {
      // Adjacent blocks (including context) should get merged into a single group.
      var refs = [{ uri: '/test/1', name: 'test1', start: loc(1, 1), end: loc(1, 1) }, { uri: '/test/1', name: 'test1', start: loc(2, 1), end: loc(2, 1) }, { uri: '/test/1', name: 'test1', start: loc(4, 1), end: loc(4, 1) }, { uri: '/test/1', name: 'test1', start: loc(7, 1), end: loc(7, 1) }, { uri: '/test/1', name: 'test1', start: loc(8, 1), end: loc(8, 1) },
      // and overlapping ranges
      { uri: '/test/2', name: 'test2', start: loc(1, 1), end: loc(4, 1) }, { uri: '/test/2', name: 'test2', start: loc(2, 1), end: loc(3, 1) }];
      var model = new FindReferencesModel('/test', 'testFunction', refs);
      expect(model.getReferenceCount()).toEqual(7);
      expect(model.getFileCount()).toEqual(2);

      var result = yield model.getFileReferences(0, 100);
      expect(result).toEqual([{
        uri: '/test/1',
        grammar: fakeGrammar,
        previewText: ['1\n2\n3\n4\n5', '6\n7\n8\n9'],
        refGroups: [{ references: refs.slice(0, 3), startLine: 1, endLine: 5 }, { references: refs.slice(3, 5), startLine: 6, endLine: 9 }]
      }, {
        uri: '/test/2',
        grammar: fakeGrammar,
        previewText: ['1\n2\n3\n4\n5'],
        refGroups: [{ references: refs.slice(5), startLine: 1, endLine: 5 }]
      }]);
    }));
  });

  it('should hide bad files', function () {
    waitsForPromise(_asyncToGenerator(function* () {
      var refs = [{ uri: '/test/1', name: 'test1', start: loc(1, 1), end: loc(1, 1) }, { uri: 'bad', name: 'bad', start: loc(2, 1), end: loc(2, 1) }];
      var model = new FindReferencesModel('/test', 'testFunction', refs);
      expect(model.getReferenceCount()).toEqual(2);
      expect(model.getFileCount()).toEqual(2);

      var result = yield model.getFileReferences(0, 100);
      // Bad file should be silently hidden.
      expect(result).toEqual([{
        uri: '/test/1',
        grammar: fakeGrammar,
        previewText: ['1\n2'],
        refGroups: [{ references: [refs[0]], startLine: 1, endLine: 2 }]
      }]);
    }));
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy96aGFuZ3hpYW90aWFuLy5hdG9tL3BhY2thZ2VzL251Y2xpZGUtZmluZC1yZWZlcmVuY2VzL3NwZWMvRmluZFJlZmVyZW5jZXNNb2RlbC1zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7Ozs7O0FBV1osSUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7OztBQUdoRCxTQUFTLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFO0FBQ3pCLFNBQU8sRUFBQyxJQUFJLEVBQUosSUFBSSxFQUFFLE1BQU0sRUFBTixNQUFNLEVBQUMsQ0FBQztDQUN2Qjs7QUFFRCxRQUFRLENBQUMscUJBQXFCLEVBQUUsWUFBTTtBQUNwQyxNQUFJLG1CQUFtQixZQUFBLENBQUM7QUFDeEIsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDOztBQUV2QixZQUFVLENBQUMsWUFBTTtBQUNmLFNBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQzs7QUFFN0QsU0FBSyxDQUFDLGFBQWEsRUFBRSxrQ0FBa0MsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNqRSxjQUFRLG9CQUFFLFdBQU8sUUFBUSxFQUFLO0FBQzVCLFlBQUksUUFBUSxLQUFLLEtBQUssRUFBRTtBQUN0QixnQkFBTSxVQUFVLENBQUM7U0FDbEI7QUFDRCxZQUFJLElBQUksR0FBRyxFQUFFLENBQUM7QUFDZCxhQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzNCLGNBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQ2xCO0FBQ0QsZUFBTyxJQUFJLENBQUM7T0FDYixDQUFBO0tBQ0YsQ0FBQyxDQUFDOztBQUVILHVCQUFtQixHQUFHLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0dBQzdELENB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LEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsRUFDakUsRUFBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsRUFDakUsRUFBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsRUFDakUsRUFBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsRUFDakUsRUFBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUM7O0FBRWpFLFFBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLEVBQ2pFLEVBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENB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QUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUMsQ0FBQztPQUMvRCxDQUNGLENBQUMsQ0FBQztLQUNKLEVBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUVKLENBQUMsQ0FBQyIsImZpbGUiOiIvVXNlcnMvemhhbmd4aWFvdGlhbi8uYXRvbS9wYWNrYWdlcy9udWNsaWRlLWZpbmQtcmVmZXJlbmNlcy9zcGVjL0ZpbmRSZWZlcmVuY2VzTW9kZWwtc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNvbnN0IG51Y2xpZGVDbGllbnQgPSByZXF1aXJlKCdudWNsaWRlLWNsaWVudCcpO1xuXG4vLyBjb252ZW5pZW5jZSBsb2NhdGlvbiBjcmVhdG9yXG5mdW5jdGlvbiBsb2MobGluZSwgY29sdW1uKSB7XG4gIHJldHVybiB7bGluZSwgY29sdW1ufTtcbn1cblxuZGVzY3JpYmUoJ0ZpbmRSZWZlcmVuY2VzTW9kZWwnLCAoKSA9PiB7XG4gIGxldCBGaW5kUmVmZXJlbmNlc01vZGVsO1xuICBjb25zdCBmYWtlR3JhbW1hciA9IHt9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHNweU9uKGF0b20uZ3JhbW1hcnMsICdzZWxlY3RHcmFtbWFyJykuYW5kUmV0dXJuKGZha2VHcmFtbWFyKTtcbiAgICAvLyBDcmVhdGUgZmFrZSBmaWxlIGNvbnRlbnRzLlxuICAgIHNweU9uKG51Y2xpZGVDbGllbnQsICdnZXRGaWxlU3lzdGVtU2VydmljZUJ5TnVjbGlkZVVyaScpLmFuZFJldHVybih7XG4gICAgICByZWFkRmlsZTogYXN5bmMgKGZpbGVOYW1lKSA9PiB7XG4gICAgICAgIGlmIChmaWxlTmFtZSA9PT0gJ2JhZCcpIHtcbiAgICAgICAgICB0aHJvdyAnYmFkIGZpbGUnO1xuICAgICAgICB9XG4gICAgICAgIGxldCBmaWxlID0gJyc7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDk7IGkrKykge1xuICAgICAgICAgIGZpbGUgKz0gaSArICdcXG4nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICAvLyBIYXZlIHRvIGluc3RhbGwgdGhlIHNweSBiZWZvcmUgbG9hZGluZyB0aGlzLlxuICAgIEZpbmRSZWZlcmVuY2VzTW9kZWwgPSByZXF1aXJlKCcuLi9saWIvRmluZFJlZmVyZW5jZXNNb2RlbCcpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdyb3VwIHJlZmVyZW5jZXMgYnkgZmlsZScsICgpID0+IHtcbiAgICB3YWl0c0ZvclByb21pc2UoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVmcyA9IFtcbiAgICAgICAgLy8gVGhlc2Ugc2hvdWxkIGJlIHNvcnRlZCBpbiB0aGUgZmluYWwgb3V0cHV0LlxuICAgICAgICB7dXJpOiAnL3Rlc3QvMScsIG5hbWU6ICd0ZXN0MScsIHN0YXJ0OiBsb2MoOSwgMSksIGVuZDogbG9jKDEwLCAxKX0sXG4gICAgICAgIHt1cmk6ICcvdGVzdC8xJywgbmFtZTogJ3Rlc3QxJywgc3RhcnQ6IGxvYygxLCAxKSwgZW5kOiBsb2MoMSwgMSl9LFxuICAgICAgICB7dXJpOiAnL3Rlc3QvMicsIG5hbWU6ICd0ZXN0MicsIHN0YXJ0OiBsb2MoMiwgMSksIGVuZDogbG9jKDIsIDEpfSxcbiAgICAgIF07XG4gICAgICBjb25zdCBtb2RlbCA9IG5ldyBGaW5kUmVmZXJlbmNlc01vZGVsKCcvdGVzdCcsICd0ZXN0RnVuY3Rpb24nLCByZWZzKTtcbiAgICAgIGV4cGVjdChtb2RlbC5nZXRSZWZlcmVuY2VDb3VudCgpKS50b0VxdWFsKDMpO1xuICAgICAgZXhwZWN0KG1vZGVsLmdldEZpbGVDb3VudCgpKS50b0VxdWFsKDIpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBtb2RlbC5nZXRGaWxlUmVmZXJlbmNlcygwLCAxMDApO1xuICAgICAgLy8gTm90ZSB0aGUgMSBsaW5lIG9mIGNvbnRleHQgaW4gdGhlIHByZXZpZXdzIChidXQgbWFrZSBzdXJlIGl0IGRvZXNuJ3Qgb3ZlcmZsb3cpXG4gICAgICBjb25zdCBleHBlY3RlZFJlc3VsdCA9IFtcbiAgICAgICAge1xuICAgICAgICAgIHVyaTogJy90ZXN0LzEnLFxuICAgICAgICAgIGdyYW1tYXI6IGZha2VHcmFtbWFyLFxuICAgICAgICAgIHByZXZpZXdUZXh0OiBbJzFcXG4yJywgJzhcXG45J10sXG4gICAgICAgICAgcmVmR3JvdXBzOiBbXG4gICAgICAgICAgICB7cmVmZXJlbmNlczogW3JlZnNbMV1dLCBzdGFydExpbmU6IDEsIGVuZExpbmU6IDJ9LFxuICAgICAgICAgICAge3JlZmVyZW5jZXM6IFtyZWZzWzBdXSwgc3RhcnRMaW5lOiA4LCBlbmRMaW5lOiA5fSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdXJpOiAnL3Rlc3QvMicsXG4gICAgICAgICAgZ3JhbW1hcjogZmFrZUdyYW1tYXIsXG4gICAgICAgICAgcHJldmlld1RleHQ6IFsnMVxcbjJcXG4zJ10sXG4gICAgICAgICAgcmVmR3JvdXBzOiBbXG4gICAgICAgICAgICB7cmVmZXJlbmNlczogW3JlZnNbMl1dLCBzdGFydExpbmU6IDEsIGVuZExpbmU6IDN9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChleHBlY3RlZFJlc3VsdCk7XG5cbiAgICAgIC8vIEl0IHNob3VsZCBhbHNvIHdvcmsgaWYgd2UgZmV0Y2ggZWFjaCBvbmUgc2VwYXJhdGVseS5cbiAgICAgIGNvbnN0IHJlczEgPSBhd2FpdCBtb2RlbC5nZXRGaWxlUmVmZXJlbmNlcygwLCAxKTtcbiAgICAgIGNvbnN0IHJlczIgPSBhd2FpdCBtb2RlbC5nZXRGaWxlUmVmZXJlbmNlcygxLCAxKTtcbiAgICAgIGV4cGVjdChyZXMxLmNvbmNhdChyZXMyKSkudG9FcXVhbChleHBlY3RlZFJlc3VsdCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ3JvdXAgb3ZlcmxhcHBpbmcgcmVmZXJlbmNlcycsICgpID0+IHtcbiAgICB3YWl0c0ZvclByb21pc2UoYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQWRqYWNlbnQgYmxvY2tzIChpbmNsdWRpbmcgY29udGV4dCkgc2hvdWxkIGdldCBtZXJnZWQgaW50byBhIHNpbmdsZSBncm91cC5cbiAgICAgIGNvbnN0IHJlZnMgPSBbXG4gICAgICAgIHt1cmk6ICcvdGVzdC8xJywgbmFtZTogJ3Rlc3QxJywgc3RhcnQ6IGxvYygxLCAxKSwgZW5kOiBsb2MoMSwgMSl9LFxuICAgICAgICB7dXJpOiAnL3Rlc3QvMScsIG5hbWU6ICd0ZXN0MScsIHN0YXJ0OiBsb2MoMiwgMSksIGVuZDogbG9jKDIsIDEpfSxcbiAgICAgICAge3VyaTogJy90ZXN0LzEnLCBuYW1lOiAndGVzdDEnLCBzdGFydDogbG9jKDQsIDEpLCBlbmQ6IGxvYyg0LCAxKX0sXG4gICAgICAgIHt1cmk6ICcvdGVzdC8xJywgbmFtZTogJ3Rlc3QxJywgc3RhcnQ6IGxvYyg3LCAxKSwgZW5kOiBsb2MoNywgMSl9LFxuICAgICAgICB7dXJpOiAnL3Rlc3QvMScsIG5hbWU6ICd0ZXN0MScsIHN0YXJ0OiBsb2MoOCwgMSksIGVuZDogbG9jKDgsIDEpfSxcbiAgICAgICAgLy8gYW5kIG92ZXJsYXBwaW5nIHJhbmdlc1xuICAgICAgICB7dXJpOiAnL3Rlc3QvMicsIG5hbWU6ICd0ZXN0MicsIHN0YXJ0OiBsb2MoMSwgMSksIGVuZDogbG9jKDQsIDEpfSxcbiAgICAgICAge3VyaTogJy90ZXN0LzInLCBuYW1lOiAndGVzdDInLCBzdGFydDogbG9jKDIsIDEpLCBlbmQ6IGxvYygzLCAxKX0sXG4gICAgICBdO1xuICAgICAgY29uc3QgbW9kZWwgPSBuZXcgRmluZFJlZmVyZW5jZXNNb2RlbCgnL3Rlc3QnLCAndGVzdEZ1bmN0aW9uJywgcmVmcyk7XG4gICAgICBleHBlY3QobW9kZWwuZ2V0UmVmZXJlbmNlQ291bnQoKSkudG9FcXVhbCg3KTtcbiAgICAgIGV4cGVjdChtb2RlbC5nZXRGaWxlQ291bnQoKSkudG9FcXVhbCgyKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9kZWwuZ2V0RmlsZVJlZmVyZW5jZXMoMCwgMTAwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoW1xuICAgICAgICB7XG4gICAgICAgICAgdXJpOiAnL3Rlc3QvMScsXG4gICAgICAgICAgZ3JhbW1hcjogZmFrZUdyYW1tYXIsXG4gICAgICAgICAgcHJldmlld1RleHQ6IFsnMVxcbjJcXG4zXFxuNFxcbjUnLCAnNlxcbjdcXG44XFxuOSddLFxuICAgICAgICAgIHJlZkdyb3VwczogW1xuICAgICAgICAgICAge3JlZmVyZW5jZXM6IHJlZnMuc2xpY2UoMCwgMyksIHN0YXJ0TGluZTogMSwgZW5kTGluZTogNX0sXG4gICAgICAgICAgICB7cmVmZXJlbmNlczogcmVmcy5zbGljZSgzLCA1KSwgc3RhcnRMaW5lOiA2LCBlbmRMaW5lOiA5fSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdXJpOiAnL3Rlc3QvMicsXG4gICAgICAgICAgZ3JhbW1hcjogZmFrZUdyYW1tYXIsXG4gICAgICAgICAgcHJldmlld1RleHQ6IFsnMVxcbjJcXG4zXFxuNFxcbjUnXSxcbiAgICAgICAgICByZWZHcm91cHM6IFtcbiAgICAgICAgICAgIHtyZWZlcmVuY2VzOiByZWZzLnNsaWNlKDUpLCBzdGFydExpbmU6IDEsIGVuZExpbmU6IDV9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoaWRlIGJhZCBmaWxlcycsICgpID0+IHtcbiAgICB3YWl0c0ZvclByb21pc2UoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVmcyA9IFtcbiAgICAgICAge3VyaTogJy90ZXN0LzEnLCBuYW1lOiAndGVzdDEnLCBzdGFydDogbG9jKDEsIDEpLCBlbmQ6IGxvYygxLCAxKX0sXG4gICAgICAgIHt1cmk6ICdiYWQnLCBuYW1lOiAnYmFkJywgc3RhcnQ6IGxvYygyLCAxKSwgZW5kOiBsb2MoMiwgMSl9LFxuICAgICAgXTtcbiAgICAgIGNvbnN0IG1vZGVsID0gbmV3IEZpbmRSZWZlcmVuY2VzTW9kZWwoJy90ZXN0JywgJ3Rlc3RGdW5jdGlvbicsIHJlZnMpO1xuICAgICAgZXhwZWN0KG1vZGVsLmdldFJlZmVyZW5jZUNvdW50KCkpLnRvRXF1YWwoMik7XG4gICAgICBleHBlY3QobW9kZWwuZ2V0RmlsZUNvdW50KCkpLnRvRXF1YWwoMik7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1vZGVsLmdldEZpbGVSZWZlcmVuY2VzKDAsIDEwMCk7XG4gICAgICAvLyBCYWQgZmlsZSBzaG91bGQgYmUgc2lsZW50bHkgaGlkZGVuLlxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChbXG4gICAgICAgIHtcbiAgICAgICAgICB1cmk6ICcvdGVzdC8xJyxcbiAgICAgICAgICBncmFtbWFyOiBmYWtlR3JhbW1hcixcbiAgICAgICAgICBwcmV2aWV3VGV4dDogWycxXFxuMiddLFxuICAgICAgICAgIHJlZkdyb3VwczogW3tyZWZlcmVuY2VzOiBbcmVmc1swXV0sIHN0YXJ0TGluZTogMSwgZW5kTGluZTogMn1dLFxuICAgICAgICB9LFxuICAgICAgXSk7XG4gICAgfSk7XG4gIH0pO1xuXG59KTtcbiJdfQ==
//# sourceURL=/Users/zhangxiaotian/.atom/packages/nuclide-find-references/spec/FindReferencesModel-spec.js
