'use babel';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _require = require('atom');

var Range = _require.Range;

var testPath = 'myPath';

describe('HackDiagnosticsProvider', function () {

  var hackDiagnosticsProvider = undefined;
  var fakeHackLanguages = undefined;

  function createFakeHackLanguage(uri) {
    return {
      _uri: uri,
      isHackAvailable: function isHackAvailable() {
        return true;
      }
    };
  }

  beforeEach(function () {
    // Mock 2 hack languages
    fakeHackLanguages = [];
    fakeHackLanguages.push(createFakeHackLanguage('/hack/root1'));
    fakeHackLanguages.push(createFakeHackLanguage('/hack/root2'));
    require('../lib/hack').getCachedHackLanguageForUri = function (uri) {
      return fakeHackLanguages.filter(function (fakeLanguage) {
        return uri.startsWith(fakeLanguage._uri);
      })[0];
    };

    var FakeProviderBase = function FakeProviderBase() {
      _classCallCheck(this, FakeProviderBase);
    };

    var HackDiagnosticsProvider = require('../lib/HackDiagnosticsProvider');
    hackDiagnosticsProvider = new HackDiagnosticsProvider(false, FakeProviderBase);
  });

  describe('processDiagnostics', function () {

    it('should propertly transform a simple diagnostic', function () {
      var diagnostics = [{
        message: [{
          path: testPath,
          descr: 'message',
          line: 1,
          start: 3,
          end: 4
        }]
      }];

      var expectedOutput = {
        scope: 'file',
        providerName: 'Hack',
        text: 'message',
        type: 'Error',
        filePath: testPath,
        range: new Range([0, 2], [0, 4])
      };

      var message = hackDiagnosticsProvider._processDiagnostics(diagnostics, testPath).filePathToMessages.get(testPath)[0];
      expect(message).toEqual(expectedOutput);
    });

    it('should not filter diagnostics not in the target file', function () {
      var diagnostics = [{
        message: [{
          path: 'notMyPath',
          descr: 'message',
          line: 1,
          start: 3,
          end: 4
        }]
      }];

      var allMessages = hackDiagnosticsProvider._processDiagnostics(diagnostics, testPath).filePathToMessages;
      expect(allMessages.size).toBe(1);
      expect(allMessages.has('notMyPath')).toBe(true);
    });

    it('should create traces for diagnostics on multiple messages and combine the text', function () {
      var diagnostics = [{
        message: [{
          path: testPath,
          descr: 'message',
          line: 1,
          start: 3,
          end: 4
        }, {
          path: 'otherPath',
          descr: 'more message',
          line: 5,
          start: 7,
          end: 8
        }]
      }];

      var expectedOutput = {
        scope: 'file',
        providerName: 'Hack',
        type: 'Error',
        text: 'message',
        filePath: testPath,
        range: new Range([0, 2], [0, 4]),
        trace: [{
          type: 'Trace',
          filePath: 'otherPath',
          text: 'more message',
          range: new Range([4, 6], [4, 8])
        }]
      };

      var message = hackDiagnosticsProvider._processDiagnostics(diagnostics, testPath).filePathToMessages.get(testPath)[0];
      expect(message).toEqual(expectedOutput);
    });
  });

  describe('invalidateProjectPath', function () {
    it('should remove corresponding errors to certain hack language', function () {
      // Mock a diagnostic provider with 2 hack language roots, sharing common file real paths.
      var hackLanguageToFilePaths = new Map();
      var root1Paths = ['/hack/root1/file.js', '/hack/common/file.js'];
      var root2Paths = ['/hack/root2/file.js', '/hack/common/file.js'];
      hackLanguageToFilePaths.set(fakeHackLanguages[0], new Set(root1Paths));
      hackLanguageToFilePaths.set(fakeHackLanguages[1], new Set(root2Paths));
      hackDiagnosticsProvider._hackLanguageToFilePaths = hackLanguageToFilePaths;
      // Mock the `publishMessageInvalidation` call to capture call arguments.
      var publishHandler = jasmine.createSpy('publish');
      hackDiagnosticsProvider._providerBase.publishMessageInvalidation = publishHandler;

      hackDiagnosticsProvider.invalidateProjectPath('/hack/root1');
      expect(publishHandler.callCount).toBe(1);
      expect(publishHandler.argsForCall[0][0]).toEqual({ scope: 'file', filePaths: root1Paths });
      expect(hackDiagnosticsProvider._hackLanguageToFilePaths.size).toBe(1);
      expect(hackDiagnosticsProvider._hackLanguageToFilePaths.get(fakeHackLanguages[1])).toEqual(new Set(root2Paths));
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/zhangxiaotian/.atom/packages/nuclide-hack/spec/HackDiagnosticsProvider-spec.js
