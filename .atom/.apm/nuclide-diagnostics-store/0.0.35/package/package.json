{"activationCommands":{},"consumedServices":{"linter":{"versions":{"^1.0.0":"consumeLinterProvider"}},"nuclide-diagnostics-provider":{"versions":{"0.1.0":"consumeDiagnosticProvider"}}},"dependencies":{"nuclide-commons":"0.0.35","nuclide-diagnostics-base":"0.0.35","nuclide-diagnostics-provider-base":"0.0.35","nuclide-logging":"0.0.35"},"description":"Provides an API to consume diagnostics.","devDependencies":{"nuclide-remote-uri":"0.0.35","nuclide-test-helpers":"0.0.35"},"engines":{"atom":">=1.1.0"},"license":"SEE LICENSE IN LICENSE","main":"./lib/main","name":"nuclide-diagnostics-store","nuclide":{"config":{"consumeLegacyLinters":{"default":true,"type":"boolean"},"legacyLintOnTheFly":{"default":false,"description":"Used only for legacy linters","type":"boolean"}},"packageType":"Atom","testRunner":"apm"},"providedServices":{"nuclide-diagnostics":{"versions":{"0.0.0":"provideDiagnosticUpdates"}}},"repository":{"type":"git","url":"git+https://github.com/facebooknuclideapm/nuclide-diagnostics-store.git"},"version":"0.0.35","readme":"**NOTE:** The official repository for this package is https://github.com/facebook/nuclide.\nPlease file all issues and pull requests there.\n\n# nuclide-diagnostics-store\n\nThis page is for developers wishing to integrate with the `nuclide-diagnostics` packages. If you\nsimply want to view diagnostics in Atom, look at the\n[end-user docs](https://github.com/facebook/nuclide/tree/master/pkg/nuclide/diagnostics#readme).\n\n## Overview\n\n`nuclide-diagnostics-store` is responsible for consuming diagnostics from providers and sending\nupdates to UI packages.\n[`nuclide-diagnostics-ui`](https://github.com/facebook/nuclide/tree/master/pkg/nuclide/diagnostics/ui)\nis our UI implementation.\n\nWe consume two APIs: Our own provider API, described below, and the\n[`linter`](https://atom.io/packages/linter) [package\nAPI](https://github.com/atom-community/linter/wiki/Linter-API) (with some extensions).\n\nThe Nuclide API is designed to support a \"push\" model where providers notify the store\nasynchronously about new diagnostics (and when to invalidate old ones). A provider may choose to\npublish diagnostics in response to file change events from a `TextEditor`, but it may also report\ndiagnostics in response to other events, such as file changes that occur outside of Atom. By\ncomparison, the `linter` API exclusively polls for changes in response to change events from a\n`TextEditor`.\n\n## Provider API\n\n### API Overview\n\nThe Flow types that describe a provider are available in\n[`types.js`](https://github.com/facebook/nuclide/blob/master/pkg/nuclide/diagnostics/base/lib/types.js).\nA `DiagnosticProvider`, in particular, is simply an object that allows a consumer to register for\ntwo events:\n\n```js\ntype DiagnosticProvider = {\n  onMessageUpdate: (callback: MessageUpdateCallback) => Disposable;\n  onMessageInvalidation: (callback: MessageInvalidationCallback) => Disposable;\n};\n```\n\nWhere the callbacks are:\n\n```js\ntype MessageUpdateCallback = (update: DiagnosticProviderUpdate) => mixed;\ntype MessageInvalidationCallback = (message: InvalidationMessage) => mixed;\n```\n\nAnd the messages themselves are:\n\n```js\ntype DiagnosticProviderUpdate = {\n  filePathToMessages?: Map<string, Array<FileDiagnosticMessage>>;\n  projectMessages?: Array<ProjectDiagnosticMessage>;\n};\n\ntype FileDiagnosticMessage = {\n  scope: 'file';\n  providerName: string;\n  type: MessageType;\n  filePath: string;\n  text?: string;\n  html?: string;\n  range?: Range;\n  trace?: Array<Trace>;\n};\n\ntype ProjectDiagnosticMessage = {\n  scope: 'project';\n  providerName: string;\n  type: MessageType;\n  text?: string;\n  html?: string;\n  range?: Range;\n  trace?: Array<Trace>;\n};\n\ntype Trace = {\n  type: 'Trace';\n  text?: string;\n  html?: string;\n  filePath: string;\n  range?: Range;\n};\n\ntype InvalidationMessage = {\n  scope: 'file';\n  filePaths: Array<string>;\n} | {\n  scope: 'project';\n} | {\n  scope: 'all';\n};\n```\n\nNote that when an update is sent, any file names that are keys in `filePathToMessages` implicitly\nhave their previous messages invalidated. This means that simple providers that act only on the\ncurrently active file need not ever send an invalidation message.\n\n### Implementing a Provider\n\nYou are free to implement a provider using only the specification above, but you will duplicate a\nlot of work -- most of it related to subscribing to the appropriate Atom events. To alleviate that\npain, we have created the\n[`nuclide-diagnostics-provider-base`](https://github.com/facebook/nuclide/tree/master/pkg/nuclide/diagnostics/provider-base)\npackage.\n\nTo see it in action, look at our [sample diagnostics\nprovider](https://github.com/facebook/nuclide/tree/master/pkg/sample/diagnostics-provider).\n\n## Linter API\n\n`nuclide-diagnostics` is compatible with\n[providers](https://github.com/atom-community/linter/wiki/Linter-API) for the\n[`linter`](https://atom.io/packages/linter) package.\n\nWe implement several extensions to the linter API. Here is the type for providers that we accept:\n\n```js\ntype LinterProvider = {\n  /**\n   * Extension: Allows a provider to include a display name that will be shown with its messages.\n   */\n  providerName?: string;\n  /**\n   * Extension: Intended for developers who want to provide both interfaces to cater towards people\n   * who use only the `linter` package. This way you can provide both, but tell Nuclide to ignore\n   * the `linter` provider so that duplicate results do not appear.\n   */\n  disabledForNuclide?: boolean;\n  grammarScopes: Array<string>;\n  /**\n   * Extension: Overrides `grammarScopes` and triggers the linter on changes to any file, rather\n   * than just files with specific grammar scopes.\n   */\n  allGrammarScopes?: boolean;\n  scope: 'file' | 'project';\n  lintOnFly: boolean;\n  lint: (textEditor: TextEditor) => Promise<Array<LinterMessage>>;\n};\n```\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/facebooknuclideapm/nuclide-diagnostics-store/issues"},"homepage":"https://github.com/facebooknuclideapm/nuclide-diagnostics-store#readme","_id":"nuclide-diagnostics-store@0.0.35","_shasum":"f80e5233bc0d88b7d3e95bc1adb94a63ff9ce518","_resolved":"file:../d-1151116-10063-1kdfhfi/package.tgz","_from":"../d-1151116-10063-1kdfhfi/package.tgz"}